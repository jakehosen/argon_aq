
/home/jhosen/p2/Argon_Air_Quality/target/2.0.1/argon/Argon_Air_Quality.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000055a0  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  000d95c0  000d95c0  000095c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000d95c8  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000074  2003e430  000d95cc  0001e430  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000034c  2003e4a4  2003e4a4  0002e4a4  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000d9640  000d9640  00029640  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000d9668  000d9668  00029668  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0017f219  00000000  00000000  0002966c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000195ae  00000000  00000000  001a8885  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002928  00000000  00000000  001c1e33  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0003bf7f  00000000  00000000  001c475b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0003ef05  00000000  00000000  002006da  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00116835  00000000  00000000  0023f5df  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0002ea77  00000000  00000000  00355e14  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00007c68  00000000  00000000  0038488b  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  000075e4  00000000  00000000  0038c4f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f004 fec3 	bl	d8dbc <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f004 fecb 	bl	d8dd8 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e430 	.word	0x2003e430
   d404c:	000d95cc 	.word	0x000d95cc
   d4050:	2003e4a4 	.word	0x2003e4a4
   d4054:	2003e4a4 	.word	0x2003e4a4
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f002 f9f1 	bl	d6448 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000d9598 	.word	0x000d9598
   d4080:	000d95bc 	.word	0x000d95bc

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b824 	b.w	d40d0 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 fa3b 	bl	d4504 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f002 b99b 	b.w	d63cc <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f001 bb6d 	b.w	d5774 <malloc>

000d409a <_Znaj>:
   d409a:	f001 bb6b 	b.w	d5774 <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f001 bb71 	b.w	d5784 <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr

000d40b2 <_ZN5Print8printlnfEPKcz>:
        auto r = this->vprintf(false, format, args);
        va_end(args);
        return r;
    }

    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d40b2:	b40e      	push	{r1, r2, r3}
   d40b4:	b503      	push	{r0, r1, lr}
   d40b6:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(true, format, args);
   d40b8:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d40ba:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   d40be:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   d40c0:	f002 fa81 	bl	d65c6 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   d40c4:	b002      	add	sp, #8
   d40c6:	f85d eb04 	ldr.w	lr, [sp], #4
   d40ca:	b003      	add	sp, #12
   d40cc:	4770      	bx	lr
	...

000d40d0 <setup>:
String getAirQuality();
void createEventPayload(int temp, int humidity, int pressure, String airQuality);
void updateDisplay(int temp, int humidity, int pressure, String airQuality);

void setup()
{
   d40d0:	b508      	push	{r3, lr}
  Serial.begin(9600);
   d40d2:	f001 fe0f 	bl	d5cf4 <_Z16_fetch_usbserialv>
   d40d6:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d40da:	f001 fdff 	bl	d5cdc <_ZN9USBSerial5beginEl>
  delay(50);
   d40de:	2032      	movs	r0, #50	; 0x32
   d40e0:	f002 f9f8 	bl	d64d4 <delay>

  // Configure the dust sensor pin as an input
  pinMode(DUST_SENSOR_PIN, INPUT);
   d40e4:	2004      	movs	r0, #4
   d40e6:	2100      	movs	r1, #0
   d40e8:	f002 fcdc 	bl	d6aa4 <pinMode>

  if (aqSensor.init())
   d40ec:	482b      	ldr	r0, [pc, #172]	; (d419c <setup+0xcc>)
   d40ee:	f000 fb40 	bl	d4772 <_ZN16AirQualitySensor4initEv>
   d40f2:	2800      	cmp	r0, #0
   d40f4:	d04a      	beq.n	d418c <setup+0xbc>
  {
    Serial.println("Air Quality Sensor ready.");
   d40f6:	f001 fdfd 	bl	d5cf4 <_Z16_fetch_usbserialv>
   d40fa:	4929      	ldr	r1, [pc, #164]	; (d41a0 <setup+0xd0>)
  }
  else
  {
    Serial.println("Air Quality Sensor ERROR!");
   d40fc:	f002 fa3b 	bl	d6576 <_ZN5Print7printlnEPKc>
  }

  Wire.begin();
   d4100:	f002 fc6a 	bl	d69d8 <_Z19__fetch_global_Wirev>
   d4104:	f001 fcaa 	bl	d5a5c <_ZN7TwoWire5beginEv>
  SeeedOled.init();
   d4108:	4826      	ldr	r0, [pc, #152]	; (d41a4 <setup+0xd4>)
   d410a:	f000 fbab 	bl	d4864 <_ZN9SeeedOLED4initEv>

  SeeedOled.clearDisplay();
   d410e:	4825      	ldr	r0, [pc, #148]	; (d41a4 <setup+0xd4>)
   d4110:	f000 fc0a 	bl	d4928 <_ZN9SeeedOLED12clearDisplayEv>
  SeeedOled.setNormalDisplay();
   d4114:	4823      	ldr	r0, [pc, #140]	; (d41a4 <setup+0xd4>)
   d4116:	f000 fc6c 	bl	d49f2 <_ZN9SeeedOLED16setNormalDisplayEv>
  SeeedOled.setPageMode();
   d411a:	4822      	ldr	r0, [pc, #136]	; (d41a4 <setup+0xd4>)
   d411c:	f000 fbb4 	bl	d4888 <_ZN9SeeedOLED11setPageModeEv>

  SeeedOled.setTextXY(2, 0);
   d4120:	2200      	movs	r2, #0
   d4122:	4820      	ldr	r0, [pc, #128]	; (d41a4 <setup+0xd4>)
   d4124:	2102      	movs	r1, #2
   d4126:	f000 fbba 	bl	d489e <_ZN9SeeedOLED9setTextXYEhh>
  SeeedOled.putString("FNR498");
   d412a:	491f      	ldr	r1, [pc, #124]	; (d41a8 <setup+0xd8>)
   d412c:	481d      	ldr	r0, [pc, #116]	; (d41a4 <setup+0xd4>)
   d412e:	f000 fc1c 	bl	d496a <_ZN9SeeedOLED9putStringEPKc>
  SeeedOled.setTextXY(3, 0);
   d4132:	2200      	movs	r2, #0
   d4134:	481b      	ldr	r0, [pc, #108]	; (d41a4 <setup+0xd4>)
   d4136:	2103      	movs	r1, #3
   d4138:	f000 fbb1 	bl	d489e <_ZN9SeeedOLED9setTextXYEhh>
  SeeedOled.putString("Sensors");
   d413c:	491b      	ldr	r1, [pc, #108]	; (d41ac <setup+0xdc>)
   d413e:	4819      	ldr	r0, [pc, #100]	; (d41a4 <setup+0xd4>)
   d4140:	f000 fc13 	bl	d496a <_ZN9SeeedOLED9putStringEPKc>
  SeeedOled.setTextXY(4, 0);
   d4144:	4817      	ldr	r0, [pc, #92]	; (d41a4 <setup+0xd4>)
   d4146:	2200      	movs	r2, #0
   d4148:	2104      	movs	r1, #4
   d414a:	f000 fba8 	bl	d489e <_ZN9SeeedOLED9setTextXYEhh>
  SeeedOled.putString("Initializing");
   d414e:	4815      	ldr	r0, [pc, #84]	; (d41a4 <setup+0xd4>)
   d4150:	4917      	ldr	r1, [pc, #92]	; (d41b0 <setup+0xe0>)
   d4152:	f000 fc0a 	bl	d496a <_ZN9SeeedOLED9putStringEPKc>

  if (bme.begin())
   d4156:	4817      	ldr	r0, [pc, #92]	; (d41b4 <setup+0xe4>)
   d4158:	f001 f8d5 	bl	d5306 <_ZN15Adafruit_BME2805beginEv>
   d415c:	b1d0      	cbz	r0, d4194 <setup+0xc4>
  {
    Serial.println("BME280 Sensor ready.");
   d415e:	f001 fdc9 	bl	d5cf4 <_Z16_fetch_usbserialv>
   d4162:	4915      	ldr	r1, [pc, #84]	; (d41b8 <setup+0xe8>)
  }
  else
  {
    Serial.println("BME280 Sensor ERROR!");
   d4164:	f002 fa07 	bl	d6576 <_ZN5Print7printlnEPKc>
  }

delay(5000);
   d4168:	f241 3088 	movw	r0, #5000	; 0x1388
   d416c:	f002 f9b2 	bl	d64d4 <delay>

  SeeedOled.setTextXY(5, 0);
   d4170:	2200      	movs	r2, #0
   d4172:	480c      	ldr	r0, [pc, #48]	; (d41a4 <setup+0xd4>)
   d4174:	2105      	movs	r1, #5
   d4176:	f000 fb92 	bl	d489e <_ZN9SeeedOLED9setTextXYEhh>
  SeeedOled.putString("Warm-Up");
   d417a:	4910      	ldr	r1, [pc, #64]	; (d41bc <setup+0xec>)
   d417c:	4809      	ldr	r0, [pc, #36]	; (d41a4 <setup+0xd4>)
   d417e:	f000 fbf4 	bl	d496a <_ZN9SeeedOLED9putStringEPKc>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4182:	f001 fa03 	bl	d558c <HAL_Timer_Get_Milli_Seconds>
  

  lastInterval = millis();
   d4186:	4b0e      	ldr	r3, [pc, #56]	; (d41c0 <setup+0xf0>)
   d4188:	6018      	str	r0, [r3, #0]
}
   d418a:	bd08      	pop	{r3, pc}
    Serial.println("Air Quality Sensor ERROR!");
   d418c:	f001 fdb2 	bl	d5cf4 <_Z16_fetch_usbserialv>
   d4190:	490c      	ldr	r1, [pc, #48]	; (d41c4 <setup+0xf4>)
   d4192:	e7b3      	b.n	d40fc <setup+0x2c>
    Serial.println("BME280 Sensor ERROR!");
   d4194:	f001 fdae 	bl	d5cf4 <_Z16_fetch_usbserialv>
   d4198:	490b      	ldr	r1, [pc, #44]	; (d41c8 <setup+0xf8>)
   d419a:	e7e3      	b.n	d4164 <setup+0x94>
   d419c:	2003e4ac 	.word	0x2003e4ac
   d41a0:	000d8e90 	.word	0x000d8e90
   d41a4:	2003e640 	.word	0x2003e640
   d41a8:	000d8ec4 	.word	0x000d8ec4
   d41ac:	000d8ecb 	.word	0x000d8ecb
   d41b0:	000d8ed3 	.word	0x000d8ed3
   d41b4:	2003e4c8 	.word	0x2003e4c8
   d41b8:	000d8ee0 	.word	0x000d8ee0
   d41bc:	000d8f0a 	.word	0x000d8f0a
   d41c0:	2003e530 	.word	0x2003e530
   d41c4:	000d8eaa 	.word	0x000d8eaa
   d41c8:	000d8ef5 	.word	0x000d8ef5

000d41cc <_Z16getAirQualityNumv>:



int getAirQualityNum()
{
  int qual_int = aqSensor.slope();
   d41cc:	4801      	ldr	r0, [pc, #4]	; (d41d4 <_Z16getAirQualityNumv+0x8>)
   d41ce:	f000 baff 	b.w	d47d0 <_ZN16AirQualitySensor5slopeEv>
   d41d2:	bf00      	nop
   d41d4:	2003e4ac 	.word	0x2003e4ac

000d41d8 <_Z13getAirQualityv>:
  return qual_int;
}

String getAirQuality()
{
   d41d8:	b538      	push	{r3, r4, r5, lr}
   d41da:	4604      	mov	r4, r0
  int quality = aqSensor.slope();
   d41dc:	4811      	ldr	r0, [pc, #68]	; (d4224 <_Z13getAirQualityv+0x4c>)
   d41de:	f000 faf7 	bl	d47d0 <_ZN16AirQualitySensor5slopeEv>
  String qual = "None";
   d41e2:	4911      	ldr	r1, [pc, #68]	; (d4228 <_Z13getAirQualityv+0x50>)
  int quality = aqSensor.slope();
   d41e4:	4605      	mov	r5, r0
  String qual = "None";
   d41e6:	4620      	mov	r0, r4
   d41e8:	f002 fa85 	bl	d66f6 <_ZN6StringC1EPKc>

  if (quality == AirQualitySensor::FORCE_SIGNAL)
   d41ec:	4b0f      	ldr	r3, [pc, #60]	; (d422c <_Z13getAirQualityv+0x54>)
   d41ee:	681b      	ldr	r3, [r3, #0]
   d41f0:	42ab      	cmp	r3, r5
   d41f2:	d105      	bne.n	d4200 <_Z13getAirQualityv+0x28>
  {
    qual = "Danger";
   d41f4:	490e      	ldr	r1, [pc, #56]	; (d4230 <_Z13getAirQualityv+0x58>)
  {
    qual = "Low Pollution";
  }
  else if (quality == AirQualitySensor::FRESH_AIR)
  {
    qual = "Fresh Air";
   d41f6:	4620      	mov	r0, r4
   d41f8:	f002 faab 	bl	d6752 <_ZN6StringaSEPKc>
  }

  return qual;
}
   d41fc:	4620      	mov	r0, r4
   d41fe:	bd38      	pop	{r3, r4, r5, pc}
  else if (quality == AirQualitySensor::HIGH_POLLUTION)
   d4200:	4b0c      	ldr	r3, [pc, #48]	; (d4234 <_Z13getAirQualityv+0x5c>)
   d4202:	681b      	ldr	r3, [r3, #0]
   d4204:	42ab      	cmp	r3, r5
   d4206:	d101      	bne.n	d420c <_Z13getAirQualityv+0x34>
    qual = "High Pollution";
   d4208:	490b      	ldr	r1, [pc, #44]	; (d4238 <_Z13getAirQualityv+0x60>)
   d420a:	e7f4      	b.n	d41f6 <_Z13getAirQualityv+0x1e>
  else if (quality == AirQualitySensor::LOW_POLLUTION)
   d420c:	4b0b      	ldr	r3, [pc, #44]	; (d423c <_Z13getAirQualityv+0x64>)
   d420e:	681b      	ldr	r3, [r3, #0]
   d4210:	42ab      	cmp	r3, r5
   d4212:	d101      	bne.n	d4218 <_Z13getAirQualityv+0x40>
    qual = "Low Pollution";
   d4214:	490a      	ldr	r1, [pc, #40]	; (d4240 <_Z13getAirQualityv+0x68>)
   d4216:	e7ee      	b.n	d41f6 <_Z13getAirQualityv+0x1e>
  else if (quality == AirQualitySensor::FRESH_AIR)
   d4218:	4b0a      	ldr	r3, [pc, #40]	; (d4244 <_Z13getAirQualityv+0x6c>)
   d421a:	681b      	ldr	r3, [r3, #0]
   d421c:	42ab      	cmp	r3, r5
   d421e:	d1ed      	bne.n	d41fc <_Z13getAirQualityv+0x24>
    qual = "Fresh Air";
   d4220:	4909      	ldr	r1, [pc, #36]	; (d4248 <_Z13getAirQualityv+0x70>)
   d4222:	e7e8      	b.n	d41f6 <_Z13getAirQualityv+0x1e>
   d4224:	2003e4ac 	.word	0x2003e4ac
   d4228:	000d8f12 	.word	0x000d8f12
   d422c:	000d9098 	.word	0x000d9098
   d4230:	000d8f17 	.word	0x000d8f17
   d4234:	000d90a0 	.word	0x000d90a0
   d4238:	000d8f1e 	.word	0x000d8f1e
   d423c:	000d909c 	.word	0x000d909c
   d4240:	000d8f2d 	.word	0x000d8f2d
   d4244:	000d90a4 	.word	0x000d90a4
   d4248:	000d8f3b 	.word	0x000d8f3b

000d424c <_Z12getBMEValuesRiS_S_>:

int getBMEValues(int &temp, int &pressure, int &humidity)
{
   d424c:	b570      	push	{r4, r5, r6, lr}
   d424e:	4606      	mov	r6, r0
  temp = (int)bme.readTemperature();
   d4250:	480e      	ldr	r0, [pc, #56]	; (d428c <_Z12getBMEValuesRiS_S_+0x40>)
{
   d4252:	460d      	mov	r5, r1
   d4254:	4614      	mov	r4, r2
  temp = (int)bme.readTemperature();
   d4256:	f000 fce1 	bl	d4c1c <_ZN15Adafruit_BME28015readTemperatureEv>
   d425a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
  pressure = (int)(bme.readPressure() / 100.0F);
   d425e:	480b      	ldr	r0, [pc, #44]	; (d428c <_Z12getBMEValuesRiS_S_+0x40>)
  temp = (int)bme.readTemperature();
   d4260:	ed86 0a00 	vstr	s0, [r6]
  pressure = (int)(bme.readPressure() / 100.0F);
   d4264:	f000 fd08 	bl	d4c78 <_ZN15Adafruit_BME28012readPressureEv>
   d4268:	ed9f 7a09 	vldr	s14, [pc, #36]	; d4290 <_Z12getBMEValuesRiS_S_+0x44>
  humidity = (int)bme.readHumidity();
   d426c:	4807      	ldr	r0, [pc, #28]	; (d428c <_Z12getBMEValuesRiS_S_+0x40>)
  pressure = (int)(bme.readPressure() / 100.0F);
   d426e:	eec0 7a07 	vdiv.f32	s15, s0, s14
   d4272:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   d4276:	edc5 7a00 	vstr	s15, [r5]
  humidity = (int)bme.readHumidity();
   d427a:	f000 fe3f 	bl	d4efc <_ZN15Adafruit_BME28012readHumidityEv>
   d427e:	eebd 0ac0 	vcvt.s32.f32	s0, s0

  return 1;
}
   d4282:	2001      	movs	r0, #1
  humidity = (int)bme.readHumidity();
   d4284:	ed84 0a00 	vstr	s0, [r4]
}
   d4288:	bd70      	pop	{r4, r5, r6, pc}
   d428a:	bf00      	nop
   d428c:	2003e4c8 	.word	0x2003e4c8
   d4290:	42c80000 	.word	0x42c80000
   d4294:	00000000 	.word	0x00000000

000d4298 <_Z21getDustSensorReadingsv>:

void getDustSensorReadings()
{
   d4298:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d429c:	ed2d 8b02 	vpush	{d8}
  // This particular dust sensor returns 0s often, so let's filter them out by making sure we only
  // capture and use non-zero LPO values for our calculations once we get a good reading.
  if (lowpulseoccupancy == 0)
   d42a0:	4c49      	ldr	r4, [pc, #292]	; (d43c8 <_Z21getDustSensorReadingsv+0x130>)
   d42a2:	4b4a      	ldr	r3, [pc, #296]	; (d43cc <_Z21getDustSensorReadingsv+0x134>)
   d42a4:	6822      	ldr	r2, [r4, #0]
   d42a6:	2a00      	cmp	r2, #0
   d42a8:	d177      	bne.n	d439a <_Z21getDustSensorReadingsv+0x102>
  {
    lowpulseoccupancy = last_lpo;
   d42aa:	681b      	ldr	r3, [r3, #0]
   d42ac:	6023      	str	r3, [r4, #0]
  else
  {
    last_lpo = lowpulseoccupancy;
  }

  ratio = lowpulseoccupancy / (SENSOR_READING_INTERVAL * 10.0);                   // Integer percentage 0=>100
   d42ae:	6820      	ldr	r0, [r4, #0]
   d42b0:	4d47      	ldr	r5, [pc, #284]	; (d43d0 <_Z21getDustSensorReadingsv+0x138>)
  concentration = 1.1 * pow(ratio, 3) - 3.8 * pow(ratio, 2) + 520 * ratio + 0.62; // using spec sheet curve
   d42b2:	f8df a130 	ldr.w	sl, [pc, #304]	; d43e4 <_Z21getDustSensorReadingsv+0x14c>
  ratio = lowpulseoccupancy / (SENSOR_READING_INTERVAL * 10.0);                   // Integer percentage 0=>100
   d42b6:	f003 ff37 	bl	d8128 <__aeabi_ui2d>
   d42ba:	a339      	add	r3, pc, #228	; (adr r3, d43a0 <_Z21getDustSensorReadingsv+0x108>)
   d42bc:	e9d3 2300 	ldrd	r2, r3, [r3]
   d42c0:	f004 f8d6 	bl	d8470 <__aeabi_ddiv>
   d42c4:	f004 fa5a 	bl	d877c <__aeabi_d2f>
   d42c8:	6028      	str	r0, [r5, #0]
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
   d42ca:	f003 ff4f 	bl	d816c <__aeabi_f2d>
   d42ce:	ed9f 1b36 	vldr	d1, [pc, #216]	; d43a8 <_Z21getDustSensorReadingsv+0x110>
   d42d2:	ec41 0b10 	vmov	d0, r0, r1
   d42d6:	f002 fc47 	bl	d6b68 <pow>
  concentration = 1.1 * pow(ratio, 3) - 3.8 * pow(ratio, 2) + 520 * ratio + 0.62; // using spec sheet curve
   d42da:	ed95 8a00 	vldr	s16, [r5]
   d42de:	ee18 0a10 	vmov	r0, s16
   d42e2:	ec57 6b10 	vmov	r6, r7, d0
   d42e6:	f003 ff41 	bl	d816c <__aeabi_f2d>
   d42ea:	a331      	add	r3, pc, #196	; (adr r3, d43b0 <_Z21getDustSensorReadingsv+0x118>)
   d42ec:	e9d3 2300 	ldrd	r2, r3, [r3]
   d42f0:	4680      	mov	r8, r0
   d42f2:	4689      	mov	r9, r1
   d42f4:	4630      	mov	r0, r6
   d42f6:	4639      	mov	r1, r7
   d42f8:	f003 ff90 	bl	d821c <__aeabi_dmul>
   d42fc:	4642      	mov	r2, r8
   d42fe:	4606      	mov	r6, r0
   d4300:	460f      	mov	r7, r1
   d4302:	464b      	mov	r3, r9
   d4304:	4640      	mov	r0, r8
   d4306:	4649      	mov	r1, r9
   d4308:	f003 ff88 	bl	d821c <__aeabi_dmul>
   d430c:	a32a      	add	r3, pc, #168	; (adr r3, d43b8 <_Z21getDustSensorReadingsv+0x120>)
   d430e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4312:	f003 ff83 	bl	d821c <__aeabi_dmul>
   d4316:	4602      	mov	r2, r0
   d4318:	460b      	mov	r3, r1
   d431a:	4630      	mov	r0, r6
   d431c:	4639      	mov	r1, r7
   d431e:	f003 fdc5 	bl	d7eac <__aeabi_dsub>
   d4322:	eddf 7a2c 	vldr	s15, [pc, #176]	; d43d4 <_Z21getDustSensorReadingsv+0x13c>
   d4326:	ee68 7a27 	vmul.f32	s15, s16, s15
   d432a:	4606      	mov	r6, r0
   d432c:	ee17 0a90 	vmov	r0, s15
   d4330:	460f      	mov	r7, r1
   d4332:	f003 ff1b 	bl	d816c <__aeabi_f2d>
   d4336:	4602      	mov	r2, r0
   d4338:	460b      	mov	r3, r1
   d433a:	4630      	mov	r0, r6
   d433c:	4639      	mov	r1, r7
   d433e:	f003 fdb7 	bl	d7eb0 <__adddf3>
   d4342:	a31f      	add	r3, pc, #124	; (adr r3, d43c0 <_Z21getDustSensorReadingsv+0x128>)
   d4344:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4348:	f003 fdb2 	bl	d7eb0 <__adddf3>
   d434c:	f004 fa16 	bl	d877c <__aeabi_d2f>
   d4350:	f8ca 0000 	str.w	r0, [sl]

  Serial.printlnf("LPO: %d", lowpulseoccupancy);
   d4354:	f001 fcce 	bl	d5cf4 <_Z16_fetch_usbserialv>
   d4358:	6822      	ldr	r2, [r4, #0]
   d435a:	491f      	ldr	r1, [pc, #124]	; (d43d8 <_Z21getDustSensorReadingsv+0x140>)
   d435c:	f7ff fea9 	bl	d40b2 <_ZN5Print8printlnfEPKcz>
  Serial.printlnf("Ratio: %f%%", ratio);
   d4360:	f001 fcc8 	bl	d5cf4 <_Z16_fetch_usbserialv>
   d4364:	4604      	mov	r4, r0
   d4366:	6828      	ldr	r0, [r5, #0]
   d4368:	f003 ff00 	bl	d816c <__aeabi_f2d>
   d436c:	4602      	mov	r2, r0
   d436e:	460b      	mov	r3, r1
   d4370:	4620      	mov	r0, r4
   d4372:	491a      	ldr	r1, [pc, #104]	; (d43dc <_Z21getDustSensorReadingsv+0x144>)
   d4374:	f7ff fe9d 	bl	d40b2 <_ZN5Print8printlnfEPKcz>
  Serial.printlnf("Concentration: %f pcs/L", concentration);
   d4378:	f001 fcbc 	bl	d5cf4 <_Z16_fetch_usbserialv>
   d437c:	4604      	mov	r4, r0
   d437e:	f8da 0000 	ldr.w	r0, [sl]
   d4382:	f003 fef3 	bl	d816c <__aeabi_f2d>
   d4386:	4602      	mov	r2, r0
   d4388:	460b      	mov	r3, r1
   d438a:	4620      	mov	r0, r4
   d438c:	4914      	ldr	r1, [pc, #80]	; (d43e0 <_Z21getDustSensorReadingsv+0x148>)
   d438e:	f7ff fe90 	bl	d40b2 <_ZN5Print8printlnfEPKcz>
}
   d4392:	ecbd 8b02 	vpop	{d8}
   d4396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    last_lpo = lowpulseoccupancy;
   d439a:	601a      	str	r2, [r3, #0]
   d439c:	e787      	b.n	d42ae <_Z21getDustSensorReadingsv+0x16>
   d439e:	bf00      	nop
   d43a0:	00000000 	.word	0x00000000
   d43a4:	41612a88 	.word	0x41612a88
   d43a8:	00000000 	.word	0x00000000
   d43ac:	40080000 	.word	0x40080000
   d43b0:	9999999a 	.word	0x9999999a
   d43b4:	3ff19999 	.word	0x3ff19999
   d43b8:	66666666 	.word	0x66666666
   d43bc:	400e6666 	.word	0x400e6666
   d43c0:	3d70a3d7 	.word	0x3d70a3d7
   d43c4:	3fe3d70a 	.word	0x3fe3d70a
   d43c8:	2003e538 	.word	0x2003e538
   d43cc:	2003e534 	.word	0x2003e534
   d43d0:	2003e63c 	.word	0x2003e63c
   d43d4:	44020000 	.word	0x44020000
   d43d8:	000d8f45 	.word	0x000d8f45
   d43dc:	000d8f4d 	.word	0x000d8f4d
   d43e0:	000d8f59 	.word	0x000d8f59
   d43e4:	2003e50c 	.word	0x2003e50c

000d43e8 <_Z13updateDisplayiii6Stringi>:




void updateDisplay(int temp, int humidity, int pressure, String airQuality, int qual_int)
{
   d43e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d43ec:	461f      	mov	r7, r3
   d43ee:	4606      	mov	r6, r0
  SeeedOled.clearDisplay();
   d43f0:	4839      	ldr	r0, [pc, #228]	; (d44d8 <_Z13updateDisplayiii6Stringi+0xf0>)
{
   d43f2:	f8dd 8018 	ldr.w	r8, [sp, #24]
   d43f6:	4614      	mov	r4, r2
   d43f8:	460d      	mov	r5, r1
  SeeedOled.clearDisplay();
   d43fa:	f000 fa95 	bl	d4928 <_ZN9SeeedOLED12clearDisplayEv>

  SeeedOled.setTextXY(0, 3);
   d43fe:	2203      	movs	r2, #3
   d4400:	4835      	ldr	r0, [pc, #212]	; (d44d8 <_Z13updateDisplayiii6Stringi+0xf0>)
   d4402:	2100      	movs	r1, #0
   d4404:	f000 fa4b 	bl	d489e <_ZN9SeeedOLED9setTextXYEhh>
  SeeedOled.putString(airQuality);
   d4408:	6839      	ldr	r1, [r7, #0]
   d440a:	4833      	ldr	r0, [pc, #204]	; (d44d8 <_Z13updateDisplayiii6Stringi+0xf0>)
   d440c:	f000 faad 	bl	d496a <_ZN9SeeedOLED9putStringEPKc>

  SeeedOled.setTextXY(1, 0);
   d4410:	2200      	movs	r2, #0
   d4412:	4831      	ldr	r0, [pc, #196]	; (d44d8 <_Z13updateDisplayiii6Stringi+0xf0>)
   d4414:	2101      	movs	r1, #1
   d4416:	f000 fa42 	bl	d489e <_ZN9SeeedOLED9setTextXYEhh>
  SeeedOled.putString("VOC Levels: ");
   d441a:	4930      	ldr	r1, [pc, #192]	; (d44dc <_Z13updateDisplayiii6Stringi+0xf4>)
   d441c:	482e      	ldr	r0, [pc, #184]	; (d44d8 <_Z13updateDisplayiii6Stringi+0xf0>)
   d441e:	f000 faa4 	bl	d496a <_ZN9SeeedOLED9putStringEPKc>
  SeeedOled.putNumber(qual_int);
   d4422:	4641      	mov	r1, r8
   d4424:	482c      	ldr	r0, [pc, #176]	; (d44d8 <_Z13updateDisplayiii6Stringi+0xf0>)
   d4426:	f000 faad 	bl	d4984 <_ZN9SeeedOLED9putNumberEl>


  SeeedOled.setTextXY(2, 0);
   d442a:	2200      	movs	r2, #0
   d442c:	482a      	ldr	r0, [pc, #168]	; (d44d8 <_Z13updateDisplayiii6Stringi+0xf0>)
   d442e:	2102      	movs	r1, #2
   d4430:	f000 fa35 	bl	d489e <_ZN9SeeedOLED9setTextXYEhh>
  SeeedOled.putString("Temp: ");
   d4434:	492a      	ldr	r1, [pc, #168]	; (d44e0 <_Z13updateDisplayiii6Stringi+0xf8>)
   d4436:	4828      	ldr	r0, [pc, #160]	; (d44d8 <_Z13updateDisplayiii6Stringi+0xf0>)
   d4438:	f000 fa97 	bl	d496a <_ZN9SeeedOLED9putStringEPKc>
  SeeedOled.putNumber(temp);
   d443c:	4631      	mov	r1, r6
   d443e:	4826      	ldr	r0, [pc, #152]	; (d44d8 <_Z13updateDisplayiii6Stringi+0xf0>)
   d4440:	f000 faa0 	bl	d4984 <_ZN9SeeedOLED9putNumberEl>
  SeeedOled.putString("C");
   d4444:	4927      	ldr	r1, [pc, #156]	; (d44e4 <_Z13updateDisplayiii6Stringi+0xfc>)
   d4446:	4824      	ldr	r0, [pc, #144]	; (d44d8 <_Z13updateDisplayiii6Stringi+0xf0>)
   d4448:	f000 fa8f 	bl	d496a <_ZN9SeeedOLED9putStringEPKc>

  SeeedOled.setTextXY(3, 0);
   d444c:	2200      	movs	r2, #0
   d444e:	4822      	ldr	r0, [pc, #136]	; (d44d8 <_Z13updateDisplayiii6Stringi+0xf0>)
   d4450:	2103      	movs	r1, #3
   d4452:	f000 fa24 	bl	d489e <_ZN9SeeedOLED9setTextXYEhh>
  SeeedOled.putString("Humidity: ");
   d4456:	4924      	ldr	r1, [pc, #144]	; (d44e8 <_Z13updateDisplayiii6Stringi+0x100>)
   d4458:	481f      	ldr	r0, [pc, #124]	; (d44d8 <_Z13updateDisplayiii6Stringi+0xf0>)
   d445a:	f000 fa86 	bl	d496a <_ZN9SeeedOLED9putStringEPKc>
  SeeedOled.putNumber(humidity);
   d445e:	4629      	mov	r1, r5
   d4460:	481d      	ldr	r0, [pc, #116]	; (d44d8 <_Z13updateDisplayiii6Stringi+0xf0>)
   d4462:	f000 fa8f 	bl	d4984 <_ZN9SeeedOLED9putNumberEl>
  SeeedOled.putString("%");
   d4466:	4921      	ldr	r1, [pc, #132]	; (d44ec <_Z13updateDisplayiii6Stringi+0x104>)
   d4468:	481b      	ldr	r0, [pc, #108]	; (d44d8 <_Z13updateDisplayiii6Stringi+0xf0>)
   d446a:	f000 fa7e 	bl	d496a <_ZN9SeeedOLED9putStringEPKc>

  SeeedOled.setTextXY(4, 0);
   d446e:	2200      	movs	r2, #0
   d4470:	4819      	ldr	r0, [pc, #100]	; (d44d8 <_Z13updateDisplayiii6Stringi+0xf0>)
   d4472:	2104      	movs	r1, #4
   d4474:	f000 fa13 	bl	d489e <_ZN9SeeedOLED9setTextXYEhh>
  SeeedOled.putString("Press: ");
   d4478:	491d      	ldr	r1, [pc, #116]	; (d44f0 <_Z13updateDisplayiii6Stringi+0x108>)
   d447a:	4817      	ldr	r0, [pc, #92]	; (d44d8 <_Z13updateDisplayiii6Stringi+0xf0>)
   d447c:	f000 fa75 	bl	d496a <_ZN9SeeedOLED9putStringEPKc>
  SeeedOled.putNumber(pressure);
   d4480:	4621      	mov	r1, r4
   d4482:	4815      	ldr	r0, [pc, #84]	; (d44d8 <_Z13updateDisplayiii6Stringi+0xf0>)
  SeeedOled.putString(" hPa");

  if (concentration > 1)
   d4484:	4c1b      	ldr	r4, [pc, #108]	; (d44f4 <_Z13updateDisplayiii6Stringi+0x10c>)
  SeeedOled.putNumber(pressure);
   d4486:	f000 fa7d 	bl	d4984 <_ZN9SeeedOLED9putNumberEl>
  SeeedOled.putString(" hPa");
   d448a:	491b      	ldr	r1, [pc, #108]	; (d44f8 <_Z13updateDisplayiii6Stringi+0x110>)
   d448c:	4812      	ldr	r0, [pc, #72]	; (d44d8 <_Z13updateDisplayiii6Stringi+0xf0>)
   d448e:	f000 fa6c 	bl	d496a <_ZN9SeeedOLED9putStringEPKc>
  if (concentration > 1)
   d4492:	ed94 7a00 	vldr	s14, [r4]
   d4496:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   d449a:	eeb4 7ae7 	vcmpe.f32	s14, s15
   d449e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d44a2:	dd17      	ble.n	d44d4 <_Z13updateDisplayiii6Stringi+0xec>
  {
    SeeedOled.setTextXY(5, 0);
   d44a4:	2200      	movs	r2, #0
   d44a6:	480c      	ldr	r0, [pc, #48]	; (d44d8 <_Z13updateDisplayiii6Stringi+0xf0>)
   d44a8:	2105      	movs	r1, #5
   d44aa:	f000 f9f8 	bl	d489e <_ZN9SeeedOLED9setTextXYEhh>
    SeeedOled.putString("Dust: ");
   d44ae:	4913      	ldr	r1, [pc, #76]	; (d44fc <_Z13updateDisplayiii6Stringi+0x114>)
   d44b0:	4809      	ldr	r0, [pc, #36]	; (d44d8 <_Z13updateDisplayiii6Stringi+0xf0>)
   d44b2:	f000 fa5a 	bl	d496a <_ZN9SeeedOLED9putStringEPKc>
    SeeedOled.putNumber(concentration); // Will cast our float to an int to make it more compact
   d44b6:	edd4 7a00 	vldr	s15, [r4]
   d44ba:	4807      	ldr	r0, [pc, #28]	; (d44d8 <_Z13updateDisplayiii6Stringi+0xf0>)
   d44bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   d44c0:	ee17 1a90 	vmov	r1, s15
   d44c4:	f000 fa5e 	bl	d4984 <_ZN9SeeedOLED9putNumberEl>
    SeeedOled.putString(" pcs/L");
  }
   d44c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    SeeedOled.putString(" pcs/L");
   d44cc:	490c      	ldr	r1, [pc, #48]	; (d4500 <_Z13updateDisplayiii6Stringi+0x118>)
   d44ce:	4802      	ldr	r0, [pc, #8]	; (d44d8 <_Z13updateDisplayiii6Stringi+0xf0>)
   d44d0:	f000 ba4b 	b.w	d496a <_ZN9SeeedOLED9putStringEPKc>
   d44d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d44d8:	2003e640 	.word	0x2003e640
   d44dc:	000d8f71 	.word	0x000d8f71
   d44e0:	000d8f7e 	.word	0x000d8f7e
   d44e4:	000d8f85 	.word	0x000d8f85
   d44e8:	000d8f87 	.word	0x000d8f87
   d44ec:	000d8f57 	.word	0x000d8f57
   d44f0:	000d8f92 	.word	0x000d8f92
   d44f4:	2003e50c 	.word	0x2003e50c
   d44f8:	000d8f9a 	.word	0x000d8f9a
   d44fc:	000d8f9f 	.word	0x000d8f9f
   d4500:	000d8f6a 	.word	0x000d8f6a

000d4504 <loop>:
{
   d4504:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d4508:	ed2d 8b02 	vpush	{d8}
  duration = pulseIn(DUST_SENSOR_PIN, LOW);
   d450c:	2100      	movs	r1, #0
{
   d450e:	b09e      	sub	sp, #120	; 0x78
  duration = pulseIn(DUST_SENSOR_PIN, LOW);
   d4510:	2004      	movs	r0, #4
   d4512:	f002 fb1b 	bl	d6b4c <pulseIn>
  lowpulseoccupancy = lowpulseoccupancy + duration;
   d4516:	4d6f      	ldr	r5, [pc, #444]	; (d46d4 <loop+0x1d0>)
  duration = pulseIn(DUST_SENSOR_PIN, LOW);
   d4518:	4b6f      	ldr	r3, [pc, #444]	; (d46d8 <loop+0x1d4>)
  if ((millis() - lastInterval) > SENSOR_READING_INTERVAL)
   d451a:	4e70      	ldr	r6, [pc, #448]	; (d46dc <loop+0x1d8>)
  duration = pulseIn(DUST_SENSOR_PIN, LOW);
   d451c:	6018      	str	r0, [r3, #0]
  lowpulseoccupancy = lowpulseoccupancy + duration;
   d451e:	682b      	ldr	r3, [r5, #0]
   d4520:	4418      	add	r0, r3
   d4522:	6028      	str	r0, [r5, #0]
   d4524:	f001 f832 	bl	d558c <HAL_Timer_Get_Milli_Seconds>
  if ((millis() - lastInterval) > SENSOR_READING_INTERVAL)
   d4528:	6833      	ldr	r3, [r6, #0]
   d452a:	1ac0      	subs	r0, r0, r3
   d452c:	4b6c      	ldr	r3, [pc, #432]	; (d46e0 <loop+0x1dc>)
   d452e:	4298      	cmp	r0, r3
   d4530:	f240 80cb 	bls.w	d46ca <loop+0x1c6>
    String quality = getAirQuality();
   d4534:	a816      	add	r0, sp, #88	; 0x58
   d4536:	f7ff fe4f 	bl	d41d8 <_Z13getAirQualityv>
    int qual_int = getAirQualityNum();
   d453a:	f7ff fe47 	bl	d41cc <_Z16getAirQualityNumv>
   d453e:	4604      	mov	r4, r0
    Serial.printlnf("Air Quality: %s", quality.c_str());
   d4540:	f001 fbd8 	bl	d5cf4 <_Z16_fetch_usbserialv>
   d4544:	9a16      	ldr	r2, [sp, #88]	; 0x58
   d4546:	4967      	ldr	r1, [pc, #412]	; (d46e4 <loop+0x1e0>)
    field3 = humidity;
   d4548:	f8df a1d8 	ldr.w	sl, [pc, #472]	; d4724 <loop+0x220>
    Serial.printlnf("Air Quality: %s", quality.c_str());
   d454c:	f7ff fdb1 	bl	d40b2 <_ZN5Print8printlnfEPKcz>
    getBMEValues(temp, pressure, humidity);
   d4550:	aa15      	add	r2, sp, #84	; 0x54
   d4552:	a914      	add	r1, sp, #80	; 0x50
   d4554:	a813      	add	r0, sp, #76	; 0x4c
   d4556:	f7ff fe79 	bl	d424c <_Z12getBMEValuesRiS_S_>
    Serial.printlnf("Temp: %d", temp);
   d455a:	f001 fbcb 	bl	d5cf4 <_Z16_fetch_usbserialv>
   d455e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   d4560:	4961      	ldr	r1, [pc, #388]	; (d46e8 <loop+0x1e4>)
   d4562:	f7ff fda6 	bl	d40b2 <_ZN5Print8printlnfEPKcz>
    Serial.printlnf("Pressure: %d", pressure);
   d4566:	f001 fbc5 	bl	d5cf4 <_Z16_fetch_usbserialv>
   d456a:	9a14      	ldr	r2, [sp, #80]	; 0x50
   d456c:	495f      	ldr	r1, [pc, #380]	; (d46ec <loop+0x1e8>)
   d456e:	f7ff fda0 	bl	d40b2 <_ZN5Print8printlnfEPKcz>
    Serial.printlnf("Humidity: %d", humidity);
   d4572:	f001 fbbf 	bl	d5cf4 <_Z16_fetch_usbserialv>
   d4576:	9a15      	ldr	r2, [sp, #84]	; 0x54
   d4578:	495d      	ldr	r1, [pc, #372]	; (d46f0 <loop+0x1ec>)
   d457a:	f7ff fd9a 	bl	d40b2 <_ZN5Print8printlnfEPKcz>
    getDustSensorReadings();
   d457e:	f7ff fe8b 	bl	d4298 <_Z21getDustSensorReadingsv>
    updateDisplay(temp, humidity, pressure, quality, qual_int);
   d4582:	e9dd 2814 	ldrd	r2, r8, [sp, #80]	; 0x50
   d4586:	9f13      	ldr	r7, [sp, #76]	; 0x4c
   d4588:	9211      	str	r2, [sp, #68]	; 0x44
   d458a:	a916      	add	r1, sp, #88	; 0x58
   d458c:	a81a      	add	r0, sp, #104	; 0x68
   d458e:	f002 f8d5 	bl	d673c <_ZN6StringC1ERKS_>
   d4592:	9a11      	ldr	r2, [sp, #68]	; 0x44
   d4594:	9400      	str	r4, [sp, #0]
   d4596:	ab1a      	add	r3, sp, #104	; 0x68
   d4598:	4641      	mov	r1, r8
   d459a:	4638      	mov	r0, r7
   d459c:	f7ff ff24 	bl	d43e8 <_Z13updateDisplayiii6Stringi>
   d45a0:	a81a      	add	r0, sp, #104	; 0x68
   d45a2:	f002 f85d 	bl	d6660 <_ZN6StringD1Ev>
    field1 = temp;
   d45a6:	eddd 7a13 	vldr	s15, [sp, #76]	; 0x4c
   d45aa:	4c52      	ldr	r4, [pc, #328]	; (d46f4 <loop+0x1f0>)
    field2 = pressure;
   d45ac:	4f52      	ldr	r7, [pc, #328]	; (d46f8 <loop+0x1f4>)
    field4 = aqSensor.slope();
   d45ae:	4853      	ldr	r0, [pc, #332]	; (d46fc <loop+0x1f8>)
   d45b0:	f8df 8174 	ldr.w	r8, [pc, #372]	; d4728 <loop+0x224>
    field1 = temp;
   d45b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d45b8:	46c1      	mov	r9, r8
   d45ba:	edc4 7a00 	vstr	s15, [r4]
    field2 = pressure;
   d45be:	eddd 7a14 	vldr	s15, [sp, #80]	; 0x50
   d45c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d45c6:	edc7 7a00 	vstr	s15, [r7]
    field3 = humidity;
   d45ca:	eddd 7a15 	vldr	s15, [sp, #84]	; 0x54
   d45ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d45d2:	edca 7a00 	vstr	s15, [sl]
    field4 = aqSensor.slope();
   d45d6:	f000 f8fb 	bl	d47d0 <_ZN16AirQualitySensor5slopeEv>
   d45da:	ee07 0a90 	vmov	s15, r0
   d45de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    field5 = aqSensor.getValue();
   d45e2:	4846      	ldr	r0, [pc, #280]	; (d46fc <loop+0x1f8>)
    field4 = aqSensor.slope();
   d45e4:	edc8 7a00 	vstr	s15, [r8]
    field5 = aqSensor.getValue();
   d45e8:	f000 f8d8 	bl	d479c <_ZN16AirQualitySensor8getValueEv>
   d45ec:	ee07 0a90 	vmov	s15, r0
   d45f0:	4b43      	ldr	r3, [pc, #268]	; (d4700 <loop+0x1fc>)
   d45f2:	f8df 8138 	ldr.w	r8, [pc, #312]	; d472c <loop+0x228>
   d45f6:	4a43      	ldr	r2, [pc, #268]	; (d4704 <loop+0x200>)
   d45f8:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
   d45fc:	ed83 8a00 	vstr	s16, [r3]
      if (lowpulseoccupancy > 0)
   d4600:	682b      	ldr	r3, [r5, #0]
   d4602:	b143      	cbz	r3, d4616 <loop+0x112>
    field6 = lowpulseoccupancy;
   d4604:	ee07 3a90 	vmov	s15, r3
    field7 = ratio;
   d4608:	4b3f      	ldr	r3, [pc, #252]	; (d4708 <loop+0x204>)
    field6 = lowpulseoccupancy;
   d460a:	eef8 7a67 	vcvt.f32.u32	s15, s15
    field7 = ratio;
   d460e:	681b      	ldr	r3, [r3, #0]
    field6 = lowpulseoccupancy;
   d4610:	edc8 7a00 	vstr	s15, [r8]
    field7 = ratio;
   d4614:	6013      	str	r3, [r2, #0]
    lowpulseoccupancy = 0;
   d4616:	2300      	movs	r3, #0
   d4618:	602b      	str	r3, [r5, #0]
    snprintf(msg, sizeof(msg),"{\"temp\":\"%.2f\", \"pressure\":\"%.1f\", \"humidity\":\"%.2f\", \"aq_slope\":\"%.2f\", \"voc_level\":\"%.3f\", \"lowpulseoccupancy\":\"%.2f\", \"dust\":\"%.1f\", \"deviceid\":\"%s\"}", field1, field2, field3, field4, field5, field6, field7, MySiteID);
   d461a:	4b3c      	ldr	r3, [pc, #240]	; (d470c <loop+0x208>)
   d461c:	681b      	ldr	r3, [r3, #0]
   d461e:	930e      	str	r3, [sp, #56]	; 0x38
   d4620:	6810      	ldr	r0, [r2, #0]
   d4622:	f003 fda3 	bl	d816c <__aeabi_f2d>
   d4626:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   d462a:	f8d8 0000 	ldr.w	r0, [r8]
   d462e:	f003 fd9d 	bl	d816c <__aeabi_f2d>
   d4632:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   d4636:	ee18 0a10 	vmov	r0, s16
   d463a:	f003 fd97 	bl	d816c <__aeabi_f2d>
   d463e:	e9cd 0108 	strd	r0, r1, [sp, #32]
   d4642:	f8d9 0000 	ldr.w	r0, [r9]
   d4646:	f003 fd91 	bl	d816c <__aeabi_f2d>
   d464a:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d464e:	f8da 0000 	ldr.w	r0, [sl]
   d4652:	f003 fd8b 	bl	d816c <__aeabi_f2d>
   d4656:	e9cd 0104 	strd	r0, r1, [sp, #16]
   d465a:	6838      	ldr	r0, [r7, #0]
   d465c:	f003 fd86 	bl	d816c <__aeabi_f2d>
   d4660:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d4664:	6820      	ldr	r0, [r4, #0]
   d4666:	f003 fd81 	bl	d816c <__aeabi_f2d>
   d466a:	4a29      	ldr	r2, [pc, #164]	; (d4710 <loop+0x20c>)
   d466c:	e9cd 0100 	strd	r0, r1, [sp]
   d4670:	f44f 7180 	mov.w	r1, #256	; 0x100
   d4674:	4827      	ldr	r0, [pc, #156]	; (d4714 <loop+0x210>)
   d4676:	f001 f895 	bl	d57a4 <snprintf>
        val_(val) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT> particle::Flags<TagT, ValueT>::operator|(Flags<TagT, ValueT> flags) const {
    return Flags<TagT, ValueT>(val_ | flags.val_);
   d467a:	4b27      	ldr	r3, [pc, #156]	; (d4718 <loop+0x214>)
   d467c:	4a27      	ldr	r2, [pc, #156]	; (d471c <loop+0x218>)
   d467e:	781b      	ldrb	r3, [r3, #0]
   d4680:	7812      	ldrb	r2, [r2, #0]
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4682:	4927      	ldr	r1, [pc, #156]	; (d4720 <loop+0x21c>)
   d4684:	4313      	orrs	r3, r2
   d4686:	f88d 3000 	strb.w	r3, [sp]
   d468a:	4a22      	ldr	r2, [pc, #136]	; (d4714 <loop+0x210>)
   d468c:	6809      	ldr	r1, [r1, #0]
   d468e:	233c      	movs	r3, #60	; 0x3c
   d4690:	a81a      	add	r0, sp, #104	; 0x68
   d4692:	f001 fd03 	bl	d609c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d4696:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
   d4698:	b17c      	cbz	r4, d46ba <loop+0x1b6>
      if (--_M_use_count == 0)
   d469a:	6863      	ldr	r3, [r4, #4]
   d469c:	3b01      	subs	r3, #1
   d469e:	6063      	str	r3, [r4, #4]
   d46a0:	b95b      	cbnz	r3, d46ba <loop+0x1b6>
          _M_dispose();
   d46a2:	6823      	ldr	r3, [r4, #0]
   d46a4:	4620      	mov	r0, r4
   d46a6:	689b      	ldr	r3, [r3, #8]
   d46a8:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d46aa:	68a3      	ldr	r3, [r4, #8]
   d46ac:	3b01      	subs	r3, #1
   d46ae:	60a3      	str	r3, [r4, #8]
   d46b0:	b91b      	cbnz	r3, d46ba <loop+0x1b6>
            _M_destroy();
   d46b2:	6823      	ldr	r3, [r4, #0]
   d46b4:	4620      	mov	r0, r4
   d46b6:	68db      	ldr	r3, [r3, #12]
   d46b8:	4798      	blx	r3
    lowpulseoccupancy = 0;
   d46ba:	2300      	movs	r3, #0
   d46bc:	602b      	str	r3, [r5, #0]
   d46be:	f000 ff65 	bl	d558c <HAL_Timer_Get_Milli_Seconds>
    lastInterval = millis();
   d46c2:	6030      	str	r0, [r6, #0]
    String quality = getAirQuality();
   d46c4:	a816      	add	r0, sp, #88	; 0x58
   d46c6:	f001 ffcb 	bl	d6660 <_ZN6StringD1Ev>
}
   d46ca:	b01e      	add	sp, #120	; 0x78
   d46cc:	ecbd 8b02 	vpop	{d8}
   d46d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d46d4:	2003e538 	.word	0x2003e538
   d46d8:	2003e510 	.word	0x2003e510
   d46dc:	2003e530 	.word	0x2003e530
   d46e0:	000dbba0 	.word	0x000dbba0
   d46e4:	000d8fa6 	.word	0x000d8fa6
   d46e8:	000d8fb6 	.word	0x000d8fb6
   d46ec:	000d8fbf 	.word	0x000d8fbf
   d46f0:	000d8fcc 	.word	0x000d8fcc
   d46f4:	2003e514 	.word	0x2003e514
   d46f8:	2003e518 	.word	0x2003e518
   d46fc:	2003e4ac 	.word	0x2003e4ac
   d4700:	2003e524 	.word	0x2003e524
   d4704:	2003e52c 	.word	0x2003e52c
   d4708:	2003e63c 	.word	0x2003e63c
   d470c:	2003e430 	.word	0x2003e430
   d4710:	000d8fd9 	.word	0x000d8fd9
   d4714:	2003e53c 	.word	0x2003e53c
   d4718:	2003e4a8 	.word	0x2003e4a8
   d471c:	2003e4a9 	.word	0x2003e4a9
   d4720:	2003e434 	.word	0x2003e434
   d4724:	2003e51c 	.word	0x2003e51c
   d4728:	2003e520 	.word	0x2003e520
   d472c:	2003e528 	.word	0x2003e528

000d4730 <_GLOBAL__sub_I_aqSensor>:
   d4730:	b508      	push	{r3, lr}
        val_(val) {
   d4732:	4b09      	ldr	r3, [pc, #36]	; (d4758 <_GLOBAL__sub_I_aqSensor+0x28>)
   d4734:	2001      	movs	r0, #1
   d4736:	7018      	strb	r0, [r3, #0]
   d4738:	4b08      	ldr	r3, [pc, #32]	; (d475c <_GLOBAL__sub_I_aqSensor+0x2c>)
   d473a:	2202      	movs	r2, #2
   d473c:	701a      	strb	r2, [r3, #0]
SYSTEM_THREAD(ENABLED);
   d473e:	2100      	movs	r1, #0
   d4740:	f000 ffec 	bl	d571c <system_thread_set_state>
AirQualitySensor aqSensor(AQS_PIN);
   d4744:	4806      	ldr	r0, [pc, #24]	; (d4760 <_GLOBAL__sub_I_aqSensor+0x30>)
   d4746:	2111      	movs	r1, #17
   d4748:	f000 f80e 	bl	d4768 <_ZN16AirQualitySensorC1Ei>
   d474c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
Adafruit_BME280 bme;
   d4750:	4804      	ldr	r0, [pc, #16]	; (d4764 <_GLOBAL__sub_I_aqSensor+0x34>)
   d4752:	f000 b991 	b.w	d4a78 <_ZN15Adafruit_BME280C1Ev>
   d4756:	bf00      	nop
   d4758:	2003e4a9 	.word	0x2003e4a9
   d475c:	2003e4a8 	.word	0x2003e4a8
   d4760:	2003e4ac 	.word	0x2003e4ac
   d4764:	2003e4c8 	.word	0x2003e4c8

000d4768 <_ZN16AirQualitySensorC1Ei>:
const int AirQualitySensor::HIGH_POLLUTION = 1;
const int AirQualitySensor::LOW_POLLUTION  = 2;
const int AirQualitySensor::FRESH_AIR      = 3;

AirQualitySensor::AirQualitySensor(int pin) 
: _pin(pin), _voltageSum(0), _volSumCount(0) {
   d4768:	2200      	movs	r2, #0
   d476a:	e9c0 2204 	strd	r2, r2, [r0, #16]
   d476e:	6001      	str	r1, [r0, #0]
    // do nothing
}
   d4770:	4770      	bx	lr

000d4772 <_ZN16AirQualitySensor4initEv>:

bool AirQualitySensor::init(void) {
   d4772:	b510      	push	{r4, lr}
   d4774:	4604      	mov	r4, r0
    int initVoltage = analogRead(_pin);
   d4776:	8800      	ldrh	r0, [r0, #0]
   d4778:	f002 f9d1 	bl	d6b1e <analogRead>

    if (10 < initVoltage && initVoltage < 798) {
   d477c:	f240 3312 	movw	r3, #786	; 0x312
   d4780:	f1a0 020b 	sub.w	r2, r0, #11
   d4784:	429a      	cmp	r2, r3
   d4786:	d807      	bhi.n	d4798 <_ZN16AirQualitySensor4initEv+0x26>
        _currentVoltage = initVoltage;
        _lastVoltage = _currentVoltage;
   d4788:	e9c4 0001 	strd	r0, r0, [r4, #4]

        _standardVoltage = initVoltage;
   d478c:	60e0      	str	r0, [r4, #12]
   d478e:	f000 fefd 	bl	d558c <HAL_Timer_Get_Milli_Seconds>
        _lastStdVolUpdated = millis();
   d4792:	61a0      	str	r0, [r4, #24]

        return true;
   d4794:	2001      	movs	r0, #1
    }
    else {
        return false;
    }
}
   d4796:	bd10      	pop	{r4, pc}
        return false;
   d4798:	2000      	movs	r0, #0
   d479a:	e7fc      	b.n	d4796 <_ZN16AirQualitySensor4initEv+0x24>

000d479c <_ZN16AirQualitySensor8getValueEv>:
    return -1;
}

int AirQualitySensor::getValue(void) {
    return _currentVoltage;
}
   d479c:	6880      	ldr	r0, [r0, #8]
   d479e:	4770      	bx	lr

000d47a0 <_ZN16AirQualitySensor21updateStandardVoltageEv>:

void AirQualitySensor::updateStandardVoltage(void) {
   d47a0:	b510      	push	{r4, lr}
   d47a2:	4604      	mov	r4, r0
   d47a4:	f000 fef2 	bl	d558c <HAL_Timer_Get_Milli_Seconds>
    if (millis() - _lastStdVolUpdated > 500000) {
   d47a8:	69a3      	ldr	r3, [r4, #24]
   d47aa:	1ac0      	subs	r0, r0, r3
   d47ac:	4b07      	ldr	r3, [pc, #28]	; (d47cc <_ZN16AirQualitySensor21updateStandardVoltageEv+0x2c>)
   d47ae:	4298      	cmp	r0, r3
   d47b0:	d90a      	bls.n	d47c8 <_ZN16AirQualitySensor21updateStandardVoltageEv+0x28>
        _standardVoltage = _voltageSum / _volSumCount;
   d47b2:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   d47b6:	fb93 f3f2 	sdiv	r3, r3, r2
   d47ba:	60e3      	str	r3, [r4, #12]
   d47bc:	f000 fee6 	bl	d558c <HAL_Timer_Get_Milli_Seconds>
        _lastStdVolUpdated = millis();

        _voltageSum = 0;
   d47c0:	2300      	movs	r3, #0
        _volSumCount = 0;
   d47c2:	e9c4 3304 	strd	r3, r3, [r4, #16]
        _lastStdVolUpdated = millis();
   d47c6:	61a0      	str	r0, [r4, #24]
    }
}
   d47c8:	bd10      	pop	{r4, pc}
   d47ca:	bf00      	nop
   d47cc:	0007a120 	.word	0x0007a120

000d47d0 <_ZN16AirQualitySensor5slopeEv>:
int AirQualitySensor::slope(void) {
   d47d0:	b510      	push	{r4, lr}
    _lastVoltage = _currentVoltage;
   d47d2:	6883      	ldr	r3, [r0, #8]
   d47d4:	6043      	str	r3, [r0, #4]
int AirQualitySensor::slope(void) {
   d47d6:	4604      	mov	r4, r0
    _currentVoltage = analogRead(_pin);
   d47d8:	8800      	ldrh	r0, [r0, #0]
   d47da:	f002 f9a0 	bl	d6b1e <analogRead>
    _voltageSum += _currentVoltage;
   d47de:	6923      	ldr	r3, [r4, #16]
    _currentVoltage = analogRead(_pin);
   d47e0:	60a0      	str	r0, [r4, #8]
    _voltageSum += _currentVoltage;
   d47e2:	4418      	add	r0, r3
    _volSumCount += 1;
   d47e4:	6963      	ldr	r3, [r4, #20]
    _voltageSum += _currentVoltage;
   d47e6:	6120      	str	r0, [r4, #16]
    _volSumCount += 1;
   d47e8:	3301      	adds	r3, #1
   d47ea:	6163      	str	r3, [r4, #20]
    updateStandardVoltage();
   d47ec:	4620      	mov	r0, r4
   d47ee:	f7ff ffd7 	bl	d47a0 <_ZN16AirQualitySensor21updateStandardVoltageEv>
    if (_currentVoltage - _lastVoltage > 400 || _currentVoltage > 700) {
   d47f2:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   d47f6:	1a51      	subs	r1, r2, r1
   d47f8:	f5b1 7fc8 	cmp.w	r1, #400	; 0x190
   d47fc:	dc10      	bgt.n	d4820 <_ZN16AirQualitySensor5slopeEv+0x50>
   d47fe:	f5b2 7f2f 	cmp.w	r2, #700	; 0x2bc
   d4802:	dc0d      	bgt.n	d4820 <_ZN16AirQualitySensor5slopeEv+0x50>
             || _currentVoltage - _standardVoltage > 150) {
   d4804:	68e3      	ldr	r3, [r4, #12]
   d4806:	1ad3      	subs	r3, r2, r3
   d4808:	2b96      	cmp	r3, #150	; 0x96
   d480a:	dc0b      	bgt.n	d4824 <_ZN16AirQualitySensor5slopeEv+0x54>
    else if ((_currentVoltage - _lastVoltage > 200 && _currentVoltage < 700)
   d480c:	29c8      	cmp	r1, #200	; 0xc8
   d480e:	dd02      	ble.n	d4816 <_ZN16AirQualitySensor5slopeEv+0x46>
   d4810:	f5b2 7f2f 	cmp.w	r2, #700	; 0x2bc
   d4814:	d108      	bne.n	d4828 <_ZN16AirQualitySensor5slopeEv+0x58>
        return AirQualitySensor::FRESH_AIR;
   d4816:	2b32      	cmp	r3, #50	; 0x32
   d4818:	bfcc      	ite	gt
   d481a:	2002      	movgt	r0, #2
   d481c:	2003      	movle	r0, #3
}
   d481e:	bd10      	pop	{r4, pc}
        return AirQualitySensor::FORCE_SIGNAL;
   d4820:	2000      	movs	r0, #0
   d4822:	e7fc      	b.n	d481e <_ZN16AirQualitySensor5slopeEv+0x4e>
        return AirQualitySensor::HIGH_POLLUTION;
   d4824:	2001      	movs	r0, #1
   d4826:	e7fa      	b.n	d481e <_ZN16AirQualitySensor5slopeEv+0x4e>
        return AirQualitySensor::LOW_POLLUTION;
   d4828:	2002      	movs	r0, #2
   d482a:	e7f8      	b.n	d481e <_ZN16AirQualitySensor5slopeEv+0x4e>

000d482c <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d482c:	6803      	ldr	r3, [r0, #0]
   d482e:	b2c9      	uxtb	r1, r1
   d4830:	689b      	ldr	r3, [r3, #8]
   d4832:	4718      	bx	r3

000d4834 <_ZN9SeeedOLED11sendCommandEh.constprop.0>:
  sendCommand(SeeedOLED_Display_On_Cmd); //display on
  delay(5);
  sendCommand(SeeedOLED_Normal_Display_Cmd); //Set Normal Display (default)
}

void SeeedOLED::sendCommand(unsigned char command)
   d4834:	b510      	push	{r4, lr}
   d4836:	4604      	mov	r4, r0
{
  Wire.beginTransmission(SeeedOLED_Address); // begin I2C communication
   d4838:	f002 f8ce 	bl	d69d8 <_Z19__fetch_global_Wirev>
   d483c:	213c      	movs	r1, #60	; 0x3c
   d483e:	f001 f943 	bl	d5ac8 <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(SeeedOLED_Command_Mode);        // Set OLED Command mode
   d4842:	f002 f8c9 	bl	d69d8 <_Z19__fetch_global_Wirev>
   d4846:	2180      	movs	r1, #128	; 0x80
   d4848:	f7ff fff0 	bl	d482c <_ZN7TwoWire5writeEi>
  Wire.write(command);
   d484c:	f002 f8c4 	bl	d69d8 <_Z19__fetch_global_Wirev>
   d4850:	6803      	ldr	r3, [r0, #0]
   d4852:	4621      	mov	r1, r4
   d4854:	689b      	ldr	r3, [r3, #8]
   d4856:	4798      	blx	r3
  Wire.endTransmission(); // End I2C communication
   d4858:	f002 f8be 	bl	d69d8 <_Z19__fetch_global_Wirev>
}
   d485c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  Wire.endTransmission(); // End I2C communication
   d4860:	f001 b939 	b.w	d5ad6 <_ZN7TwoWire15endTransmissionEv>

000d4864 <_ZN9SeeedOLED4initEv>:
{
   d4864:	b508      	push	{r3, lr}
  sendCommand(SeeedOLED_Display_Off_Cmd); //display off
   d4866:	20ae      	movs	r0, #174	; 0xae
   d4868:	f7ff ffe4 	bl	d4834 <_ZN9SeeedOLED11sendCommandEh.constprop.0>
  delay(5);
   d486c:	2005      	movs	r0, #5
   d486e:	f001 fe31 	bl	d64d4 <delay>
  sendCommand(SeeedOLED_Display_On_Cmd); //display on
   d4872:	20af      	movs	r0, #175	; 0xaf
   d4874:	f7ff ffde 	bl	d4834 <_ZN9SeeedOLED11sendCommandEh.constprop.0>
  delay(5);
   d4878:	2005      	movs	r0, #5
   d487a:	f001 fe2b 	bl	d64d4 <delay>
}
   d487e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sendCommand(SeeedOLED_Normal_Display_Cmd); //Set Normal Display (default)
   d4882:	20a6      	movs	r0, #166	; 0xa6
   d4884:	f7ff bfd6 	b.w	d4834 <_ZN9SeeedOLED11sendCommandEh.constprop.0>

000d4888 <_ZN9SeeedOLED11setPageModeEv>:
  sendCommand(0x20); //set addressing mode
  sendCommand(0x00); //set horizontal addressing mode
}

void SeeedOLED::setPageMode()
{
   d4888:	b508      	push	{r3, lr}
  addressingMode = PAGE_MODE;
   d488a:	2301      	movs	r3, #1
   d488c:	7003      	strb	r3, [r0, #0]
  sendCommand(0x20); //set addressing mode
   d488e:	2020      	movs	r0, #32
   d4890:	f7ff ffd0 	bl	d4834 <_ZN9SeeedOLED11sendCommandEh.constprop.0>
  sendCommand(0x02); //set page addressing mode
}
   d4894:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sendCommand(0x02); //set page addressing mode
   d4898:	2002      	movs	r0, #2
   d489a:	f7ff bfcb 	b.w	d4834 <_ZN9SeeedOLED11sendCommandEh.constprop.0>

000d489e <_ZN9SeeedOLED9setTextXYEhh>:

void SeeedOLED::setTextXY(unsigned char Row, unsigned char Column)
{
   d489e:	b510      	push	{r4, lr}
  sendCommand(0xB0 + Row);                        //set page address
   d48a0:	3950      	subs	r1, #80	; 0x50
{
   d48a2:	4614      	mov	r4, r2
  sendCommand(0xB0 + Row);                        //set page address
   d48a4:	b2c8      	uxtb	r0, r1
   d48a6:	f7ff ffc5 	bl	d4834 <_ZN9SeeedOLED11sendCommandEh.constprop.0>
  sendCommand(0x00 + (8 * Column & 0x0F));        //set column lower address
   d48aa:	00e0      	lsls	r0, r4, #3
   d48ac:	f000 0008 	and.w	r0, r0, #8
   d48b0:	f7ff ffc0 	bl	d4834 <_ZN9SeeedOLED11sendCommandEh.constprop.0>
  sendCommand(0x10 + ((8 * Column >> 4) & 0x0F)); //set column higher address
   d48b4:	f3c4 0043 	ubfx	r0, r4, #1, #4
   d48b8:	3010      	adds	r0, #16
}
   d48ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  sendCommand(0x10 + ((8 * Column >> 4) & 0x0F)); //set column higher address
   d48be:	f7ff bfb9 	b.w	d4834 <_ZN9SeeedOLED11sendCommandEh.constprop.0>

000d48c2 <_ZN9SeeedOLED8sendDataEh>:
  sendCommand(SeeedOLED_Display_On_Cmd); //display on
  setTextXY(0, 0);
}

void SeeedOLED::sendData(unsigned char Data)
{
   d48c2:	b510      	push	{r4, lr}
   d48c4:	460c      	mov	r4, r1
  Wire.beginTransmission(SeeedOLED_Address); // begin I2C transmission
   d48c6:	f002 f887 	bl	d69d8 <_Z19__fetch_global_Wirev>
   d48ca:	213c      	movs	r1, #60	; 0x3c
   d48cc:	f001 f8fc 	bl	d5ac8 <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(SeeedOLED_Data_Mode);           // data mode
   d48d0:	f002 f882 	bl	d69d8 <_Z19__fetch_global_Wirev>
   d48d4:	2140      	movs	r1, #64	; 0x40
   d48d6:	f7ff ffa9 	bl	d482c <_ZN7TwoWire5writeEi>
  Wire.write(Data);
   d48da:	f002 f87d 	bl	d69d8 <_Z19__fetch_global_Wirev>
   d48de:	6803      	ldr	r3, [r0, #0]
   d48e0:	4621      	mov	r1, r4
   d48e2:	689b      	ldr	r3, [r3, #8]
   d48e4:	4798      	blx	r3
  Wire.endTransmission(); // stop I2C transmission
   d48e6:	f002 f877 	bl	d69d8 <_Z19__fetch_global_Wirev>
}
   d48ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  Wire.endTransmission(); // stop I2C transmission
   d48ee:	f001 b8f2 	b.w	d5ad6 <_ZN7TwoWire15endTransmissionEv>
	...

000d48f4 <_ZN9SeeedOLED7putCharEh>:

void SeeedOLED::putChar(unsigned char C)
{
  if (C < 32 || C > 127) //Ignore non-printable ASCII characters. This can be modified for multilingual font.
   d48f4:	f1a1 0320 	sub.w	r3, r1, #32
  {
    C = ' '; //Space
   d48f8:	2b5f      	cmp	r3, #95	; 0x5f
   d48fa:	bf88      	it	hi
   d48fc:	2120      	movhi	r1, #32
{
   d48fe:	b570      	push	{r4, r5, r6, lr}
   d4900:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
   d4904:	4d07      	ldr	r5, [pc, #28]	; (d4924 <_ZN9SeeedOLED7putCharEh+0x30>)
   d4906:	3920      	subs	r1, #32
   d4908:	4606      	mov	r6, r0
  }
  unsigned char i = 0;
  for (i = 0; i < 8; i++)
   d490a:	eb05 05c1 	add.w	r5, r5, r1, lsl #3
    C = ' '; //Space
   d490e:	2408      	movs	r4, #8
  {
    //read bytes from code memory
    sendData(pgm_read_byte(&BasicFont[C - 32][i])); //font array starts at 0, ASCII starts at 32. Hence the translation
   d4910:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4914:	4630      	mov	r0, r6
   d4916:	3c01      	subs	r4, #1
   d4918:	f7ff ffd3 	bl	d48c2 <_ZN9SeeedOLED8sendDataEh>
  for (i = 0; i < 8; i++)
   d491c:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   d4920:	d1f6      	bne.n	d4910 <_ZN9SeeedOLED7putCharEh+0x1c>
  }
}
   d4922:	bd70      	pop	{r4, r5, r6, pc}
   d4924:	000d90a8 	.word	0x000d90a8

000d4928 <_ZN9SeeedOLED12clearDisplayEv>:
{
   d4928:	b570      	push	{r4, r5, r6, lr}
   d492a:	4605      	mov	r5, r0
  sendCommand(SeeedOLED_Display_Off_Cmd); //display off
   d492c:	20ae      	movs	r0, #174	; 0xae
   d492e:	f7ff ff81 	bl	d4834 <_ZN9SeeedOLED11sendCommandEh.constprop.0>
   d4932:	2600      	movs	r6, #0
    setTextXY(j, 0);
   d4934:	2200      	movs	r2, #0
   d4936:	b2f1      	uxtb	r1, r6
   d4938:	4628      	mov	r0, r5
   d493a:	f7ff ffb0 	bl	d489e <_ZN9SeeedOLED9setTextXYEhh>
   d493e:	2410      	movs	r4, #16
        putChar(' ');
   d4940:	2120      	movs	r1, #32
   d4942:	4628      	mov	r0, r5
   d4944:	3c01      	subs	r4, #1
   d4946:	f7ff ffd5 	bl	d48f4 <_ZN9SeeedOLED7putCharEh>
      for (i = 0; i < 16; i++) //clear all columns
   d494a:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   d494e:	d1f7      	bne.n	d4940 <_ZN9SeeedOLED12clearDisplayEv+0x18>
  for (j = 0; j < 8; j++)
   d4950:	3601      	adds	r6, #1
   d4952:	2e08      	cmp	r6, #8
   d4954:	d1ee      	bne.n	d4934 <_ZN9SeeedOLED12clearDisplayEv+0xc>
  sendCommand(SeeedOLED_Display_On_Cmd); //display on
   d4956:	20af      	movs	r0, #175	; 0xaf
   d4958:	f7ff ff6c 	bl	d4834 <_ZN9SeeedOLED11sendCommandEh.constprop.0>
  setTextXY(0, 0);
   d495c:	4622      	mov	r2, r4
   d495e:	4621      	mov	r1, r4
   d4960:	4628      	mov	r0, r5
}
   d4962:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  setTextXY(0, 0);
   d4966:	f7ff bf9a 	b.w	d489e <_ZN9SeeedOLED9setTextXYEhh>

000d496a <_ZN9SeeedOLED9putStringEPKc>:

void SeeedOLED::putString(const char *String)
{
   d496a:	b570      	push	{r4, r5, r6, lr}
   d496c:	4606      	mov	r6, r0
   d496e:	460d      	mov	r5, r1
   d4970:	2400      	movs	r4, #0
  unsigned char i = 0;
  while (String[i])
   d4972:	b2e3      	uxtb	r3, r4
   d4974:	3401      	adds	r4, #1
   d4976:	5ce9      	ldrb	r1, [r5, r3]
   d4978:	b119      	cbz	r1, d4982 <_ZN9SeeedOLED9putStringEPKc+0x18>
  {
    putChar(String[i]);
   d497a:	4630      	mov	r0, r6
   d497c:	f7ff ffba 	bl	d48f4 <_ZN9SeeedOLED7putCharEh>
  while (String[i])
   d4980:	e7f7      	b.n	d4972 <_ZN9SeeedOLED9putStringEPKc+0x8>
    i++;
  }
}
   d4982:	bd70      	pop	{r4, r5, r6, pc}

000d4984 <_ZN9SeeedOLED9putNumberEl>:

unsigned char SeeedOLED::putNumber(long long_num)
{
   d4984:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4986:	b085      	sub	sp, #20
  unsigned char char_buffer[10] = "";
   d4988:	2300      	movs	r3, #0
  unsigned char i = 0;
  unsigned char f = 0;

  if (long_num < 0)
   d498a:	1e0c      	subs	r4, r1, #0
  unsigned char char_buffer[10] = "";
   d498c:	e9cd 3301 	strd	r3, r3, [sp, #4]
{
   d4990:	4606      	mov	r6, r0
  unsigned char char_buffer[10] = "";
   d4992:	f8ad 300c 	strh.w	r3, [sp, #12]
  if (long_num < 0)
   d4996:	da24      	bge.n	d49e2 <_ZN9SeeedOLED9putNumberEl+0x5e>
  {
    f = 1;
    putChar('-');
   d4998:	212d      	movs	r1, #45	; 0x2d
   d499a:	f7ff ffab 	bl	d48f4 <_ZN9SeeedOLED7putCharEh>
    long_num = -long_num;
   d499e:	4264      	negs	r4, r4
    f = 1;
   d49a0:	2301      	movs	r3, #1
  unsigned char f = 0;
   d49a2:	2500      	movs	r5, #0
    return f;
  }

  while (long_num > 0)
  {
    char_buffer[i++] = long_num % 10;
   d49a4:	200a      	movs	r0, #10
   d49a6:	462a      	mov	r2, r5
   d49a8:	a904      	add	r1, sp, #16
   d49aa:	440a      	add	r2, r1
   d49ac:	3501      	adds	r5, #1
   d49ae:	fbb4 f1f0 	udiv	r1, r4, r0
   d49b2:	fb00 4411 	mls	r4, r0, r1, r4
   d49b6:	f802 4c0c 	strb.w	r4, [r2, #-12]
   d49ba:	b2ed      	uxtb	r5, r5
  while (long_num > 0)
   d49bc:	460c      	mov	r4, r1
   d49be:	2900      	cmp	r1, #0
   d49c0:	d1f1      	bne.n	d49a6 <_ZN9SeeedOLED9putNumberEl+0x22>
    long_num /= 10;
  }

  f = f + i;
   d49c2:	442b      	add	r3, r5
   d49c4:	b2dc      	uxtb	r4, r3
   d49c6:	ab04      	add	r3, sp, #16
   d49c8:	195f      	adds	r7, r3, r5
   d49ca:	3f0d      	subs	r7, #13
  for (; i > 0; i--)
   d49cc:	b175      	cbz	r5, d49ec <_ZN9SeeedOLED9putNumberEl+0x68>
  {
    putChar('0' + char_buffer[i - 1]);
   d49ce:	f817 1901 	ldrb.w	r1, [r7], #-1
   d49d2:	3130      	adds	r1, #48	; 0x30
   d49d4:	b2c9      	uxtb	r1, r1
   d49d6:	4630      	mov	r0, r6
  for (; i > 0; i--)
   d49d8:	3d01      	subs	r5, #1
    putChar('0' + char_buffer[i - 1]);
   d49da:	f7ff ff8b 	bl	d48f4 <_ZN9SeeedOLED7putCharEh>
  for (; i > 0; i--)
   d49de:	b2ed      	uxtb	r5, r5
   d49e0:	e7f4      	b.n	d49cc <_ZN9SeeedOLED9putNumberEl+0x48>
  else if (long_num == 0)
   d49e2:	d1de      	bne.n	d49a2 <_ZN9SeeedOLED9putNumberEl+0x1e>
    putChar('0');
   d49e4:	2130      	movs	r1, #48	; 0x30
   d49e6:	f7ff ff85 	bl	d48f4 <_ZN9SeeedOLED7putCharEh>
    return f;
   d49ea:	2401      	movs	r4, #1
  }
  return f;
}
   d49ec:	4620      	mov	r0, r4
   d49ee:	b005      	add	sp, #20
   d49f0:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d49f2 <_ZN9SeeedOLED16setNormalDisplayEv>:
  sendCommand(SeeedOLED_Dectivate_Scroll_Cmd);
}

void SeeedOLED::setNormalDisplay()
{
  sendCommand(SeeedOLED_Normal_Display_Cmd);
   d49f2:	20a6      	movs	r0, #166	; 0xa6
   d49f4:	f7ff bf1e 	b.w	d4834 <_ZN9SeeedOLED11sendCommandEh.constprop.0>

000d49f8 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   d49f8:	4770      	bx	lr

000d49fa <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   d49fa:	b510      	push	{r4, lr}
  }
   d49fc:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   d49fe:	4604      	mov	r4, r0
  }
   d4a00:	f002 f8ab 	bl	d6b5a <_ZdlPvj>
   d4a04:	4620      	mov	r0, r4
   d4a06:	bd10      	pop	{r4, pc}

000d4a08 <_ZN5Print6printfEPKcz>:
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d4a08:	b40e      	push	{r1, r2, r3}
   d4a0a:	b503      	push	{r0, r1, lr}
   d4a0c:	ab03      	add	r3, sp, #12
        auto r = this->vprintf(false, format, args);
   d4a0e:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d4a10:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   d4a14:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   d4a16:	f001 fdd6 	bl	d65c6 <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
   d4a1a:	b002      	add	sp, #8
   d4a1c:	f85d eb04 	ldr.w	lr, [sp], #4
   d4a20:	b003      	add	sp, #12
   d4a22:	4770      	bx	lr

000d4a24 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d4a24:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d4a26:	4604      	mov	r4, r0
   d4a28:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d4a2a:	7922      	ldrb	r2, [r4, #4]
   d4a2c:	68a3      	ldr	r3, [r4, #8]
   d4a2e:	b132      	cbz	r2, d4a3e <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   d4a30:	b9a3      	cbnz	r3, d4a5c <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   d4a32:	490b      	ldr	r1, [pc, #44]	; (d4a60 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   d4a34:	b002      	add	sp, #8
   d4a36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   d4a3a:	f001 bd89 	b.w	d6550 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d4a3e:	4a09      	ldr	r2, [pc, #36]	; (d4a64 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   d4a40:	7b26      	ldrb	r6, [r4, #12]
   d4a42:	4d09      	ldr	r5, [pc, #36]	; (d4a68 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   d4a44:	4909      	ldr	r1, [pc, #36]	; (d4a6c <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   d4a46:	7b64      	ldrb	r4, [r4, #13]
   d4a48:	2e01      	cmp	r6, #1
   d4a4a:	bf18      	it	ne
   d4a4c:	4629      	movne	r1, r5
   d4a4e:	e9cd 1400 	strd	r1, r4, [sp]
   d4a52:	4907      	ldr	r1, [pc, #28]	; (d4a70 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   d4a54:	f7ff ffd8 	bl	d4a08 <_ZN5Print6printfEPKcz>
  }
   d4a58:	b002      	add	sp, #8
   d4a5a:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d4a5c:	4a05      	ldr	r2, [pc, #20]	; (d4a74 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   d4a5e:	e7ef      	b.n	d4a40 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   d4a60:	000d93b9 	.word	0x000d93b9
   d4a64:	000d8f84 	.word	0x000d8f84
   d4a68:	000d93b5 	.word	0x000d93b5
   d4a6c:	000d93b1 	.word	0x000d93b1
   d4a70:	000d93cf 	.word	0x000d93cf
   d4a74:	000d93a8 	.word	0x000d93a8

000d4a78 <_ZN15Adafruit_BME280C1Ev>:
/*! 
    @brief  class constructor
*/
/**************************************************************************/
Adafruit_BME280::Adafruit_BME280()
    : _cs(-1), _mosi(-1), _miso(-1), _sck(-1)
   d4a78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d4a7c:	6103      	str	r3, [r0, #16]
{ }
   d4a7e:	4770      	bx	lr

000d4a80 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   d4a80:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   d4a82:	4c0b      	ldr	r4, [pc, #44]	; (d4ab0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   d4a84:	7821      	ldrb	r1, [r4, #0]
   d4a86:	f3bf 8f5b 	dmb	ish
   d4a8a:	f011 0101 	ands.w	r1, r1, #1
   d4a8e:	d10b      	bne.n	d4aa8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   d4a90:	4620      	mov	r0, r4
   d4a92:	9101      	str	r1, [sp, #4]
   d4a94:	f7ff fb05 	bl	d40a2 <__cxa_guard_acquire>
   d4a98:	9901      	ldr	r1, [sp, #4]
   d4a9a:	b128      	cbz	r0, d4aa8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   d4a9c:	4805      	ldr	r0, [pc, #20]	; (d4ab4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   d4a9e:	f001 fe9d 	bl	d67dc <_ZN8SPIClassC1E19hal_spi_interface_t>
   d4aa2:	4620      	mov	r0, r4
   d4aa4:	f7ff fb02 	bl	d40ac <__cxa_guard_release>
        return instance;
    }
   d4aa8:	4802      	ldr	r0, [pc, #8]	; (d4ab4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   d4aaa:	b002      	add	sp, #8
   d4aac:	bd10      	pop	{r4, pc}
   d4aae:	bf00      	nop
   d4ab0:	2003e644 	.word	0x2003e644
   d4ab4:	2003e648 	.word	0x2003e648

000d4ab8 <_ZN15Adafruit_BME2807spixferEh>:
    @brief  Encapsulate hardware and software SPI transfer into one function
    @param x the data byte to transfer
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   d4ab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    // hardware SPI
    if (_sck == -1)
   d4abc:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d4ac0:	3301      	adds	r3, #1
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   d4ac2:	4605      	mov	r5, r0
   d4ac4:	460f      	mov	r7, r1
    if (_sck == -1)
   d4ac6:	d106      	bne.n	d4ad6 <_ZN15Adafruit_BME2807spixferEh+0x1e>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d4ac8:	f7ff ffda 	bl	d4a80 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d4acc:	4639      	mov	r1, r7
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
            reply |= 1;
        }
    return reply;
}
   d4ace:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d4ad2:	f001 bf25 	b.w	d6920 <_ZN8SPIClass8transferEh>
    uint8_t reply = 0;
   d4ad6:	2400      	movs	r4, #0
    for (int i=7; i>=0; i--) {
   d4ad8:	2607      	movs	r6, #7
        digitalWrite(_mosi, x & (1<<i));
   d4ada:	f04f 0801 	mov.w	r8, #1
        digitalWrite(_sck, LOW);
   d4ade:	f995 0013 	ldrsb.w	r0, [r5, #19]
   d4ae2:	2100      	movs	r1, #0
   d4ae4:	b280      	uxth	r0, r0
   d4ae6:	f001 ffee 	bl	d6ac6 <digitalWrite>
        digitalWrite(_mosi, x & (1<<i));
   d4aea:	f995 0011 	ldrsb.w	r0, [r5, #17]
   d4aee:	fa08 f106 	lsl.w	r1, r8, r6
   d4af2:	4039      	ands	r1, r7
   d4af4:	b280      	uxth	r0, r0
   d4af6:	f001 ffe6 	bl	d6ac6 <digitalWrite>
        digitalWrite(_sck, HIGH);
   d4afa:	f995 0013 	ldrsb.w	r0, [r5, #19]
   d4afe:	2101      	movs	r1, #1
   d4b00:	b280      	uxth	r0, r0
   d4b02:	f001 ffe0 	bl	d6ac6 <digitalWrite>
        if (digitalRead(_miso))
   d4b06:	f995 0012 	ldrsb.w	r0, [r5, #18]
        reply <<= 1;
   d4b0a:	0064      	lsls	r4, r4, #1
        if (digitalRead(_miso))
   d4b0c:	b280      	uxth	r0, r0
        reply <<= 1;
   d4b0e:	b2e4      	uxtb	r4, r4
        if (digitalRead(_miso))
   d4b10:	f001 fff2 	bl	d6af8 <digitalRead>
   d4b14:	b108      	cbz	r0, d4b1a <_ZN15Adafruit_BME2807spixferEh+0x62>
            reply |= 1;
   d4b16:	f044 0401 	orr.w	r4, r4, #1
    for (int i=7; i>=0; i--) {
   d4b1a:	3e01      	subs	r6, #1
   d4b1c:	d2df      	bcs.n	d4ade <_ZN15Adafruit_BME2807spixferEh+0x26>
}
   d4b1e:	4620      	mov	r0, r4
   d4b20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d4b24 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>:
    void endTransaction() {
   d4b24:	b508      	push	{r3, lr}
        instance().endTransaction();
   d4b26:	f7ff ffab 	bl	d4a80 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    }
   d4b2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        instance().endTransaction();
   d4b2e:	f001 be70 	b.w	d6812 <_ZN8SPIClass14endTransactionEv>

000d4b32 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0.constprop.0>:
    int32_t beginTransaction(const particle::SPISettings& settings) {
   d4b32:	b507      	push	{r0, r1, r2, lr}
   d4b34:	9001      	str	r0, [sp, #4]
        return instance().beginTransaction(settings);
   d4b36:	f7ff ffa3 	bl	d4a80 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d4b3a:	9901      	ldr	r1, [sp, #4]
    }
   d4b3c:	b003      	add	sp, #12
   d4b3e:	f85d eb04 	ldr.w	lr, [sp], #4
        return instance().beginTransaction(settings);
   d4b42:	f001 be7f 	b.w	d6844 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
	...

000d4b48 <_ZN15Adafruit_BME2806read24Eh>:
    @param reg the register address to read from
    @returns the 24 bit data value read from the device
*/
/**************************************************************************/
uint32_t Adafruit_BME280::read24(byte reg)
{
   d4b48:	b530      	push	{r4, r5, lr}
    uint32_t value;

    if (_cs == -1) {
   d4b4a:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d4b4e:	3301      	adds	r3, #1
{
   d4b50:	b085      	sub	sp, #20
   d4b52:	4604      	mov	r4, r0
   d4b54:	460d      	mov	r5, r1
    if (_cs == -1) {
   d4b56:	d123      	bne.n	d4ba0 <_ZN15Adafruit_BME2806read24Eh+0x58>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d4b58:	7901      	ldrb	r1, [r0, #4]
   d4b5a:	6800      	ldr	r0, [r0, #0]
   d4b5c:	f000 ffb0 	bl	d5ac0 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d4b60:	6820      	ldr	r0, [r4, #0]
   d4b62:	6803      	ldr	r3, [r0, #0]
   d4b64:	4629      	mov	r1, r5
   d4b66:	689b      	ldr	r3, [r3, #8]
   d4b68:	4798      	blx	r3
        _wire -> endTransmission();
   d4b6a:	6820      	ldr	r0, [r4, #0]
   d4b6c:	f000 ffb3 	bl	d5ad6 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)3);
   d4b70:	7921      	ldrb	r1, [r4, #4]
   d4b72:	6820      	ldr	r0, [r4, #0]
   d4b74:	2203      	movs	r2, #3
   d4b76:	f000 ffa0 	bl	d5aba <_ZN7TwoWire11requestFromEhj>

        value = _wire -> read();
   d4b7a:	6820      	ldr	r0, [r4, #0]
   d4b7c:	6803      	ldr	r3, [r0, #0]
   d4b7e:	695b      	ldr	r3, [r3, #20]
   d4b80:	4798      	blx	r3
        value <<= 8;
   d4b82:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
   d4b84:	6820      	ldr	r0, [r4, #0]
   d4b86:	6803      	ldr	r3, [r0, #0]
   d4b88:	695b      	ldr	r3, [r3, #20]
   d4b8a:	4798      	blx	r3
   d4b8c:	4328      	orrs	r0, r5
        value <<= 8;
   d4b8e:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
   d4b90:	6820      	ldr	r0, [r4, #0]
   d4b92:	6803      	ldr	r3, [r0, #0]
   d4b94:	695b      	ldr	r3, [r3, #20]
   d4b96:	4798      	blx	r3
   d4b98:	4305      	orrs	r5, r0
        if (_sck == -1)
            SPI.endTransaction(); // release the SPI bus
    }

    return value;
}
   d4b9a:	4628      	mov	r0, r5
   d4b9c:	b005      	add	sp, #20
   d4b9e:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   d4ba0:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d4ba4:	3301      	adds	r3, #1
   d4ba6:	d10c      	bne.n	d4bc2 <_ZN15Adafruit_BME2806read24Eh+0x7a>
      dataMode_{dataMode}
   d4ba8:	4b1a      	ldr	r3, [pc, #104]	; (d4c14 <_ZN15Adafruit_BME2806read24Eh+0xcc>)
   d4baa:	9300      	str	r3, [sp, #0]
   d4bac:	2300      	movs	r3, #0
   d4bae:	f88d 3004 	strb.w	r3, [sp, #4]
   d4bb2:	4b19      	ldr	r3, [pc, #100]	; (d4c18 <_ZN15Adafruit_BME2806read24Eh+0xd0>)
   d4bb4:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d4bb6:	4668      	mov	r0, sp
   d4bb8:	2301      	movs	r3, #1
   d4bba:	f8ad 300c 	strh.w	r3, [sp, #12]
   d4bbe:	f7ff ffb8 	bl	d4b32 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0.constprop.0>
        digitalWrite(_cs, LOW);
   d4bc2:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4bc6:	2100      	movs	r1, #0
   d4bc8:	b280      	uxth	r0, r0
   d4bca:	f001 ff7c 	bl	d6ac6 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d4bce:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d4bd2:	4620      	mov	r0, r4
   d4bd4:	f7ff ff70 	bl	d4ab8 <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
   d4bd8:	2100      	movs	r1, #0
   d4bda:	4620      	mov	r0, r4
   d4bdc:	f7ff ff6c 	bl	d4ab8 <_ZN15Adafruit_BME2807spixferEh>
        value |= spixfer(0);
   d4be0:	2100      	movs	r1, #0
        value <<= 8;
   d4be2:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   d4be4:	4620      	mov	r0, r4
   d4be6:	f7ff ff67 	bl	d4ab8 <_ZN15Adafruit_BME2807spixferEh>
   d4bea:	4328      	orrs	r0, r5
        value <<= 8;
   d4bec:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   d4bee:	2100      	movs	r1, #0
   d4bf0:	4620      	mov	r0, r4
   d4bf2:	f7ff ff61 	bl	d4ab8 <_ZN15Adafruit_BME2807spixferEh>
   d4bf6:	4305      	orrs	r5, r0
        digitalWrite(_cs, HIGH);
   d4bf8:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4bfc:	2101      	movs	r1, #1
   d4bfe:	b280      	uxth	r0, r0
   d4c00:	f001 ff61 	bl	d6ac6 <digitalWrite>
        if (_sck == -1)
   d4c04:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d4c08:	3301      	adds	r3, #1
   d4c0a:	d1c6      	bne.n	d4b9a <_ZN15Adafruit_BME2806read24Eh+0x52>
            SPI.endTransaction(); // release the SPI bus
   d4c0c:	f7ff ff8a 	bl	d4b24 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
    return value;
   d4c10:	e7c3      	b.n	d4b9a <_ZN15Adafruit_BME2806read24Eh+0x52>
   d4c12:	bf00      	nop
   d4c14:	000d93f4 	.word	0x000d93f4
   d4c18:	0007a120 	.word	0x0007a120

000d4c1c <_ZN15Adafruit_BME28015readTemperatureEv>:
    @brief  Returns the temperature from the sensor
    @returns the temperature read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readTemperature(void)
{
   d4c1c:	b510      	push	{r4, lr}
    int32_t var1, var2;

    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   d4c1e:	21fa      	movs	r1, #250	; 0xfa
{
   d4c20:	4604      	mov	r4, r0
    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   d4c22:	f7ff ff91 	bl	d4b48 <_ZN15Adafruit_BME2806read24Eh>
    if (adc_T == 0x800000) // value in case temp measurement was disabled
   d4c26:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   d4c2a:	d01e      	beq.n	d4c6a <_ZN15Adafruit_BME28015readTemperatureEv+0x4e>
        return NAN;
    adc_T >>= 4;

    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   d4c2c:	8aa1      	ldrh	r1, [r4, #20]
            ((int32_t)_bme280_calib.dig_T3)) >> 14;

    t_fine = var1 + var2;

    float T = (t_fine * 5 + 128) >> 8;
    return T/100;
   d4c2e:	ed9f 7a10 	vldr	s14, [pc, #64]	; d4c70 <_ZN15Adafruit_BME28015readTemperatureEv+0x54>
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   d4c32:	004b      	lsls	r3, r1, #1
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   d4c34:	ebc1 2220 	rsb	r2, r1, r0, asr #8
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   d4c38:	ebc3 11e0 	rsb	r1, r3, r0, asr #7
            ((int32_t)_bme280_calib.dig_T2)) >> 11;
   d4c3c:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   d4c40:	4352      	muls	r2, r2
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   d4c42:	4359      	muls	r1, r3
            ((int32_t)_bme280_calib.dig_T3)) >> 14;
   d4c44:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
              ((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1))) >> 12) *
   d4c48:	1312      	asrs	r2, r2, #12
   d4c4a:	4353      	muls	r3, r2
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   d4c4c:	139b      	asrs	r3, r3, #14
    t_fine = var1 + var2;
   d4c4e:	eb03 23e1 	add.w	r3, r3, r1, asr #11
   d4c52:	60e3      	str	r3, [r4, #12]
    float T = (t_fine * 5 + 128) >> 8;
   d4c54:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d4c58:	3380      	adds	r3, #128	; 0x80
   d4c5a:	121b      	asrs	r3, r3, #8
   d4c5c:	ee07 3a90 	vmov	s15, r3
   d4c60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    return T/100;
   d4c64:	ee87 0a87 	vdiv.f32	s0, s15, s14
}
   d4c68:	bd10      	pop	{r4, pc}
        return NAN;
   d4c6a:	ed9f 0a02 	vldr	s0, [pc, #8]	; d4c74 <_ZN15Adafruit_BME28015readTemperatureEv+0x58>
   d4c6e:	e7fb      	b.n	d4c68 <_ZN15Adafruit_BME28015readTemperatureEv+0x4c>
   d4c70:	42c80000 	.word	0x42c80000
   d4c74:	7fc00000 	.word	0x7fc00000

000d4c78 <_ZN15Adafruit_BME28012readPressureEv>:
/*!
    @brief  Returns the pressure from the sensor
    @returns the pressure value (in Pascal) read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readPressure(void) {
   d4c78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d4c7c:	4604      	mov	r4, r0
    int64_t var1, var2, p;

    readTemperature(); // must be done first to get t_fine
   d4c7e:	f7ff ffcd 	bl	d4c1c <_ZN15Adafruit_BME28015readTemperatureEv>

    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
   d4c82:	21f7      	movs	r1, #247	; 0xf7
   d4c84:	4620      	mov	r0, r4
   d4c86:	f7ff ff5f 	bl	d4b48 <_ZN15Adafruit_BME2806read24Eh>
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
   d4c8a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
   d4c8e:	4605      	mov	r5, r0
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
   d4c90:	f000 80bf 	beq.w	d4e12 <_ZN15Adafruit_BME28012readPressureEv+0x19a>
        return NAN;
    adc_P >>= 4;

    var1 = ((int64_t)t_fine) - 128000;
   d4c94:	68e0      	ldr	r0, [r4, #12]
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   d4c96:	f9b4 601c 	ldrsh.w	r6, [r4, #28]
    var1 = ((int64_t)t_fine) - 128000;
   d4c9a:	f5b0 33fa 	subs.w	r3, r0, #128000	; 0x1f400
   d4c9e:	ea4f 71e0 	mov.w	r1, r0, asr #31
   d4ca2:	f141 32ff 	adc.w	r2, r1, #4294967295	; 0xffffffff
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   d4ca6:	fba3 8903 	umull	r8, r9, r3, r3
   d4caa:	fb03 f102 	mul.w	r1, r3, r2
   d4cae:	eb09 0941 	add.w	r9, r9, r1, lsl #1
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   d4cb2:	17f7      	asrs	r7, r6, #31
   d4cb4:	fb06 f102 	mul.w	r1, r6, r2
   d4cb8:	fb03 1107 	mla	r1, r3, r7, r1
   d4cbc:	fba6 6703 	umull	r6, r7, r6, r3
   d4cc0:	440f      	add	r7, r1
   d4cc2:	0339      	lsls	r1, r7, #12
   d4cc4:	ea41 5116 	orr.w	r1, r1, r6, lsr #20
   d4cc8:	0330      	lsls	r0, r6, #12
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
   d4cca:	f9b4 601e 	ldrsh.w	r6, [r4, #30]
   d4cce:	17f7      	asrs	r7, r6, #31
   d4cd0:	fb06 fc09 	mul.w	ip, r6, r9
   d4cd4:	fb08 cc07 	mla	ip, r8, r7, ip
   d4cd8:	fba6 6708 	umull	r6, r7, r6, r8
   d4cdc:	4467      	add	r7, ip
   d4cde:	ea4f 2c16 	mov.w	ip, r6, lsr #8
   d4ce2:	ea4c 6c07 	orr.w	ip, ip, r7, lsl #24
    var1 = (((((int64_t)1)<<47)+var1))*((int64_t)_bme280_calib.dig_P1)>>33;
   d4ce6:	8b66      	ldrh	r6, [r4, #26]
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
   d4ce8:	ea4f 2e27 	mov.w	lr, r7, asr #8
   d4cec:	eb1c 0000 	adds.w	r0, ip, r0
   d4cf0:	eb4e 0e01 	adc.w	lr, lr, r1
    var1 = (((((int64_t)1)<<47)+var1))*((int64_t)_bme280_calib.dig_P1)>>33;
   d4cf4:	3000      	adds	r0, #0
   d4cf6:	f54e 4e00 	adc.w	lr, lr, #32768	; 0x8000
   d4cfa:	fba0 0106 	umull	r0, r1, r0, r6
   d4cfe:	fb06 110e 	mla	r1, r6, lr, r1
   d4d02:	104e      	asrs	r6, r1, #1
   d4d04:	17cf      	asrs	r7, r1, #31

    if (var1 == 0) {
   d4d06:	ea56 0107 	orrs.w	r1, r6, r7
   d4d0a:	f000 8085 	beq.w	d4e18 <_ZN15Adafruit_BME28012readPressureEv+0x1a0>
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   d4d0e:	f9b4 0024 	ldrsh.w	r0, [r4, #36]	; 0x24
   d4d12:	fb00 fc09 	mul.w	ip, r0, r9
   d4d16:	17c1      	asrs	r1, r0, #31
   d4d18:	fb08 cc01 	mla	ip, r8, r1, ip
   d4d1c:	fba0 0108 	umull	r0, r1, r0, r8
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d4d20:	f9b4 8022 	ldrsh.w	r8, [r4, #34]	; 0x22
   d4d24:	ea4f 79e8 	mov.w	r9, r8, asr #31
   d4d28:	fb08 f202 	mul.w	r2, r8, r2
   d4d2c:	fb03 2209 	mla	r2, r3, r9, r2
   d4d30:	fba8 8903 	umull	r8, r9, r8, r3
   d4d34:	4491      	add	r9, r2
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   d4d36:	4461      	add	r1, ip
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d4d38:	ea4f 4248 	mov.w	r2, r8, lsl #17
   d4d3c:	ea4f 4c49 	mov.w	ip, r9, lsl #17
    adc_P >>= 4;
   d4d40:	112d      	asrs	r5, r5, #4
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d4d42:	1812      	adds	r2, r2, r0
        return 0; // avoid exception caused by division by zero
    }
    p = 1048576 - adc_P;
   d4d44:	f5c5 1580 	rsb	r5, r5, #1048576	; 0x100000
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d4d48:	ea4c 3cd8 	orr.w	ip, ip, r8, lsr #15
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
   d4d4c:	f9b4 8020 	ldrsh.w	r8, [r4, #32]
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d4d50:	eb4c 0c01 	adc.w	ip, ip, r1
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
   d4d54:	2300      	movs	r3, #0
    p = 1048576 - adc_P;
   d4d56:	17e9      	asrs	r1, r5, #31
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
   d4d58:	189b      	adds	r3, r3, r2
    p = (((p<<31) - var2)*3125) / var1;
   d4d5a:	ea4f 7ec1 	mov.w	lr, r1, lsl #31
   d4d5e:	ea4f 70c5 	mov.w	r0, r5, lsl #31
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
   d4d62:	ea4f 01c8 	mov.w	r1, r8, lsl #3
   d4d66:	eb41 0c0c 	adc.w	ip, r1, ip
    p = (((p<<31) - var2)*3125) / var1;
   d4d6a:	ea4e 0e55 	orr.w	lr, lr, r5, lsr #1
   d4d6e:	1ac0      	subs	r0, r0, r3
   d4d70:	f640 4335 	movw	r3, #3125	; 0xc35
   d4d74:	eb6e 0e0c 	sbc.w	lr, lr, ip
   d4d78:	fba0 0103 	umull	r0, r1, r0, r3
   d4d7c:	fb03 110e 	mla	r1, r3, lr, r1
   d4d80:	4632      	mov	r2, r6
   d4d82:	463b      	mov	r3, r7
   d4d84:	f003 fe58 	bl	d8a38 <__aeabi_ldivmod>
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
   d4d88:	f9b4 202a 	ldrsh.w	r2, [r4, #42]	; 0x2a
   d4d8c:	134d      	asrs	r5, r1, #13
   d4d8e:	0b46      	lsrs	r6, r0, #13
   d4d90:	ea46 46c1 	orr.w	r6, r6, r1, lsl #19
   d4d94:	fb02 f705 	mul.w	r7, r2, r5
   d4d98:	17d3      	asrs	r3, r2, #31
   d4d9a:	fb06 7703 	mla	r7, r6, r3, r7
   d4d9e:	fba2 2306 	umull	r2, r3, r2, r6
   d4da2:	443b      	add	r3, r7
   d4da4:	4355      	muls	r5, r2
   d4da6:	fb06 5503 	mla	r5, r6, r3, r5
   d4daa:	fba2 2306 	umull	r2, r3, r2, r6
   d4dae:	442b      	add	r3, r5
   d4db0:	0e55      	lsrs	r5, r2, #25
   d4db2:	ea45 15c3 	orr.w	r5, r5, r3, lsl #7
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   d4db6:	f9b4 2028 	ldrsh.w	r2, [r4, #40]	; 0x28

    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   d4dba:	f9b4 4026 	ldrsh.w	r4, [r4, #38]	; 0x26
   d4dbe:	182d      	adds	r5, r5, r0
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
   d4dc0:	ea4f 6663 	mov.w	r6, r3, asr #25
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   d4dc4:	eb41 0606 	adc.w	r6, r1, r6
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   d4dc8:	17d3      	asrs	r3, r2, #31
   d4dca:	4351      	muls	r1, r2
   d4dcc:	fb00 1103 	mla	r1, r0, r3, r1
   d4dd0:	fba2 2300 	umull	r2, r3, r2, r0
   d4dd4:	440b      	add	r3, r1
   d4dd6:	0cd1      	lsrs	r1, r2, #19
   d4dd8:	ea41 3143 	orr.w	r1, r1, r3, lsl #13
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   d4ddc:	186d      	adds	r5, r5, r1
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   d4dde:	ea4f 40e3 	mov.w	r0, r3, asr #19
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   d4de2:	eb46 0300 	adc.w	r3, r6, r0
   d4de6:	0a2a      	lsrs	r2, r5, #8
   d4de8:	17e5      	asrs	r5, r4, #31
   d4dea:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
   d4dee:	1219      	asrs	r1, r3, #8
   d4df0:	0120      	lsls	r0, r4, #4
   d4df2:	012b      	lsls	r3, r5, #4
   d4df4:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
    return (float)p/256;
   d4df8:	1880      	adds	r0, r0, r2
   d4dfa:	eb43 0101 	adc.w	r1, r3, r1
   d4dfe:	f003 fddd 	bl	d89bc <__aeabi_l2f>
   d4e02:	ed9f 0a07 	vldr	s0, [pc, #28]	; d4e20 <_ZN15Adafruit_BME28012readPressureEv+0x1a8>
   d4e06:	ee07 0a90 	vmov	s15, r0
   d4e0a:	ee27 0a80 	vmul.f32	s0, s15, s0
}
   d4e0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return NAN;
   d4e12:	ed9f 0a04 	vldr	s0, [pc, #16]	; d4e24 <_ZN15Adafruit_BME28012readPressureEv+0x1ac>
   d4e16:	e7fa      	b.n	d4e0e <_ZN15Adafruit_BME28012readPressureEv+0x196>
        return 0; // avoid exception caused by division by zero
   d4e18:	ed9f 0a03 	vldr	s0, [pc, #12]	; d4e28 <_ZN15Adafruit_BME28012readPressureEv+0x1b0>
   d4e1c:	e7f7      	b.n	d4e0e <_ZN15Adafruit_BME28012readPressureEv+0x196>
   d4e1e:	bf00      	nop
   d4e20:	3b800000 	.word	0x3b800000
   d4e24:	7fc00000 	.word	0x7fc00000
   d4e28:	00000000 	.word	0x00000000

000d4e2c <_ZN15Adafruit_BME2806read16Eh>:
{
   d4e2c:	b530      	push	{r4, r5, lr}
    if (_cs == -1) {
   d4e2e:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d4e32:	3301      	adds	r3, #1
{
   d4e34:	b085      	sub	sp, #20
   d4e36:	4604      	mov	r4, r0
   d4e38:	460d      	mov	r5, r1
    if (_cs == -1) {
   d4e3a:	d11f      	bne.n	d4e7c <_ZN15Adafruit_BME2806read16Eh+0x50>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d4e3c:	7901      	ldrb	r1, [r0, #4]
   d4e3e:	6800      	ldr	r0, [r0, #0]
   d4e40:	f000 fe3e 	bl	d5ac0 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d4e44:	6820      	ldr	r0, [r4, #0]
   d4e46:	6803      	ldr	r3, [r0, #0]
   d4e48:	4629      	mov	r1, r5
   d4e4a:	689b      	ldr	r3, [r3, #8]
   d4e4c:	4798      	blx	r3
        _wire -> endTransmission();
   d4e4e:	6820      	ldr	r0, [r4, #0]
   d4e50:	f000 fe41 	bl	d5ad6 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)2);
   d4e54:	7921      	ldrb	r1, [r4, #4]
   d4e56:	6820      	ldr	r0, [r4, #0]
   d4e58:	2202      	movs	r2, #2
   d4e5a:	f000 fe2e 	bl	d5aba <_ZN7TwoWire11requestFromEhj>
        value = (_wire -> read() << 8) | _wire -> read();
   d4e5e:	6820      	ldr	r0, [r4, #0]
   d4e60:	6803      	ldr	r3, [r0, #0]
   d4e62:	695b      	ldr	r3, [r3, #20]
   d4e64:	4798      	blx	r3
   d4e66:	4605      	mov	r5, r0
   d4e68:	6820      	ldr	r0, [r4, #0]
   d4e6a:	6803      	ldr	r3, [r0, #0]
   d4e6c:	695b      	ldr	r3, [r3, #20]
   d4e6e:	4798      	blx	r3
   d4e70:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   d4e74:	b285      	uxth	r5, r0
}
   d4e76:	4628      	mov	r0, r5
   d4e78:	b005      	add	sp, #20
   d4e7a:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   d4e7c:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d4e80:	3301      	adds	r3, #1
   d4e82:	d10c      	bne.n	d4e9e <_ZN15Adafruit_BME2806read16Eh+0x72>
   d4e84:	4b18      	ldr	r3, [pc, #96]	; (d4ee8 <_ZN15Adafruit_BME2806read16Eh+0xbc>)
   d4e86:	9300      	str	r3, [sp, #0]
   d4e88:	2300      	movs	r3, #0
   d4e8a:	f88d 3004 	strb.w	r3, [sp, #4]
   d4e8e:	4b17      	ldr	r3, [pc, #92]	; (d4eec <_ZN15Adafruit_BME2806read16Eh+0xc0>)
   d4e90:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d4e92:	4668      	mov	r0, sp
   d4e94:	2301      	movs	r3, #1
   d4e96:	f8ad 300c 	strh.w	r3, [sp, #12]
   d4e9a:	f7ff fe4a 	bl	d4b32 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0.constprop.0>
        digitalWrite(_cs, LOW);
   d4e9e:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4ea2:	2100      	movs	r1, #0
   d4ea4:	b280      	uxth	r0, r0
   d4ea6:	f001 fe0e 	bl	d6ac6 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d4eaa:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d4eae:	4620      	mov	r0, r4
   d4eb0:	f7ff fe02 	bl	d4ab8 <_ZN15Adafruit_BME2807spixferEh>
        value = (spixfer(0) << 8) | spixfer(0);
   d4eb4:	2100      	movs	r1, #0
   d4eb6:	4620      	mov	r0, r4
   d4eb8:	f7ff fdfe 	bl	d4ab8 <_ZN15Adafruit_BME2807spixferEh>
   d4ebc:	2100      	movs	r1, #0
   d4ebe:	4605      	mov	r5, r0
   d4ec0:	4620      	mov	r0, r4
   d4ec2:	f7ff fdf9 	bl	d4ab8 <_ZN15Adafruit_BME2807spixferEh>
   d4ec6:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   d4eca:	b285      	uxth	r5, r0
        digitalWrite(_cs, HIGH);
   d4ecc:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4ed0:	2101      	movs	r1, #1
   d4ed2:	b280      	uxth	r0, r0
   d4ed4:	f001 fdf7 	bl	d6ac6 <digitalWrite>
        if (_sck == -1)
   d4ed8:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d4edc:	3301      	adds	r3, #1
   d4ede:	d1ca      	bne.n	d4e76 <_ZN15Adafruit_BME2806read16Eh+0x4a>
            SPI.endTransaction(); // release the SPI bus
   d4ee0:	f7ff fe20 	bl	d4b24 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
   d4ee4:	e7c7      	b.n	d4e76 <_ZN15Adafruit_BME2806read16Eh+0x4a>
   d4ee6:	bf00      	nop
   d4ee8:	000d93f4 	.word	0x000d93f4
   d4eec:	0007a120 	.word	0x0007a120

000d4ef0 <_ZN15Adafruit_BME2809read16_LEEh>:
uint16_t Adafruit_BME280::read16_LE(byte reg) {
   d4ef0:	b508      	push	{r3, lr}
    uint16_t temp = read16(reg);
   d4ef2:	f7ff ff9b 	bl	d4e2c <_ZN15Adafruit_BME2806read16Eh>
    return (temp >> 8) | (temp << 8);
   d4ef6:	ba40      	rev16	r0, r0
}
   d4ef8:	b280      	uxth	r0, r0
   d4efa:	bd08      	pop	{r3, pc}

000d4efc <_ZN15Adafruit_BME28012readHumidityEv>:
/*!
    @brief  Returns the humidity from the sensor
    @returns the humidity value read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readHumidity(void) {
   d4efc:	b538      	push	{r3, r4, r5, lr}
   d4efe:	4604      	mov	r4, r0
    readTemperature(); // must be done first to get t_fine
   d4f00:	f7ff fe8c 	bl	d4c1c <_ZN15Adafruit_BME28015readTemperatureEv>

    int32_t adc_H = read16(BME280_REGISTER_HUMIDDATA);
   d4f04:	21fd      	movs	r1, #253	; 0xfd
   d4f06:	4620      	mov	r0, r4
   d4f08:	f7ff ff90 	bl	d4e2c <_ZN15Adafruit_BME2806read16Eh>
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
   d4f0c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   d4f10:	d038      	beq.n	d4f84 <_ZN15Adafruit_BME28012readHumidityEv+0x88>
        
    int32_t v_x1_u32r;

    v_x1_u32r = (t_fine - ((int32_t)76800));

    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   d4f12:	f9b4 5032 	ldrsh.w	r5, [r4, #50]	; 0x32
    v_x1_u32r = (t_fine - ((int32_t)76800));
   d4f16:	68e2      	ldr	r2, [r4, #12]
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   d4f18:	f9b4 3034 	ldrsh.w	r3, [r4, #52]	; 0x34
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   d4f1c:	052d      	lsls	r5, r5, #20
    v_x1_u32r = (t_fine - ((int32_t)76800));
   d4f1e:	f5a2 3296 	sub.w	r2, r2, #76800	; 0x12c00
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   d4f22:	ebc5 3080 	rsb	r0, r5, r0, lsl #14
   d4f26:	fb02 0313 	mls	r3, r2, r3, r0
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   d4f2a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
   d4f2e:	13d9      	asrs	r1, r3, #15
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   d4f30:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   d4f34:	4353      	muls	r3, r2
   d4f36:	12db      	asrs	r3, r3, #11
   d4f38:	f503 4000 	add.w	r0, r3, #32768	; 0x8000
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
   d4f3c:	f994 3036 	ldrsb.w	r3, [r4, #54]	; 0x36
   d4f40:	4353      	muls	r3, r2
   d4f42:	129b      	asrs	r3, r3, #10
   d4f44:	4343      	muls	r3, r0
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   d4f46:	129b      	asrs	r3, r3, #10
   d4f48:	f503 1200 	add.w	r2, r3, #2097152	; 0x200000
                    ((int32_t)2097152)) * ((int32_t)_bme280_calib.dig_H2) + 8192) >> 14));
   d4f4c:	f9b4 302e 	ldrsh.w	r3, [r4, #46]	; 0x2e
   d4f50:	4353      	muls	r3, r2
   d4f52:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
   d4f56:	139b      	asrs	r3, r3, #14
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   d4f58:	434b      	muls	r3, r1

    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
   d4f5a:	13da      	asrs	r2, r3, #15
                               ((int32_t)_bme280_calib.dig_H1)) >> 4));
   d4f5c:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
   d4f60:	4352      	muls	r2, r2
   d4f62:	11d2      	asrs	r2, r2, #7
   d4f64:	434a      	muls	r2, r1
   d4f66:	eba3 1322 	sub.w	r3, r3, r2, asr #4

    v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
   d4f6a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
   d4f6e:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
   d4f72:	bfa8      	it	ge
   d4f74:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
    float h = (v_x1_u32r>>12);
   d4f78:	131b      	asrs	r3, r3, #12
   d4f7a:	ee00 3a10 	vmov	s0, r3
    return  h / 1024.0;
   d4f7e:	eeba 0acb 	vcvt.f32.s32	s0, s0, #10
}
   d4f82:	bd38      	pop	{r3, r4, r5, pc}
        return NAN;
   d4f84:	ed9f 0a01 	vldr	s0, [pc, #4]	; d4f8c <_ZN15Adafruit_BME28012readHumidityEv+0x90>
   d4f88:	e7fb      	b.n	d4f82 <_ZN15Adafruit_BME28012readHumidityEv+0x86>
   d4f8a:	bf00      	nop
   d4f8c:	7fc00000 	.word	0x7fc00000

000d4f90 <_ZN15Adafruit_BME2805read8Eh>:
uint8_t Adafruit_BME280::read8(byte reg) {
   d4f90:	b530      	push	{r4, r5, lr}
    if (_cs == -1) {
   d4f92:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d4f96:	3301      	adds	r3, #1
uint8_t Adafruit_BME280::read8(byte reg) {
   d4f98:	b085      	sub	sp, #20
   d4f9a:	4604      	mov	r4, r0
   d4f9c:	460d      	mov	r5, r1
    if (_cs == -1) {
   d4f9e:	d118      	bne.n	d4fd2 <_ZN15Adafruit_BME2805read8Eh+0x42>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d4fa0:	7901      	ldrb	r1, [r0, #4]
   d4fa2:	6800      	ldr	r0, [r0, #0]
   d4fa4:	f000 fd8c 	bl	d5ac0 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d4fa8:	6820      	ldr	r0, [r4, #0]
   d4faa:	6803      	ldr	r3, [r0, #0]
   d4fac:	4629      	mov	r1, r5
   d4fae:	689b      	ldr	r3, [r3, #8]
   d4fb0:	4798      	blx	r3
        _wire -> endTransmission();
   d4fb2:	6820      	ldr	r0, [r4, #0]
   d4fb4:	f000 fd8f 	bl	d5ad6 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)1);
   d4fb8:	7921      	ldrb	r1, [r4, #4]
   d4fba:	6820      	ldr	r0, [r4, #0]
   d4fbc:	2201      	movs	r2, #1
   d4fbe:	f000 fd7c 	bl	d5aba <_ZN7TwoWire11requestFromEhj>
        value = _wire -> read();
   d4fc2:	6820      	ldr	r0, [r4, #0]
   d4fc4:	6803      	ldr	r3, [r0, #0]
   d4fc6:	695b      	ldr	r3, [r3, #20]
   d4fc8:	4798      	blx	r3
   d4fca:	b2c5      	uxtb	r5, r0
}
   d4fcc:	4628      	mov	r0, r5
   d4fce:	b005      	add	sp, #20
   d4fd0:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   d4fd2:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d4fd6:	3301      	adds	r3, #1
   d4fd8:	d10c      	bne.n	d4ff4 <_ZN15Adafruit_BME2805read8Eh+0x64>
   d4fda:	4b15      	ldr	r3, [pc, #84]	; (d5030 <_ZN15Adafruit_BME2805read8Eh+0xa0>)
   d4fdc:	9300      	str	r3, [sp, #0]
   d4fde:	2300      	movs	r3, #0
   d4fe0:	f88d 3004 	strb.w	r3, [sp, #4]
   d4fe4:	4b13      	ldr	r3, [pc, #76]	; (d5034 <_ZN15Adafruit_BME2805read8Eh+0xa4>)
   d4fe6:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d4fe8:	4668      	mov	r0, sp
   d4fea:	2301      	movs	r3, #1
   d4fec:	f8ad 300c 	strh.w	r3, [sp, #12]
   d4ff0:	f7ff fd9f 	bl	d4b32 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0.constprop.0>
        digitalWrite(_cs, LOW);
   d4ff4:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4ff8:	2100      	movs	r1, #0
   d4ffa:	b280      	uxth	r0, r0
   d4ffc:	f001 fd63 	bl	d6ac6 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d5000:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d5004:	4620      	mov	r0, r4
   d5006:	f7ff fd57 	bl	d4ab8 <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
   d500a:	2100      	movs	r1, #0
   d500c:	4620      	mov	r0, r4
   d500e:	f7ff fd53 	bl	d4ab8 <_ZN15Adafruit_BME2807spixferEh>
   d5012:	4605      	mov	r5, r0
        digitalWrite(_cs, HIGH);
   d5014:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d5018:	2101      	movs	r1, #1
   d501a:	b280      	uxth	r0, r0
   d501c:	f001 fd53 	bl	d6ac6 <digitalWrite>
        if (_sck == -1)
   d5020:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d5024:	3301      	adds	r3, #1
   d5026:	d1d1      	bne.n	d4fcc <_ZN15Adafruit_BME2805read8Eh+0x3c>
            SPI.endTransaction(); // release the SPI bus
   d5028:	f7ff fd7c 	bl	d4b24 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
   d502c:	e7ce      	b.n	d4fcc <_ZN15Adafruit_BME2805read8Eh+0x3c>
   d502e:	bf00      	nop
   d5030:	000d93f4 	.word	0x000d93f4
   d5034:	0007a120 	.word	0x0007a120

000d5038 <_ZN15Adafruit_BME28020isReadingCalibrationEv>:
{
   d5038:	b508      	push	{r3, lr}
  uint8_t const rStatus = read8(BME280_REGISTER_STATUS);
   d503a:	21f3      	movs	r1, #243	; 0xf3
   d503c:	f7ff ffa8 	bl	d4f90 <_ZN15Adafruit_BME2805read8Eh>
}
   d5040:	f000 0001 	and.w	r0, r0, #1
   d5044:	bd08      	pop	{r3, pc}

000d5046 <_ZN15Adafruit_BME28016readCoefficientsEv>:
{
   d5046:	b538      	push	{r3, r4, r5, lr}
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d5048:	2188      	movs	r1, #136	; 0x88
{
   d504a:	4604      	mov	r4, r0
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d504c:	f7ff ff50 	bl	d4ef0 <_ZN15Adafruit_BME2809read16_LEEh>
    return (int16_t)read16_LE(reg);
   d5050:	218a      	movs	r1, #138	; 0x8a
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d5052:	82a0      	strh	r0, [r4, #20]
    return (int16_t)read16_LE(reg);
   d5054:	4620      	mov	r0, r4
   d5056:	f7ff ff4b 	bl	d4ef0 <_ZN15Adafruit_BME2809read16_LEEh>
   d505a:	218c      	movs	r1, #140	; 0x8c
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
   d505c:	82e0      	strh	r0, [r4, #22]
    return (int16_t)read16_LE(reg);
   d505e:	4620      	mov	r0, r4
   d5060:	f7ff ff46 	bl	d4ef0 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d5064:	218e      	movs	r1, #142	; 0x8e
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);
   d5066:	8320      	strh	r0, [r4, #24]
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d5068:	4620      	mov	r0, r4
   d506a:	f7ff ff41 	bl	d4ef0 <_ZN15Adafruit_BME2809read16_LEEh>
    return (int16_t)read16_LE(reg);
   d506e:	2190      	movs	r1, #144	; 0x90
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d5070:	8360      	strh	r0, [r4, #26]
    return (int16_t)read16_LE(reg);
   d5072:	4620      	mov	r0, r4
   d5074:	f7ff ff3c 	bl	d4ef0 <_ZN15Adafruit_BME2809read16_LEEh>
   d5078:	2192      	movs	r1, #146	; 0x92
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
   d507a:	83a0      	strh	r0, [r4, #28]
    return (int16_t)read16_LE(reg);
   d507c:	4620      	mov	r0, r4
   d507e:	f7ff ff37 	bl	d4ef0 <_ZN15Adafruit_BME2809read16_LEEh>
   d5082:	2194      	movs	r1, #148	; 0x94
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
   d5084:	83e0      	strh	r0, [r4, #30]
    return (int16_t)read16_LE(reg);
   d5086:	4620      	mov	r0, r4
   d5088:	f7ff ff32 	bl	d4ef0 <_ZN15Adafruit_BME2809read16_LEEh>
   d508c:	2196      	movs	r1, #150	; 0x96
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
   d508e:	8420      	strh	r0, [r4, #32]
    return (int16_t)read16_LE(reg);
   d5090:	4620      	mov	r0, r4
   d5092:	f7ff ff2d 	bl	d4ef0 <_ZN15Adafruit_BME2809read16_LEEh>
   d5096:	2198      	movs	r1, #152	; 0x98
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
   d5098:	8460      	strh	r0, [r4, #34]	; 0x22
    return (int16_t)read16_LE(reg);
   d509a:	4620      	mov	r0, r4
   d509c:	f7ff ff28 	bl	d4ef0 <_ZN15Adafruit_BME2809read16_LEEh>
   d50a0:	219a      	movs	r1, #154	; 0x9a
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
   d50a2:	84a0      	strh	r0, [r4, #36]	; 0x24
    return (int16_t)read16_LE(reg);
   d50a4:	4620      	mov	r0, r4
   d50a6:	f7ff ff23 	bl	d4ef0 <_ZN15Adafruit_BME2809read16_LEEh>
   d50aa:	219c      	movs	r1, #156	; 0x9c
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
   d50ac:	84e0      	strh	r0, [r4, #38]	; 0x26
    return (int16_t)read16_LE(reg);
   d50ae:	4620      	mov	r0, r4
   d50b0:	f7ff ff1e 	bl	d4ef0 <_ZN15Adafruit_BME2809read16_LEEh>
   d50b4:	219e      	movs	r1, #158	; 0x9e
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
   d50b6:	8520      	strh	r0, [r4, #40]	; 0x28
    return (int16_t)read16_LE(reg);
   d50b8:	4620      	mov	r0, r4
   d50ba:	f7ff ff19 	bl	d4ef0 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d50be:	21a1      	movs	r1, #161	; 0xa1
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);
   d50c0:	8560      	strh	r0, [r4, #42]	; 0x2a
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d50c2:	4620      	mov	r0, r4
   d50c4:	f7ff ff64 	bl	d4f90 <_ZN15Adafruit_BME2805read8Eh>
    return (int16_t)read16_LE(reg);
   d50c8:	21e1      	movs	r1, #225	; 0xe1
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d50ca:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    return (int16_t)read16_LE(reg);
   d50ce:	4620      	mov	r0, r4
   d50d0:	f7ff ff0e 	bl	d4ef0 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d50d4:	21e3      	movs	r1, #227	; 0xe3
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
   d50d6:	85e0      	strh	r0, [r4, #46]	; 0x2e
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d50d8:	4620      	mov	r0, r4
   d50da:	f7ff ff59 	bl	d4f90 <_ZN15Adafruit_BME2805read8Eh>
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   d50de:	21e4      	movs	r1, #228	; 0xe4
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d50e0:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   d50e4:	4620      	mov	r0, r4
   d50e6:	f7ff ff53 	bl	d4f90 <_ZN15Adafruit_BME2805read8Eh>
   d50ea:	21e5      	movs	r1, #229	; 0xe5
   d50ec:	4605      	mov	r5, r0
   d50ee:	4620      	mov	r0, r4
   d50f0:	f7ff ff4e 	bl	d4f90 <_ZN15Adafruit_BME2805read8Eh>
   d50f4:	f000 030f 	and.w	r3, r0, #15
   d50f8:	ea43 1005 	orr.w	r0, r3, r5, lsl #4
   d50fc:	8660      	strh	r0, [r4, #50]	; 0x32
    _bme280_calib.dig_H5 = (read8(BME280_REGISTER_DIG_H5+1) << 4) | (read8(BME280_REGISTER_DIG_H5) >> 4);
   d50fe:	21e6      	movs	r1, #230	; 0xe6
   d5100:	4620      	mov	r0, r4
   d5102:	f7ff ff45 	bl	d4f90 <_ZN15Adafruit_BME2805read8Eh>
   d5106:	21e5      	movs	r1, #229	; 0xe5
   d5108:	4605      	mov	r5, r0
   d510a:	4620      	mov	r0, r4
   d510c:	f7ff ff40 	bl	d4f90 <_ZN15Adafruit_BME2805read8Eh>
   d5110:	1103      	asrs	r3, r0, #4
   d5112:	ea43 1005 	orr.w	r0, r3, r5, lsl #4
   d5116:	86a0      	strh	r0, [r4, #52]	; 0x34
    _bme280_calib.dig_H6 = (int8_t)read8(BME280_REGISTER_DIG_H6);
   d5118:	21e7      	movs	r1, #231	; 0xe7
   d511a:	4620      	mov	r0, r4
   d511c:	f7ff ff38 	bl	d4f90 <_ZN15Adafruit_BME2805read8Eh>
   d5120:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
}
   d5124:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5128 <_ZN15Adafruit_BME2806write8Ehh>:
void Adafruit_BME280::write8(byte reg, byte value) {
   d5128:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (_cs == -1) {
   d512a:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d512e:	3301      	adds	r3, #1
void Adafruit_BME280::write8(byte reg, byte value) {
   d5130:	4604      	mov	r4, r0
   d5132:	460e      	mov	r6, r1
   d5134:	4615      	mov	r5, r2
    if (_cs == -1) {
   d5136:	d112      	bne.n	d515e <_ZN15Adafruit_BME2806write8Ehh+0x36>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d5138:	7901      	ldrb	r1, [r0, #4]
   d513a:	6800      	ldr	r0, [r0, #0]
   d513c:	f000 fcc0 	bl	d5ac0 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d5140:	6820      	ldr	r0, [r4, #0]
   d5142:	6803      	ldr	r3, [r0, #0]
   d5144:	4631      	mov	r1, r6
   d5146:	689b      	ldr	r3, [r3, #8]
   d5148:	4798      	blx	r3
        _wire -> write((uint8_t)value);
   d514a:	6820      	ldr	r0, [r4, #0]
   d514c:	6803      	ldr	r3, [r0, #0]
   d514e:	4629      	mov	r1, r5
   d5150:	689b      	ldr	r3, [r3, #8]
   d5152:	4798      	blx	r3
        _wire -> endTransmission();
   d5154:	6820      	ldr	r0, [r4, #0]
   d5156:	f000 fcbe 	bl	d5ad6 <_ZN7TwoWire15endTransmissionEv>
}
   d515a:	b004      	add	sp, #16
   d515c:	bd70      	pop	{r4, r5, r6, pc}
        if (_sck == -1)
   d515e:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d5162:	3301      	adds	r3, #1
   d5164:	d10c      	bne.n	d5180 <_ZN15Adafruit_BME2806write8Ehh+0x58>
   d5166:	4b14      	ldr	r3, [pc, #80]	; (d51b8 <_ZN15Adafruit_BME2806write8Ehh+0x90>)
   d5168:	9300      	str	r3, [sp, #0]
   d516a:	2300      	movs	r3, #0
   d516c:	f88d 3004 	strb.w	r3, [sp, #4]
   d5170:	4b12      	ldr	r3, [pc, #72]	; (d51bc <_ZN15Adafruit_BME2806write8Ehh+0x94>)
   d5172:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d5174:	4668      	mov	r0, sp
   d5176:	2301      	movs	r3, #1
   d5178:	f8ad 300c 	strh.w	r3, [sp, #12]
   d517c:	f7ff fcd9 	bl	d4b32 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0.constprop.0>
        digitalWrite(_cs, LOW);
   d5180:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d5184:	2100      	movs	r1, #0
   d5186:	b280      	uxth	r0, r0
   d5188:	f001 fc9d 	bl	d6ac6 <digitalWrite>
        spixfer(reg & ~0x80); // write, bit 7 low
   d518c:	f006 017f 	and.w	r1, r6, #127	; 0x7f
   d5190:	4620      	mov	r0, r4
   d5192:	f7ff fc91 	bl	d4ab8 <_ZN15Adafruit_BME2807spixferEh>
        spixfer(value);
   d5196:	4629      	mov	r1, r5
   d5198:	4620      	mov	r0, r4
   d519a:	f7ff fc8d 	bl	d4ab8 <_ZN15Adafruit_BME2807spixferEh>
        digitalWrite(_cs, HIGH);
   d519e:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d51a2:	2101      	movs	r1, #1
   d51a4:	b280      	uxth	r0, r0
   d51a6:	f001 fc8e 	bl	d6ac6 <digitalWrite>
    if (_sck == -1)
   d51aa:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d51ae:	3301      	adds	r3, #1
   d51b0:	d1d3      	bne.n	d515a <_ZN15Adafruit_BME2806write8Ehh+0x32>
        SPI.endTransaction(); // release the SPI bus
   d51b2:	f7ff fcb7 	bl	d4b24 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
}
   d51b6:	e7d0      	b.n	d515a <_ZN15Adafruit_BME2806write8Ehh+0x32>
   d51b8:	000d93f4 	.word	0x000d93f4
   d51bc:	0007a120 	.word	0x0007a120

000d51c0 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>:
		 standby_duration  duration) {
   d51c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _measReg.osrs_t   = tempSampling;
   d51c2:	00db      	lsls	r3, r3, #3
   d51c4:	f002 0207 	and.w	r2, r2, #7
   d51c8:	f003 0338 	and.w	r3, r3, #56	; 0x38
   d51cc:	4313      	orrs	r3, r2
   d51ce:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
		 standby_duration  duration) {
   d51d2:	f89d 6018 	ldrb.w	r6, [sp, #24]
    _measReg.osrs_t   = tempSampling;
   d51d6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    _humReg.osrs_h    = humSampling;
   d51da:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
		 standby_duration  duration) {
   d51de:	f89d 501c 	ldrb.w	r5, [sp, #28]
   d51e2:	f89d 7020 	ldrb.w	r7, [sp, #32]
    _humReg.osrs_h    = humSampling;
   d51e6:	f366 1347 	bfi	r3, r6, #5, #3
   d51ea:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    _configReg.t_sb   = duration;
   d51ee:	00ed      	lsls	r5, r5, #3
   d51f0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   d51f4:	f007 0707 	and.w	r7, r7, #7
   d51f8:	f005 0538 	and.w	r5, r5, #56	; 0x38
   d51fc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   d5200:	433d      	orrs	r5, r7
		 standby_duration  duration) {
   d5202:	4604      	mov	r4, r0
    _configReg.t_sb   = duration;
   d5204:	431d      	orrs	r5, r3
   d5206:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
    write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
   d520a:	f006 0207 	and.w	r2, r6, #7
   d520e:	21f2      	movs	r1, #242	; 0xf2
   d5210:	f7ff ff8a 	bl	d5128 <_ZN15Adafruit_BME2806write8Ehh>
            unsigned int none : 1;  ///< unused - don't set
            unsigned int spi3w_en : 1; ///< unused - don't set

            /// @return combined config register
            unsigned int get() {
                return (t_sb << 5) | (filter << 2) | spi3w_en;
   d5214:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   d5218:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   d521c:	f002 0107 	and.w	r1, r2, #7
   d5220:	009b      	lsls	r3, r3, #2
   d5222:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
    write8(BME280_REGISTER_CONFIG, _configReg.get());
   d5226:	ea43 12d2 	orr.w	r2, r3, r2, lsr #7
   d522a:	4620      	mov	r0, r4
   d522c:	21f5      	movs	r1, #245	; 0xf5
   d522e:	f7ff ff7b 	bl	d5128 <_ZN15Adafruit_BME2806write8Ehh>
            // 11       = normal
            unsigned int mode : 2; ///< device mode

            /// @return combined ctrl register
            unsigned int get() {
                return (osrs_t << 5) | (osrs_p << 2) | mode;
   d5232:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
   d5236:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   d523a:	f002 0107 	and.w	r1, r2, #7
   d523e:	009b      	lsls	r3, r3, #2
   d5240:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   d5244:	ea43 1292 	orr.w	r2, r3, r2, lsr #6
   d5248:	4620      	mov	r0, r4
   d524a:	21f4      	movs	r1, #244	; 0xf4
}
   d524c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   d5250:	f7ff bf6a 	b.w	d5128 <_ZN15Adafruit_BME2806write8Ehh>

000d5254 <_ZN15Adafruit_BME2804initEv>:
{
   d5254:	b530      	push	{r4, r5, lr}
   d5256:	4604      	mov	r4, r0
    if (_cs == -1) {
   d5258:	f990 0010 	ldrsb.w	r0, [r0, #16]
   d525c:	1c42      	adds	r2, r0, #1
{
   d525e:	b085      	sub	sp, #20
    if (_cs == -1) {
   d5260:	d119      	bne.n	d5296 <_ZN15Adafruit_BME2804initEv+0x42>
        _wire -> begin();
   d5262:	6820      	ldr	r0, [r4, #0]
   d5264:	f000 fbfa 	bl	d5a5c <_ZN7TwoWire5beginEv>
    _sensorID = read8(BME280_REGISTER_CHIPID);
   d5268:	21d0      	movs	r1, #208	; 0xd0
   d526a:	4620      	mov	r0, r4
   d526c:	f7ff fe90 	bl	d4f90 <_ZN15Adafruit_BME2805read8Eh>
    if (_sensorID != 0x60)
   d5270:	2860      	cmp	r0, #96	; 0x60
    _sensorID = read8(BME280_REGISTER_CHIPID);
   d5272:	60a0      	str	r0, [r4, #8]
    if (_sensorID != 0x60)
   d5274:	d145      	bne.n	d5302 <_ZN15Adafruit_BME2804initEv+0xae>
    write8(BME280_REGISTER_SOFTRESET, 0xB6);
   d5276:	4620      	mov	r0, r4
   d5278:	22b6      	movs	r2, #182	; 0xb6
   d527a:	21e0      	movs	r1, #224	; 0xe0
   d527c:	f7ff ff54 	bl	d5128 <_ZN15Adafruit_BME2806write8Ehh>
    delay(300);
   d5280:	f44f 7096 	mov.w	r0, #300	; 0x12c
   d5284:	f001 f926 	bl	d64d4 <delay>
    while (isReadingCalibration())
   d5288:	4620      	mov	r0, r4
   d528a:	f7ff fed5 	bl	d5038 <_ZN15Adafruit_BME28020isReadingCalibrationEv>
   d528e:	4605      	mov	r5, r0
   d5290:	b328      	cbz	r0, d52de <_ZN15Adafruit_BME2804initEv+0x8a>
          delay(100);
   d5292:	2064      	movs	r0, #100	; 0x64
   d5294:	e7f6      	b.n	d5284 <_ZN15Adafruit_BME2804initEv+0x30>
        digitalWrite(_cs, HIGH);
   d5296:	2101      	movs	r1, #1
   d5298:	b280      	uxth	r0, r0
   d529a:	f001 fc14 	bl	d6ac6 <digitalWrite>
        pinMode(_cs, OUTPUT);
   d529e:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d52a2:	2101      	movs	r1, #1
   d52a4:	b280      	uxth	r0, r0
   d52a6:	f001 fbfd 	bl	d6aa4 <pinMode>
        if (_sck == -1) {
   d52aa:	f994 0013 	ldrsb.w	r0, [r4, #19]
   d52ae:	1c43      	adds	r3, r0, #1
   d52b0:	d104      	bne.n	d52bc <_ZN15Adafruit_BME2804initEv+0x68>
        instance().begin();
   d52b2:	f7ff fbe5 	bl	d4a80 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d52b6:	f001 fa9b 	bl	d67f0 <_ZN8SPIClass5beginEv>
    }
   d52ba:	e7d5      	b.n	d5268 <_ZN15Adafruit_BME2804initEv+0x14>
            pinMode(_sck, OUTPUT);
   d52bc:	2101      	movs	r1, #1
   d52be:	b280      	uxth	r0, r0
   d52c0:	f001 fbf0 	bl	d6aa4 <pinMode>
            pinMode(_mosi, OUTPUT);
   d52c4:	f994 0011 	ldrsb.w	r0, [r4, #17]
   d52c8:	2101      	movs	r1, #1
   d52ca:	b280      	uxth	r0, r0
   d52cc:	f001 fbea 	bl	d6aa4 <pinMode>
            pinMode(_miso, INPUT);
   d52d0:	f994 0012 	ldrsb.w	r0, [r4, #18]
   d52d4:	2100      	movs	r1, #0
   d52d6:	b280      	uxth	r0, r0
   d52d8:	f001 fbe4 	bl	d6aa4 <pinMode>
   d52dc:	e7c4      	b.n	d5268 <_ZN15Adafruit_BME2804initEv+0x14>
    readCoefficients(); // read trimming parameters, see DS 4.2.2
   d52de:	4620      	mov	r0, r4
   d52e0:	f7ff feb1 	bl	d5046 <_ZN15Adafruit_BME28016readCoefficientsEv>
    setSampling(); // use defaults
   d52e4:	2305      	movs	r3, #5
   d52e6:	9300      	str	r3, [sp, #0]
   d52e8:	461a      	mov	r2, r3
   d52ea:	2103      	movs	r1, #3
   d52ec:	4620      	mov	r0, r4
   d52ee:	e9cd 5501 	strd	r5, r5, [sp, #4]
   d52f2:	f7ff ff65 	bl	d51c0 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>
    delay(100);
   d52f6:	2064      	movs	r0, #100	; 0x64
   d52f8:	f001 f8ec 	bl	d64d4 <delay>
   d52fc:	2001      	movs	r0, #1
}
   d52fe:	b005      	add	sp, #20
   d5300:	bd30      	pop	{r4, r5, pc}
        return false;
   d5302:	2000      	movs	r0, #0
   d5304:	e7fb      	b.n	d52fe <_ZN15Adafruit_BME2804initEv+0xaa>

000d5306 <_ZN15Adafruit_BME2805beginEv>:
    _i2caddr = BME280_ADDRESS;
   d5306:	2377      	movs	r3, #119	; 0x77
{
   d5308:	b510      	push	{r4, lr}
    _i2caddr = BME280_ADDRESS;
   d530a:	7103      	strb	r3, [r0, #4]
{
   d530c:	4604      	mov	r4, r0
	_wire = &Wire;
   d530e:	f001 fb63 	bl	d69d8 <_Z19__fetch_global_Wirev>
   d5312:	6020      	str	r0, [r4, #0]
	status = init();
   d5314:	4620      	mov	r0, r4
   d5316:	f7ff ff9d 	bl	d5254 <_ZN15Adafruit_BME2804initEv>
 	if(!status){
   d531a:	b930      	cbnz	r0, d532a <_ZN15Adafruit_BME2805beginEv+0x24>
 		_i2caddr = BME280_ADDRESS_ALTERNATE;
   d531c:	2376      	movs	r3, #118	; 0x76
   d531e:	7123      	strb	r3, [r4, #4]
 		status = init();
   d5320:	4620      	mov	r0, r4
}
   d5322:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 		status = init();
   d5326:	f7ff bf95 	b.w	d5254 <_ZN15Adafruit_BME2804initEv>
}
   d532a:	bd10      	pop	{r4, pc}

000d532c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d532c:	b508      	push	{r3, lr}
   d532e:	4b02      	ldr	r3, [pc, #8]	; (d5338 <HAL_USB_USART_Init+0xc>)
   d5330:	681b      	ldr	r3, [r3, #0]
   d5332:	681b      	ldr	r3, [r3, #0]
   d5334:	9301      	str	r3, [sp, #4]
   d5336:	bd08      	pop	{r3, pc}
   d5338:	0003024c 	.word	0x0003024c

000d533c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d533c:	b508      	push	{r3, lr}
   d533e:	4b02      	ldr	r3, [pc, #8]	; (d5348 <HAL_USB_USART_Begin+0xc>)
   d5340:	681b      	ldr	r3, [r3, #0]
   d5342:	685b      	ldr	r3, [r3, #4]
   d5344:	9301      	str	r3, [sp, #4]
   d5346:	bd08      	pop	{r3, pc}
   d5348:	0003024c 	.word	0x0003024c

000d534c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d534c:	b508      	push	{r3, lr}
   d534e:	4b02      	ldr	r3, [pc, #8]	; (d5358 <HAL_USB_USART_Available_Data+0xc>)
   d5350:	681b      	ldr	r3, [r3, #0]
   d5352:	691b      	ldr	r3, [r3, #16]
   d5354:	9301      	str	r3, [sp, #4]
   d5356:	bd08      	pop	{r3, pc}
   d5358:	0003024c 	.word	0x0003024c

000d535c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d535c:	b508      	push	{r3, lr}
   d535e:	4b02      	ldr	r3, [pc, #8]	; (d5368 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d5360:	681b      	ldr	r3, [r3, #0]
   d5362:	695b      	ldr	r3, [r3, #20]
   d5364:	9301      	str	r3, [sp, #4]
   d5366:	bd08      	pop	{r3, pc}
   d5368:	0003024c 	.word	0x0003024c

000d536c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d536c:	b508      	push	{r3, lr}
   d536e:	4b02      	ldr	r3, [pc, #8]	; (d5378 <HAL_USB_USART_Receive_Data+0xc>)
   d5370:	681b      	ldr	r3, [r3, #0]
   d5372:	699b      	ldr	r3, [r3, #24]
   d5374:	9301      	str	r3, [sp, #4]
   d5376:	bd08      	pop	{r3, pc}
   d5378:	0003024c 	.word	0x0003024c

000d537c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d537c:	b508      	push	{r3, lr}
   d537e:	4b02      	ldr	r3, [pc, #8]	; (d5388 <HAL_USB_USART_Send_Data+0xc>)
   d5380:	681b      	ldr	r3, [r3, #0]
   d5382:	69db      	ldr	r3, [r3, #28]
   d5384:	9301      	str	r3, [sp, #4]
   d5386:	bd08      	pop	{r3, pc}
   d5388:	0003024c 	.word	0x0003024c

000d538c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d538c:	b508      	push	{r3, lr}
   d538e:	4b02      	ldr	r3, [pc, #8]	; (d5398 <HAL_USB_USART_Flush_Data+0xc>)
   d5390:	681b      	ldr	r3, [r3, #0]
   d5392:	6a1b      	ldr	r3, [r3, #32]
   d5394:	9301      	str	r3, [sp, #4]
   d5396:	bd08      	pop	{r3, pc}
   d5398:	0003024c 	.word	0x0003024c

000d539c <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d539c:	b508      	push	{r3, lr}
   d539e:	4b02      	ldr	r3, [pc, #8]	; (d53a8 <hal_i2c_begin+0xc>)
   d53a0:	681b      	ldr	r3, [r3, #0]
   d53a2:	68db      	ldr	r3, [r3, #12]
   d53a4:	9301      	str	r3, [sp, #4]
   d53a6:	bd08      	pop	{r3, pc}
   d53a8:	00030228 	.word	0x00030228

000d53ac <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d53ac:	b508      	push	{r3, lr}
   d53ae:	4b02      	ldr	r3, [pc, #8]	; (d53b8 <hal_i2c_begin_transmission+0xc>)
   d53b0:	681b      	ldr	r3, [r3, #0]
   d53b2:	699b      	ldr	r3, [r3, #24]
   d53b4:	9301      	str	r3, [sp, #4]
   d53b6:	bd08      	pop	{r3, pc}
   d53b8:	00030228 	.word	0x00030228

000d53bc <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d53bc:	b508      	push	{r3, lr}
   d53be:	4b02      	ldr	r3, [pc, #8]	; (d53c8 <hal_i2c_end_transmission+0xc>)
   d53c0:	681b      	ldr	r3, [r3, #0]
   d53c2:	69db      	ldr	r3, [r3, #28]
   d53c4:	9301      	str	r3, [sp, #4]
   d53c6:	bd08      	pop	{r3, pc}
   d53c8:	00030228 	.word	0x00030228

000d53cc <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d53cc:	b508      	push	{r3, lr}
   d53ce:	4b02      	ldr	r3, [pc, #8]	; (d53d8 <hal_i2c_write+0xc>)
   d53d0:	681b      	ldr	r3, [r3, #0]
   d53d2:	6a1b      	ldr	r3, [r3, #32]
   d53d4:	9301      	str	r3, [sp, #4]
   d53d6:	bd08      	pop	{r3, pc}
   d53d8:	00030228 	.word	0x00030228

000d53dc <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d53dc:	b508      	push	{r3, lr}
   d53de:	4b02      	ldr	r3, [pc, #8]	; (d53e8 <hal_i2c_available+0xc>)
   d53e0:	681b      	ldr	r3, [r3, #0]
   d53e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d53e4:	9301      	str	r3, [sp, #4]
   d53e6:	bd08      	pop	{r3, pc}
   d53e8:	00030228 	.word	0x00030228

000d53ec <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d53ec:	b508      	push	{r3, lr}
   d53ee:	4b02      	ldr	r3, [pc, #8]	; (d53f8 <hal_i2c_read+0xc>)
   d53f0:	681b      	ldr	r3, [r3, #0]
   d53f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d53f4:	9301      	str	r3, [sp, #4]
   d53f6:	bd08      	pop	{r3, pc}
   d53f8:	00030228 	.word	0x00030228

000d53fc <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d53fc:	b508      	push	{r3, lr}
   d53fe:	4b02      	ldr	r3, [pc, #8]	; (d5408 <hal_i2c_peek+0xc>)
   d5400:	681b      	ldr	r3, [r3, #0]
   d5402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5404:	9301      	str	r3, [sp, #4]
   d5406:	bd08      	pop	{r3, pc}
   d5408:	00030228 	.word	0x00030228

000d540c <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d540c:	b508      	push	{r3, lr}
   d540e:	4b02      	ldr	r3, [pc, #8]	; (d5418 <hal_i2c_flush+0xc>)
   d5410:	681b      	ldr	r3, [r3, #0]
   d5412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5414:	9301      	str	r3, [sp, #4]
   d5416:	bd08      	pop	{r3, pc}
   d5418:	00030228 	.word	0x00030228

000d541c <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d541c:	b508      	push	{r3, lr}
   d541e:	4b02      	ldr	r3, [pc, #8]	; (d5428 <hal_i2c_is_enabled+0xc>)
   d5420:	681b      	ldr	r3, [r3, #0]
   d5422:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5424:	9301      	str	r3, [sp, #4]
   d5426:	bd08      	pop	{r3, pc}
   d5428:	00030228 	.word	0x00030228

000d542c <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d542c:	b508      	push	{r3, lr}
   d542e:	4b02      	ldr	r3, [pc, #8]	; (d5438 <hal_i2c_init+0xc>)
   d5430:	681b      	ldr	r3, [r3, #0]
   d5432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5434:	9301      	str	r3, [sp, #4]
   d5436:	bd08      	pop	{r3, pc}
   d5438:	00030228 	.word	0x00030228

000d543c <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   d543c:	b508      	push	{r3, lr}
   d543e:	4b02      	ldr	r3, [pc, #8]	; (d5448 <hal_i2c_request_ex+0xc>)
   d5440:	681b      	ldr	r3, [r3, #0]
   d5442:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d5444:	9301      	str	r3, [sp, #4]
   d5446:	bd08      	pop	{r3, pc}
   d5448:	00030228 	.word	0x00030228

000d544c <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   d544c:	b508      	push	{r3, lr}
   d544e:	4b02      	ldr	r3, [pc, #8]	; (d5458 <hal_spi_begin+0xc>)
   d5450:	681b      	ldr	r3, [r3, #0]
   d5452:	681b      	ldr	r3, [r3, #0]
   d5454:	9301      	str	r3, [sp, #4]
   d5456:	bd08      	pop	{r3, pc}
   d5458:	00030230 	.word	0x00030230

000d545c <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   d545c:	b508      	push	{r3, lr}
   d545e:	4b02      	ldr	r3, [pc, #8]	; (d5468 <hal_spi_transfer+0xc>)
   d5460:	681b      	ldr	r3, [r3, #0]
   d5462:	695b      	ldr	r3, [r3, #20]
   d5464:	9301      	str	r3, [sp, #4]
   d5466:	bd08      	pop	{r3, pc}
   d5468:	00030230 	.word	0x00030230

000d546c <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d546c:	b508      	push	{r3, lr}
   d546e:	4b02      	ldr	r3, [pc, #8]	; (d5478 <hal_spi_init+0xc>)
   d5470:	681b      	ldr	r3, [r3, #0]
   d5472:	69db      	ldr	r3, [r3, #28]
   d5474:	9301      	str	r3, [sp, #4]
   d5476:	bd08      	pop	{r3, pc}
   d5478:	00030230 	.word	0x00030230

000d547c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d547c:	b508      	push	{r3, lr}
   d547e:	4b02      	ldr	r3, [pc, #8]	; (d5488 <hal_spi_is_enabled+0xc>)
   d5480:	681b      	ldr	r3, [r3, #0]
   d5482:	6a1b      	ldr	r3, [r3, #32]
   d5484:	9301      	str	r3, [sp, #4]
   d5486:	bd08      	pop	{r3, pc}
   d5488:	00030230 	.word	0x00030230

000d548c <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   d548c:	b508      	push	{r3, lr}
   d548e:	4b02      	ldr	r3, [pc, #8]	; (d5498 <hal_spi_info+0xc>)
   d5490:	681b      	ldr	r3, [r3, #0]
   d5492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5494:	9301      	str	r3, [sp, #4]
   d5496:	bd08      	pop	{r3, pc}
   d5498:	00030230 	.word	0x00030230

000d549c <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d549c:	b508      	push	{r3, lr}
   d549e:	4b02      	ldr	r3, [pc, #8]	; (d54a8 <hal_spi_set_settings+0xc>)
   d54a0:	681b      	ldr	r3, [r3, #0]
   d54a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d54a4:	9301      	str	r3, [sp, #4]
   d54a6:	bd08      	pop	{r3, pc}
   d54a8:	00030230 	.word	0x00030230

000d54ac <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   d54ac:	b508      	push	{r3, lr}
   d54ae:	4b02      	ldr	r3, [pc, #8]	; (d54b8 <hal_spi_acquire+0xc>)
   d54b0:	681b      	ldr	r3, [r3, #0]
   d54b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d54b4:	9301      	str	r3, [sp, #4]
   d54b6:	bd08      	pop	{r3, pc}
   d54b8:	00030230 	.word	0x00030230

000d54bc <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   d54bc:	b508      	push	{r3, lr}
   d54be:	4b02      	ldr	r3, [pc, #8]	; (d54c8 <hal_spi_release+0xc>)
   d54c0:	681b      	ldr	r3, [r3, #0]
   d54c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d54c4:	9301      	str	r3, [sp, #4]
   d54c6:	bd08      	pop	{r3, pc}
   d54c8:	00030230 	.word	0x00030230

000d54cc <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d54cc:	b508      	push	{r3, lr}
   d54ce:	4b02      	ldr	r3, [pc, #8]	; (d54d8 <hal_usart_init+0xc>)
   d54d0:	681b      	ldr	r3, [r3, #0]
   d54d2:	681b      	ldr	r3, [r3, #0]
   d54d4:	9301      	str	r3, [sp, #4]
   d54d6:	bd08      	pop	{r3, pc}
   d54d8:	0003023c 	.word	0x0003023c

000d54dc <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d54dc:	b508      	push	{r3, lr}
   d54de:	4b02      	ldr	r3, [pc, #8]	; (d54e8 <hal_usart_write+0xc>)
   d54e0:	681b      	ldr	r3, [r3, #0]
   d54e2:	68db      	ldr	r3, [r3, #12]
   d54e4:	9301      	str	r3, [sp, #4]
   d54e6:	bd08      	pop	{r3, pc}
   d54e8:	0003023c 	.word	0x0003023c

000d54ec <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d54ec:	b508      	push	{r3, lr}
   d54ee:	4b02      	ldr	r3, [pc, #8]	; (d54f8 <hal_usart_available+0xc>)
   d54f0:	681b      	ldr	r3, [r3, #0]
   d54f2:	691b      	ldr	r3, [r3, #16]
   d54f4:	9301      	str	r3, [sp, #4]
   d54f6:	bd08      	pop	{r3, pc}
   d54f8:	0003023c 	.word	0x0003023c

000d54fc <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d54fc:	b508      	push	{r3, lr}
   d54fe:	4b02      	ldr	r3, [pc, #8]	; (d5508 <hal_usart_read+0xc>)
   d5500:	681b      	ldr	r3, [r3, #0]
   d5502:	695b      	ldr	r3, [r3, #20]
   d5504:	9301      	str	r3, [sp, #4]
   d5506:	bd08      	pop	{r3, pc}
   d5508:	0003023c 	.word	0x0003023c

000d550c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d550c:	b508      	push	{r3, lr}
   d550e:	4b02      	ldr	r3, [pc, #8]	; (d5518 <hal_usart_peek+0xc>)
   d5510:	681b      	ldr	r3, [r3, #0]
   d5512:	699b      	ldr	r3, [r3, #24]
   d5514:	9301      	str	r3, [sp, #4]
   d5516:	bd08      	pop	{r3, pc}
   d5518:	0003023c 	.word	0x0003023c

000d551c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d551c:	b508      	push	{r3, lr}
   d551e:	4b02      	ldr	r3, [pc, #8]	; (d5528 <hal_usart_flush+0xc>)
   d5520:	681b      	ldr	r3, [r3, #0]
   d5522:	69db      	ldr	r3, [r3, #28]
   d5524:	9301      	str	r3, [sp, #4]
   d5526:	bd08      	pop	{r3, pc}
   d5528:	0003023c 	.word	0x0003023c

000d552c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d552c:	b508      	push	{r3, lr}
   d552e:	4b02      	ldr	r3, [pc, #8]	; (d5538 <hal_usart_is_enabled+0xc>)
   d5530:	681b      	ldr	r3, [r3, #0]
   d5532:	6a1b      	ldr	r3, [r3, #32]
   d5534:	9301      	str	r3, [sp, #4]
   d5536:	bd08      	pop	{r3, pc}
   d5538:	0003023c 	.word	0x0003023c

000d553c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d553c:	b508      	push	{r3, lr}
   d553e:	4b02      	ldr	r3, [pc, #8]	; (d5548 <hal_usart_available_data_for_write+0xc>)
   d5540:	681b      	ldr	r3, [r3, #0]
   d5542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5544:	9301      	str	r3, [sp, #4]
   d5546:	bd08      	pop	{r3, pc}
   d5548:	0003023c 	.word	0x0003023c

000d554c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d554c:	b508      	push	{r3, lr}
   d554e:	4b02      	ldr	r3, [pc, #8]	; (d5558 <inet_inet_ntop+0xc>)
   d5550:	681b      	ldr	r3, [r3, #0]
   d5552:	695b      	ldr	r3, [r3, #20]
   d5554:	9301      	str	r3, [sp, #4]
   d5556:	bd08      	pop	{r3, pc}
   d5558:	00030264 	.word	0x00030264

000d555c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d555c:	b508      	push	{r3, lr}
   d555e:	4b02      	ldr	r3, [pc, #8]	; (d5568 <os_mutex_recursive_create+0xc>)
   d5560:	681b      	ldr	r3, [r3, #0]
   d5562:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5564:	9301      	str	r3, [sp, #4]
   d5566:	bd08      	pop	{r3, pc}
   d5568:	00030248 	.word	0x00030248

000d556c <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d556c:	b508      	push	{r3, lr}
   d556e:	4b02      	ldr	r3, [pc, #8]	; (d5578 <os_mutex_recursive_destroy+0xc>)
   d5570:	681b      	ldr	r3, [r3, #0]
   d5572:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5574:	9301      	str	r3, [sp, #4]
   d5576:	bd08      	pop	{r3, pc}
   d5578:	00030248 	.word	0x00030248

000d557c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d557c:	b508      	push	{r3, lr}
   d557e:	4b02      	ldr	r3, [pc, #8]	; (d5588 <HAL_RNG_GetRandomNumber+0xc>)
   d5580:	681b      	ldr	r3, [r3, #0]
   d5582:	685b      	ldr	r3, [r3, #4]
   d5584:	9301      	str	r3, [sp, #4]
   d5586:	bd08      	pop	{r3, pc}
   d5588:	00030218 	.word	0x00030218

000d558c <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d558c:	b508      	push	{r3, lr}
   d558e:	4b02      	ldr	r3, [pc, #8]	; (d5598 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d5590:	681b      	ldr	r3, [r3, #0]
   d5592:	695b      	ldr	r3, [r3, #20]
   d5594:	9301      	str	r3, [sp, #4]
   d5596:	bd08      	pop	{r3, pc}
   d5598:	00030218 	.word	0x00030218

000d559c <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d559c:	b508      	push	{r3, lr}
   d559e:	4b02      	ldr	r3, [pc, #8]	; (d55a8 <HAL_Validate_Pin_Function+0xc>)
   d55a0:	681b      	ldr	r3, [r3, #0]
   d55a2:	685b      	ldr	r3, [r3, #4]
   d55a4:	9301      	str	r3, [sp, #4]
   d55a6:	bd08      	pop	{r3, pc}
   d55a8:	0003022c 	.word	0x0003022c

000d55ac <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d55ac:	b508      	push	{r3, lr}
   d55ae:	4b02      	ldr	r3, [pc, #8]	; (d55b8 <HAL_Pin_Mode+0xc>)
   d55b0:	681b      	ldr	r3, [r3, #0]
   d55b2:	689b      	ldr	r3, [r3, #8]
   d55b4:	9301      	str	r3, [sp, #4]
   d55b6:	bd08      	pop	{r3, pc}
   d55b8:	0003022c 	.word	0x0003022c

000d55bc <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d55bc:	b508      	push	{r3, lr}
   d55be:	4b02      	ldr	r3, [pc, #8]	; (d55c8 <HAL_Get_Pin_Mode+0xc>)
   d55c0:	681b      	ldr	r3, [r3, #0]
   d55c2:	68db      	ldr	r3, [r3, #12]
   d55c4:	9301      	str	r3, [sp, #4]
   d55c6:	bd08      	pop	{r3, pc}
   d55c8:	0003022c 	.word	0x0003022c

000d55cc <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d55cc:	b508      	push	{r3, lr}
   d55ce:	4b02      	ldr	r3, [pc, #8]	; (d55d8 <HAL_GPIO_Write+0xc>)
   d55d0:	681b      	ldr	r3, [r3, #0]
   d55d2:	691b      	ldr	r3, [r3, #16]
   d55d4:	9301      	str	r3, [sp, #4]
   d55d6:	bd08      	pop	{r3, pc}
   d55d8:	0003022c 	.word	0x0003022c

000d55dc <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d55dc:	b508      	push	{r3, lr}
   d55de:	4b02      	ldr	r3, [pc, #8]	; (d55e8 <HAL_GPIO_Read+0xc>)
   d55e0:	681b      	ldr	r3, [r3, #0]
   d55e2:	695b      	ldr	r3, [r3, #20]
   d55e4:	9301      	str	r3, [sp, #4]
   d55e6:	bd08      	pop	{r3, pc}
   d55e8:	0003022c 	.word	0x0003022c

000d55ec <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   d55ec:	b508      	push	{r3, lr}
   d55ee:	4b02      	ldr	r3, [pc, #8]	; (d55f8 <hal_adc_read+0xc>)
   d55f0:	681b      	ldr	r3, [r3, #0]
   d55f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d55f4:	9301      	str	r3, [sp, #4]
   d55f6:	bd08      	pop	{r3, pc}
   d55f8:	0003022c 	.word	0x0003022c

000d55fc <HAL_Pulse_In>:

DYNALIB_FN(16, hal_gpio, HAL_Set_System_Interrupt_Handler, uint8_t(hal_irq_t, const HAL_InterruptCallback*, HAL_InterruptCallback*, void*))
DYNALIB_FN(17, hal_gpio, HAL_Get_System_Interrupt_Handler, uint8_t(hal_irq_t, HAL_InterruptCallback*, void*))
DYNALIB_FN(18, hal_gpio, HAL_System_Interrupt_Trigger, void(hal_irq_t, void*))

DYNALIB_FN(19, hal_gpio, HAL_Pulse_In, uint32_t(pin_t, uint16_t))
   d55fc:	b508      	push	{r3, lr}
   d55fe:	4b02      	ldr	r3, [pc, #8]	; (d5608 <HAL_Pulse_In+0xc>)
   d5600:	681b      	ldr	r3, [r3, #0]
   d5602:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d5604:	9301      	str	r3, [sp, #4]
   d5606:	bd08      	pop	{r3, pc}
   d5608:	0003022c 	.word	0x0003022c

000d560c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d560c:	b508      	push	{r3, lr}
   d560e:	4b02      	ldr	r3, [pc, #8]	; (d5618 <netdb_freeaddrinfo+0xc>)
   d5610:	681b      	ldr	r3, [r3, #0]
   d5612:	689b      	ldr	r3, [r3, #8]
   d5614:	9301      	str	r3, [sp, #4]
   d5616:	bd08      	pop	{r3, pc}
   d5618:	00030268 	.word	0x00030268

000d561c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d561c:	b508      	push	{r3, lr}
   d561e:	4b02      	ldr	r3, [pc, #8]	; (d5628 <netdb_getaddrinfo+0xc>)
   d5620:	681b      	ldr	r3, [r3, #0]
   d5622:	68db      	ldr	r3, [r3, #12]
   d5624:	9301      	str	r3, [sp, #4]
   d5626:	bd08      	pop	{r3, pc}
   d5628:	00030268 	.word	0x00030268

000d562c <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d562c:	b508      	push	{r3, lr}
   d562e:	4b02      	ldr	r3, [pc, #8]	; (d5638 <spark_cloud_flag_connected+0xc>)
   d5630:	681b      	ldr	r3, [r3, #0]
   d5632:	695b      	ldr	r3, [r3, #20]
   d5634:	9301      	str	r3, [sp, #4]
   d5636:	bd08      	pop	{r3, pc}
   d5638:	00030244 	.word	0x00030244

000d563c <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d563c:	b508      	push	{r3, lr}
   d563e:	4b02      	ldr	r3, [pc, #8]	; (d5648 <spark_send_event+0xc>)
   d5640:	681b      	ldr	r3, [r3, #0]
   d5642:	6a1b      	ldr	r3, [r3, #32]
   d5644:	9301      	str	r3, [sp, #4]
   d5646:	bd08      	pop	{r3, pc}
   d5648:	00030244 	.word	0x00030244

000d564c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d564c:	b508      	push	{r3, lr}
   d564e:	4b02      	ldr	r3, [pc, #8]	; (d5658 <spark_set_random_seed_from_cloud_handler+0xc>)
   d5650:	681b      	ldr	r3, [r3, #0]
   d5652:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5654:	9301      	str	r3, [sp, #4]
   d5656:	bd08      	pop	{r3, pc}
   d5658:	00030244 	.word	0x00030244

000d565c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d565c:	b508      	push	{r3, lr}
   d565e:	4b02      	ldr	r3, [pc, #8]	; (d5668 <network_connect+0xc>)
   d5660:	681b      	ldr	r3, [r3, #0]
   d5662:	685b      	ldr	r3, [r3, #4]
   d5664:	9301      	str	r3, [sp, #4]
   d5666:	bd08      	pop	{r3, pc}
   d5668:	00030240 	.word	0x00030240

000d566c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d566c:	b508      	push	{r3, lr}
   d566e:	4b02      	ldr	r3, [pc, #8]	; (d5678 <network_connecting+0xc>)
   d5670:	681b      	ldr	r3, [r3, #0]
   d5672:	689b      	ldr	r3, [r3, #8]
   d5674:	9301      	str	r3, [sp, #4]
   d5676:	bd08      	pop	{r3, pc}
   d5678:	00030240 	.word	0x00030240

000d567c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d567c:	b508      	push	{r3, lr}
   d567e:	4b02      	ldr	r3, [pc, #8]	; (d5688 <network_disconnect+0xc>)
   d5680:	681b      	ldr	r3, [r3, #0]
   d5682:	68db      	ldr	r3, [r3, #12]
   d5684:	9301      	str	r3, [sp, #4]
   d5686:	bd08      	pop	{r3, pc}
   d5688:	00030240 	.word	0x00030240

000d568c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d568c:	b508      	push	{r3, lr}
   d568e:	4b02      	ldr	r3, [pc, #8]	; (d5698 <network_ready+0xc>)
   d5690:	681b      	ldr	r3, [r3, #0]
   d5692:	691b      	ldr	r3, [r3, #16]
   d5694:	9301      	str	r3, [sp, #4]
   d5696:	bd08      	pop	{r3, pc}
   d5698:	00030240 	.word	0x00030240

000d569c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d569c:	b508      	push	{r3, lr}
   d569e:	4b02      	ldr	r3, [pc, #8]	; (d56a8 <network_on+0xc>)
   d56a0:	681b      	ldr	r3, [r3, #0]
   d56a2:	695b      	ldr	r3, [r3, #20]
   d56a4:	9301      	str	r3, [sp, #4]
   d56a6:	bd08      	pop	{r3, pc}
   d56a8:	00030240 	.word	0x00030240

000d56ac <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d56ac:	b508      	push	{r3, lr}
   d56ae:	4b02      	ldr	r3, [pc, #8]	; (d56b8 <network_off+0xc>)
   d56b0:	681b      	ldr	r3, [r3, #0]
   d56b2:	699b      	ldr	r3, [r3, #24]
   d56b4:	9301      	str	r3, [sp, #4]
   d56b6:	bd08      	pop	{r3, pc}
   d56b8:	00030240 	.word	0x00030240

000d56bc <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d56bc:	b508      	push	{r3, lr}
   d56be:	4b02      	ldr	r3, [pc, #8]	; (d56c8 <network_listen+0xc>)
   d56c0:	681b      	ldr	r3, [r3, #0]
   d56c2:	69db      	ldr	r3, [r3, #28]
   d56c4:	9301      	str	r3, [sp, #4]
   d56c6:	bd08      	pop	{r3, pc}
   d56c8:	00030240 	.word	0x00030240

000d56cc <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d56cc:	b508      	push	{r3, lr}
   d56ce:	4b02      	ldr	r3, [pc, #8]	; (d56d8 <network_listening+0xc>)
   d56d0:	681b      	ldr	r3, [r3, #0]
   d56d2:	6a1b      	ldr	r3, [r3, #32]
   d56d4:	9301      	str	r3, [sp, #4]
   d56d6:	bd08      	pop	{r3, pc}
   d56d8:	00030240 	.word	0x00030240

000d56dc <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d56dc:	b508      	push	{r3, lr}
   d56de:	4b02      	ldr	r3, [pc, #8]	; (d56e8 <network_set_listen_timeout+0xc>)
   d56e0:	681b      	ldr	r3, [r3, #0]
   d56e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d56e4:	9301      	str	r3, [sp, #4]
   d56e6:	bd08      	pop	{r3, pc}
   d56e8:	00030240 	.word	0x00030240

000d56ec <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d56ec:	b508      	push	{r3, lr}
   d56ee:	4b02      	ldr	r3, [pc, #8]	; (d56f8 <network_get_listen_timeout+0xc>)
   d56f0:	681b      	ldr	r3, [r3, #0]
   d56f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d56f4:	9301      	str	r3, [sp, #4]
   d56f6:	bd08      	pop	{r3, pc}
   d56f8:	00030240 	.word	0x00030240

000d56fc <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d56fc:	b508      	push	{r3, lr}
   d56fe:	4b02      	ldr	r3, [pc, #8]	; (d5708 <set_system_mode+0xc>)
   d5700:	681b      	ldr	r3, [r3, #0]
   d5702:	685b      	ldr	r3, [r3, #4]
   d5704:	9301      	str	r3, [sp, #4]
   d5706:	bd08      	pop	{r3, pc}
   d5708:	00030220 	.word	0x00030220

000d570c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d570c:	b508      	push	{r3, lr}
   d570e:	4b02      	ldr	r3, [pc, #8]	; (d5718 <system_delay_ms+0xc>)
   d5710:	681b      	ldr	r3, [r3, #0]
   d5712:	695b      	ldr	r3, [r3, #20]
   d5714:	9301      	str	r3, [sp, #4]
   d5716:	bd08      	pop	{r3, pc}
   d5718:	00030220 	.word	0x00030220

000d571c <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d571c:	b508      	push	{r3, lr}
   d571e:	4b02      	ldr	r3, [pc, #8]	; (d5728 <system_thread_set_state+0xc>)
   d5720:	681b      	ldr	r3, [r3, #0]
   d5722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5724:	9301      	str	r3, [sp, #4]
   d5726:	bd08      	pop	{r3, pc}
   d5728:	00030220 	.word	0x00030220

000d572c <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d572c:	b508      	push	{r3, lr}
   d572e:	4b02      	ldr	r3, [pc, #8]	; (d5738 <application_thread_current+0xc>)
   d5730:	681b      	ldr	r3, [r3, #0]
   d5732:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d5734:	9301      	str	r3, [sp, #4]
   d5736:	bd08      	pop	{r3, pc}
   d5738:	00030220 	.word	0x00030220

000d573c <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d573c:	b508      	push	{r3, lr}
   d573e:	4b02      	ldr	r3, [pc, #8]	; (d5748 <application_thread_invoke+0xc>)
   d5740:	681b      	ldr	r3, [r3, #0]
   d5742:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d5744:	9301      	str	r3, [sp, #4]
   d5746:	bd08      	pop	{r3, pc}
   d5748:	00030220 	.word	0x00030220

000d574c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d574c:	b508      	push	{r3, lr}
   d574e:	4b03      	ldr	r3, [pc, #12]	; (d575c <system_ctrl_set_app_request_handler+0x10>)
   d5750:	681b      	ldr	r3, [r3, #0]
   d5752:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d5756:	9301      	str	r3, [sp, #4]
   d5758:	bd08      	pop	{r3, pc}
   d575a:	0000      	.short	0x0000
   d575c:	00030220 	.word	0x00030220

000d5760 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d5760:	b508      	push	{r3, lr}
   d5762:	4b03      	ldr	r3, [pc, #12]	; (d5770 <system_ctrl_set_result+0x10>)
   d5764:	681b      	ldr	r3, [r3, #0]
   d5766:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d576a:	9301      	str	r3, [sp, #4]
   d576c:	bd08      	pop	{r3, pc}
   d576e:	0000      	.short	0x0000
   d5770:	00030220 	.word	0x00030220

000d5774 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d5774:	b508      	push	{r3, lr}
   d5776:	4b02      	ldr	r3, [pc, #8]	; (d5780 <malloc+0xc>)
   d5778:	681b      	ldr	r3, [r3, #0]
   d577a:	681b      	ldr	r3, [r3, #0]
   d577c:	9301      	str	r3, [sp, #4]
   d577e:	bd08      	pop	{r3, pc}
   d5780:	0003021c 	.word	0x0003021c

000d5784 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d5784:	b508      	push	{r3, lr}
   d5786:	4b02      	ldr	r3, [pc, #8]	; (d5790 <free+0xc>)
   d5788:	681b      	ldr	r3, [r3, #0]
   d578a:	685b      	ldr	r3, [r3, #4]
   d578c:	9301      	str	r3, [sp, #4]
   d578e:	bd08      	pop	{r3, pc}
   d5790:	0003021c 	.word	0x0003021c

000d5794 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d5794:	b508      	push	{r3, lr}
   d5796:	4b02      	ldr	r3, [pc, #8]	; (d57a0 <realloc+0xc>)
   d5798:	681b      	ldr	r3, [r3, #0]
   d579a:	689b      	ldr	r3, [r3, #8]
   d579c:	9301      	str	r3, [sp, #4]
   d579e:	bd08      	pop	{r3, pc}
   d57a0:	0003021c 	.word	0x0003021c

000d57a4 <snprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d57a4:	b508      	push	{r3, lr}
   d57a6:	4b02      	ldr	r3, [pc, #8]	; (d57b0 <snprintf+0xc>)
   d57a8:	681b      	ldr	r3, [r3, #0]
   d57aa:	69db      	ldr	r3, [r3, #28]
   d57ac:	9301      	str	r3, [sp, #4]
   d57ae:	bd08      	pop	{r3, pc}
   d57b0:	0003021c 	.word	0x0003021c

000d57b4 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d57b4:	b508      	push	{r3, lr}
   d57b6:	4b02      	ldr	r3, [pc, #8]	; (d57c0 <vsnprintf+0xc>)
   d57b8:	681b      	ldr	r3, [r3, #0]
   d57ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d57bc:	9301      	str	r3, [sp, #4]
   d57be:	bd08      	pop	{r3, pc}
   d57c0:	0003021c 	.word	0x0003021c

000d57c4 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d57c4:	b508      	push	{r3, lr}
   d57c6:	4b02      	ldr	r3, [pc, #8]	; (d57d0 <abort+0xc>)
   d57c8:	681b      	ldr	r3, [r3, #0]
   d57ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d57cc:	9301      	str	r3, [sp, #4]
   d57ce:	bd08      	pop	{r3, pc}
   d57d0:	0003021c 	.word	0x0003021c

000d57d4 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d57d4:	b508      	push	{r3, lr}
   d57d6:	4b02      	ldr	r3, [pc, #8]	; (d57e0 <_malloc_r+0xc>)
   d57d8:	681b      	ldr	r3, [r3, #0]
   d57da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d57dc:	9301      	str	r3, [sp, #4]
   d57de:	bd08      	pop	{r3, pc}
   d57e0:	0003021c 	.word	0x0003021c

000d57e4 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d57e4:	b508      	push	{r3, lr}
   d57e6:	4b02      	ldr	r3, [pc, #8]	; (d57f0 <__errno+0xc>)
   d57e8:	681b      	ldr	r3, [r3, #0]
   d57ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d57ec:	9301      	str	r3, [sp, #4]
   d57ee:	bd08      	pop	{r3, pc}
   d57f0:	0003021c 	.word	0x0003021c

000d57f4 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d57f4:	b508      	push	{r3, lr}
   d57f6:	4b02      	ldr	r3, [pc, #8]	; (d5800 <newlib_impure_ptr_callback+0xc>)
   d57f8:	681b      	ldr	r3, [r3, #0]
   d57fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d57fc:	9301      	str	r3, [sp, #4]
   d57fe:	bd08      	pop	{r3, pc}
   d5800:	0003021c 	.word	0x0003021c

000d5804 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5804:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d5806:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d5808:	4604      	mov	r4, r0
      if (_M_manager)
   d580a:	b113      	cbz	r3, d5812 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d580c:	2203      	movs	r2, #3
   d580e:	4601      	mov	r1, r0
   d5810:	4798      	blx	r3
    }
   d5812:	4620      	mov	r0, r4
   d5814:	bd10      	pop	{r4, pc}

000d5816 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d5816:	2300      	movs	r3, #0
   d5818:	6840      	ldr	r0, [r0, #4]
   d581a:	461a      	mov	r2, r3
   d581c:	f7ff bf1e 	b.w	d565c <network_connect>

000d5820 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d5820:	6840      	ldr	r0, [r0, #4]
   d5822:	2200      	movs	r2, #0
   d5824:	2102      	movs	r1, #2
   d5826:	f7ff bf29 	b.w	d567c <network_disconnect>

000d582a <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d582a:	2200      	movs	r2, #0
   d582c:	6840      	ldr	r0, [r0, #4]
   d582e:	4611      	mov	r1, r2
   d5830:	f7ff bf1c 	b.w	d566c <network_connecting>

000d5834 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d5834:	2200      	movs	r2, #0
   d5836:	6840      	ldr	r0, [r0, #4]
   d5838:	4611      	mov	r1, r2
   d583a:	f7ff bf27 	b.w	d568c <network_ready>

000d583e <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d583e:	2300      	movs	r3, #0
   d5840:	6840      	ldr	r0, [r0, #4]
   d5842:	461a      	mov	r2, r3
   d5844:	4619      	mov	r1, r3
   d5846:	f7ff bf29 	b.w	d569c <network_on>

000d584a <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d584a:	2300      	movs	r3, #0
   d584c:	6840      	ldr	r0, [r0, #4]
   d584e:	461a      	mov	r2, r3
   d5850:	4619      	mov	r1, r3
   d5852:	f7ff bf2b 	b.w	d56ac <network_off>

000d5856 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d5856:	6840      	ldr	r0, [r0, #4]
   d5858:	2200      	movs	r2, #0
   d585a:	f081 0101 	eor.w	r1, r1, #1
   d585e:	f7ff bf2d 	b.w	d56bc <network_listen>

000d5862 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5862:	6840      	ldr	r0, [r0, #4]
   d5864:	2200      	movs	r2, #0
   d5866:	f7ff bf39 	b.w	d56dc <network_set_listen_timeout>

000d586a <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d586a:	2200      	movs	r2, #0
   d586c:	6840      	ldr	r0, [r0, #4]
   d586e:	4611      	mov	r1, r2
   d5870:	f7ff bf3c 	b.w	d56ec <network_get_listen_timeout>

000d5874 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d5874:	2200      	movs	r2, #0
   d5876:	6840      	ldr	r0, [r0, #4]
   d5878:	4611      	mov	r1, r2
   d587a:	f7ff bf27 	b.w	d56cc <network_listening>

000d587e <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d587e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5882:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d5884:	b095      	sub	sp, #84	; 0x54
   d5886:	4616      	mov	r6, r2
   d5888:	460d      	mov	r5, r1
   d588a:	4607      	mov	r7, r0
    IPAddress addr;
   d588c:	f000 fa96 	bl	d5dbc <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d5890:	4621      	mov	r1, r4
   d5892:	2218      	movs	r2, #24
   d5894:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d5896:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d5898:	f003 fa9e 	bl	d8dd8 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d589c:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d589e:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d58a2:	4621      	mov	r1, r4
   d58a4:	466b      	mov	r3, sp
   d58a6:	aa0c      	add	r2, sp, #48	; 0x30
   d58a8:	4630      	mov	r0, r6
   d58aa:	f7ff feb7 	bl	d561c <netdb_getaddrinfo>
    if (!r) {
   d58ae:	4604      	mov	r4, r0
   d58b0:	2800      	cmp	r0, #0
   d58b2:	d146      	bne.n	d5942 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d58b4:	4602      	mov	r2, r0
   d58b6:	2101      	movs	r1, #1
   d58b8:	6868      	ldr	r0, [r5, #4]
   d58ba:	f7ff fee7 	bl	d568c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d58be:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d58c0:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d58c2:	4622      	mov	r2, r4
   d58c4:	6868      	ldr	r0, [r5, #4]
   d58c6:	f7ff fee1 	bl	d568c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d58ca:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d58cc:	4681      	mov	r9, r0
        bool ok = false;
   d58ce:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d58d0:	2e00      	cmp	r6, #0
   d58d2:	d036      	beq.n	d5942 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d58d4:	2900      	cmp	r1, #0
   d58d6:	d134      	bne.n	d5942 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d58d8:	6873      	ldr	r3, [r6, #4]
   d58da:	2b02      	cmp	r3, #2
   d58dc:	d003      	beq.n	d58e6 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d58de:	2b0a      	cmp	r3, #10
   d58e0:	d00b      	beq.n	d58fa <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d58e2:	69f6      	ldr	r6, [r6, #28]
   d58e4:	e7f4      	b.n	d58d0 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d58e6:	f1b8 0f00 	cmp.w	r8, #0
   d58ea:	d004      	beq.n	d58f6 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d58ec:	6971      	ldr	r1, [r6, #20]
   d58ee:	4638      	mov	r0, r7
   d58f0:	3104      	adds	r1, #4
   d58f2:	f000 fa90 	bl	d5e16 <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d58f6:	4641      	mov	r1, r8
   d58f8:	e7f3      	b.n	d58e2 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d58fa:	f1b9 0f00 	cmp.w	r9, #0
   d58fe:	d101      	bne.n	d5904 <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d5900:	4649      	mov	r1, r9
   d5902:	e7ee      	b.n	d58e2 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d5904:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d5906:	2210      	movs	r2, #16
   d5908:	a801      	add	r0, sp, #4
   d590a:	f003 fa65 	bl	d8dd8 <memset>
                    a.v = 6;
   d590e:	2306      	movs	r3, #6
   d5910:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5914:	ad01      	add	r5, sp, #4
   d5916:	f104 0308 	add.w	r3, r4, #8
   d591a:	3418      	adds	r4, #24
   d591c:	6818      	ldr	r0, [r3, #0]
   d591e:	6859      	ldr	r1, [r3, #4]
   d5920:	462a      	mov	r2, r5
   d5922:	c203      	stmia	r2!, {r0, r1}
   d5924:	3308      	adds	r3, #8
   d5926:	42a3      	cmp	r3, r4
   d5928:	4615      	mov	r5, r2
   d592a:	d1f7      	bne.n	d591c <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d592c:	a901      	add	r1, sp, #4
   d592e:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d5930:	ad07      	add	r5, sp, #28
   d5932:	f000 fa51 	bl	d5dd8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5936:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5938:	1d3c      	adds	r4, r7, #4
   d593a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d593c:	682b      	ldr	r3, [r5, #0]
   d593e:	7023      	strb	r3, [r4, #0]
   d5940:	e7de      	b.n	d5900 <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d5942:	9800      	ldr	r0, [sp, #0]
   d5944:	f7ff fe62 	bl	d560c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d5948:	4638      	mov	r0, r7
   d594a:	b015      	add	sp, #84	; 0x54
   d594c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d5950 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5950:	4b02      	ldr	r3, [pc, #8]	; (d595c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d5952:	4a03      	ldr	r2, [pc, #12]	; (d5960 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d5954:	601a      	str	r2, [r3, #0]
   d5956:	2200      	movs	r2, #0
   d5958:	605a      	str	r2, [r3, #4]

} // spark
   d595a:	4770      	bx	lr
   d595c:	2003e650 	.word	0x2003e650
   d5960:	000d9408 	.word	0x000d9408

000d5964 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d5964:	2200      	movs	r2, #0
   d5966:	6840      	ldr	r0, [r0, #4]
   d5968:	4611      	mov	r1, r2
   d596a:	f7ff be8f 	b.w	d568c <network_ready>

000d596e <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d596e:	2200      	movs	r2, #0
   d5970:	6840      	ldr	r0, [r0, #4]
   d5972:	4611      	mov	r1, r2
   d5974:	f7ff beaa 	b.w	d56cc <network_listening>

000d5978 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d5978:	2200      	movs	r2, #0
   d597a:	6840      	ldr	r0, [r0, #4]
   d597c:	4611      	mov	r1, r2
   d597e:	f7ff beb5 	b.w	d56ec <network_get_listen_timeout>

000d5982 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d5982:	6840      	ldr	r0, [r0, #4]
   d5984:	2200      	movs	r2, #0
   d5986:	f7ff bea9 	b.w	d56dc <network_set_listen_timeout>

000d598a <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d598a:	6840      	ldr	r0, [r0, #4]
   d598c:	2200      	movs	r2, #0
   d598e:	f081 0101 	eor.w	r1, r1, #1
   d5992:	f7ff be93 	b.w	d56bc <network_listen>

000d5996 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d5996:	2300      	movs	r3, #0
   d5998:	6840      	ldr	r0, [r0, #4]
   d599a:	461a      	mov	r2, r3
   d599c:	4619      	mov	r1, r3
   d599e:	f7ff be85 	b.w	d56ac <network_off>

000d59a2 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d59a2:	2300      	movs	r3, #0
   d59a4:	6840      	ldr	r0, [r0, #4]
   d59a6:	461a      	mov	r2, r3
   d59a8:	4619      	mov	r1, r3
   d59aa:	f7ff be77 	b.w	d569c <network_on>

000d59ae <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d59ae:	2200      	movs	r2, #0
   d59b0:	6840      	ldr	r0, [r0, #4]
   d59b2:	4611      	mov	r1, r2
   d59b4:	f7ff be5a 	b.w	d566c <network_connecting>

000d59b8 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d59b8:	6840      	ldr	r0, [r0, #4]
   d59ba:	2200      	movs	r2, #0
   d59bc:	2102      	movs	r1, #2
   d59be:	f7ff be5d 	b.w	d567c <network_disconnect>

000d59c2 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d59c2:	2300      	movs	r3, #0
   d59c4:	6840      	ldr	r0, [r0, #4]
   d59c6:	461a      	mov	r2, r3
   d59c8:	f7ff be48 	b.w	d565c <network_connect>

000d59cc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d59cc:	4b02      	ldr	r3, [pc, #8]	; (d59d8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d59ce:	2204      	movs	r2, #4
   d59d0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d59d2:	4a02      	ldr	r2, [pc, #8]	; (d59dc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d59d4:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d59d6:	4770      	bx	lr
   d59d8:	2003e658 	.word	0x2003e658
   d59dc:	000d943c 	.word	0x000d943c

000d59e0 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d59e0:	4770      	bx	lr

000d59e2 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d59e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d59e4:	4606      	mov	r6, r0
   d59e6:	4615      	mov	r5, r2
   d59e8:	460c      	mov	r4, r1
   d59ea:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d59ec:	42bc      	cmp	r4, r7
   d59ee:	d006      	beq.n	d59fe <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d59f0:	6833      	ldr	r3, [r6, #0]
   d59f2:	f814 1b01 	ldrb.w	r1, [r4], #1
   d59f6:	689b      	ldr	r3, [r3, #8]
   d59f8:	4630      	mov	r0, r6
   d59fa:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d59fc:	e7f6      	b.n	d59ec <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d59fe:	4628      	mov	r0, r5
   d5a00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5a02 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d5a02:	7c00      	ldrb	r0, [r0, #16]
   d5a04:	2200      	movs	r2, #0
   d5a06:	f7ff bce1 	b.w	d53cc <hal_i2c_write>

000d5a0a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d5a0a:	7c00      	ldrb	r0, [r0, #16]
   d5a0c:	2100      	movs	r1, #0
   d5a0e:	f7ff bce5 	b.w	d53dc <hal_i2c_available>

000d5a12 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d5a12:	7c00      	ldrb	r0, [r0, #16]
   d5a14:	2100      	movs	r1, #0
   d5a16:	f7ff bce9 	b.w	d53ec <hal_i2c_read>

000d5a1a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d5a1a:	7c00      	ldrb	r0, [r0, #16]
   d5a1c:	2100      	movs	r1, #0
   d5a1e:	f7ff bced 	b.w	d53fc <hal_i2c_peek>

000d5a22 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d5a22:	7c00      	ldrb	r0, [r0, #16]
   d5a24:	2100      	movs	r1, #0
   d5a26:	f7ff bcf1 	b.w	d540c <hal_i2c_flush>

000d5a2a <_ZN7TwoWireD0Ev>:
   d5a2a:	b510      	push	{r4, lr}
   d5a2c:	2114      	movs	r1, #20
   d5a2e:	4604      	mov	r4, r0
   d5a30:	f001 f893 	bl	d6b5a <_ZdlPvj>
   d5a34:	4620      	mov	r0, r4
   d5a36:	bd10      	pop	{r4, pc}

000d5a38 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d5a38:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5a3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5a3e:	4604      	mov	r4, r0
   d5a40:	4608      	mov	r0, r1
   d5a42:	2100      	movs	r1, #0
   d5a44:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d5a48:	4b03      	ldr	r3, [pc, #12]	; (d5a58 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d5a4a:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d5a4c:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d5a4e:	4611      	mov	r1, r2
   d5a50:	f7ff fcec 	bl	d542c <hal_i2c_init>
}
   d5a54:	4620      	mov	r0, r4
   d5a56:	bd10      	pop	{r4, pc}
   d5a58:	000d9470 	.word	0x000d9470

000d5a5c <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d5a5c:	2300      	movs	r3, #0
   d5a5e:	7c00      	ldrb	r0, [r0, #16]
   d5a60:	461a      	mov	r2, r3
   d5a62:	4619      	mov	r1, r3
   d5a64:	f7ff bc9a 	b.w	d539c <hal_i2c_begin>

000d5a68 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d5a68:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d5a6a:	2200      	movs	r2, #0
   d5a6c:	2314      	movs	r3, #20
   d5a6e:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d5a72:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   d5a76:	780b      	ldrb	r3, [r1, #0]
   d5a78:	f88d 3008 	strb.w	r3, [sp, #8]
   d5a7c:	684b      	ldr	r3, [r1, #4]
   d5a7e:	9303      	str	r3, [sp, #12]
   d5a80:	68cb      	ldr	r3, [r1, #12]
   d5a82:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   d5a84:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d5a86:	7a0b      	ldrb	r3, [r1, #8]
   d5a88:	9305      	str	r3, [sp, #20]
   d5a8a:	a901      	add	r1, sp, #4
   d5a8c:	f7ff fcd6 	bl	d543c <hal_i2c_request_ex>
}
   d5a90:	b007      	add	sp, #28
   d5a92:	f85d fb04 	ldr.w	pc, [sp], #4

000d5a96 <_ZN7TwoWire11requestFromEhjh>:
{
   d5a96:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d5a98:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d5a9a:	f88d 1000 	strb.w	r1, [sp]
   d5a9e:	f04f 0164 	mov.w	r1, #100	; 0x64
   d5aa2:	9103      	str	r1, [sp, #12]
   d5aa4:	bf18      	it	ne
   d5aa6:	2301      	movne	r3, #1
   d5aa8:	4669      	mov	r1, sp
    size_ = size;
   d5aaa:	9201      	str	r2, [sp, #4]
   d5aac:	f88d 3008 	strb.w	r3, [sp, #8]
   d5ab0:	f7ff ffda 	bl	d5a68 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d5ab4:	b005      	add	sp, #20
   d5ab6:	f85d fb04 	ldr.w	pc, [sp], #4

000d5aba <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   d5aba:	2301      	movs	r3, #1
   d5abc:	f7ff bfeb 	b.w	d5a96 <_ZN7TwoWire11requestFromEhjh>

000d5ac0 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d5ac0:	7c00      	ldrb	r0, [r0, #16]
   d5ac2:	2200      	movs	r2, #0
   d5ac4:	f7ff bc72 	b.w	d53ac <hal_i2c_begin_transmission>

000d5ac8 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   d5ac8:	b2c9      	uxtb	r1, r1
   d5aca:	f7ff bff9 	b.w	d5ac0 <_ZN7TwoWire17beginTransmissionEh>

000d5ace <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d5ace:	7c00      	ldrb	r0, [r0, #16]
   d5ad0:	2200      	movs	r2, #0
   d5ad2:	f7ff bc73 	b.w	d53bc <hal_i2c_end_transmission>

000d5ad6 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   d5ad6:	2101      	movs	r1, #1
   d5ad8:	f7ff bff9 	b.w	d5ace <_ZN7TwoWire15endTransmissionEh>

000d5adc <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d5adc:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5ade:	6883      	ldr	r3, [r0, #8]
   d5ae0:	4604      	mov	r4, r0
   d5ae2:	b90b      	cbnz	r3, d5ae8 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d5ae4:	f001 f83d 	bl	d6b62 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5ae8:	68c3      	ldr	r3, [r0, #12]
   d5aea:	4798      	blx	r3
      if (_M_manager)
   d5aec:	68a3      	ldr	r3, [r4, #8]
   d5aee:	b11b      	cbz	r3, d5af8 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5af0:	2203      	movs	r2, #3
   d5af2:	4621      	mov	r1, r4
   d5af4:	4620      	mov	r0, r4
   d5af6:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d5af8:	4620      	mov	r0, r4
   d5afa:	2110      	movs	r1, #16
}
   d5afc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d5b00:	f001 b82b 	b.w	d6b5a <_ZdlPvj>

000d5b04 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d5b04:	4770      	bx	lr

000d5b06 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5b06:	7441      	strb	r1, [r0, #17]
}
   d5b08:	4770      	bx	lr

000d5b0a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d5b0a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d5b0c:	7c00      	ldrb	r0, [r0, #16]
   d5b0e:	f7ff fd15 	bl	d553c <hal_usart_available_data_for_write>
}
   d5b12:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5b16:	bd08      	pop	{r3, pc}

000d5b18 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d5b18:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d5b1a:	7c00      	ldrb	r0, [r0, #16]
   d5b1c:	f7ff fce6 	bl	d54ec <hal_usart_available>
}
   d5b20:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5b24:	bd08      	pop	{r3, pc}

000d5b26 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d5b26:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d5b28:	7c00      	ldrb	r0, [r0, #16]
   d5b2a:	f7ff fcef 	bl	d550c <hal_usart_peek>
}
   d5b2e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5b32:	bd08      	pop	{r3, pc}

000d5b34 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d5b34:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d5b36:	7c00      	ldrb	r0, [r0, #16]
   d5b38:	f7ff fce0 	bl	d54fc <hal_usart_read>
}
   d5b3c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5b40:	bd08      	pop	{r3, pc}

000d5b42 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d5b42:	7c00      	ldrb	r0, [r0, #16]
   d5b44:	f7ff bcea 	b.w	d551c <hal_usart_flush>

000d5b48 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d5b48:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d5b4a:	7c45      	ldrb	r5, [r0, #17]
{
   d5b4c:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d5b4e:	b12d      	cbz	r5, d5b5c <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d5b50:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d5b52:	b003      	add	sp, #12
   d5b54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d5b58:	f7ff bcc0 	b.w	d54dc <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d5b5c:	7c00      	ldrb	r0, [r0, #16]
   d5b5e:	9101      	str	r1, [sp, #4]
   d5b60:	f7ff fcec 	bl	d553c <hal_usart_available_data_for_write>
   d5b64:	2800      	cmp	r0, #0
   d5b66:	9901      	ldr	r1, [sp, #4]
   d5b68:	dcf2      	bgt.n	d5b50 <_ZN11USARTSerial5writeEh+0x8>
}
   d5b6a:	4628      	mov	r0, r5
   d5b6c:	b003      	add	sp, #12
   d5b6e:	bd30      	pop	{r4, r5, pc}

000d5b70 <_ZN11USARTSerialD0Ev>:
   d5b70:	b510      	push	{r4, lr}
   d5b72:	2114      	movs	r1, #20
   d5b74:	4604      	mov	r4, r0
   d5b76:	f000 fff0 	bl	d6b5a <_ZdlPvj>
   d5b7a:	4620      	mov	r0, r4
   d5b7c:	bd10      	pop	{r4, pc}
	...

000d5b80 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d5b80:	b510      	push	{r4, lr}
   d5b82:	f04f 0c00 	mov.w	ip, #0
   d5b86:	4604      	mov	r4, r0
   d5b88:	4608      	mov	r0, r1
   d5b8a:	4611      	mov	r1, r2
   d5b8c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5b90:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d5b94:	4a04      	ldr	r2, [pc, #16]	; (d5ba8 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d5b96:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d5b98:	2201      	movs	r2, #1
  _serial = serial;
   d5b9a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d5b9c:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d5b9e:	461a      	mov	r2, r3
   d5ba0:	f7ff fc94 	bl	d54cc <hal_usart_init>
}
   d5ba4:	4620      	mov	r0, r4
   d5ba6:	bd10      	pop	{r4, pc}
   d5ba8:	000d9498 	.word	0x000d9498

000d5bac <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d5bac:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d5bae:	4c0e      	ldr	r4, [pc, #56]	; (d5be8 <_Z22__fetch_global_Serial1v+0x3c>)
   d5bb0:	7821      	ldrb	r1, [r4, #0]
   d5bb2:	f3bf 8f5b 	dmb	ish
   d5bb6:	f011 0101 	ands.w	r1, r1, #1
   d5bba:	d112      	bne.n	d5be2 <_Z22__fetch_global_Serial1v+0x36>
   d5bbc:	4620      	mov	r0, r4
   d5bbe:	9101      	str	r1, [sp, #4]
   d5bc0:	f7fe fa6f 	bl	d40a2 <__cxa_guard_acquire>
   d5bc4:	9901      	ldr	r1, [sp, #4]
   d5bc6:	b160      	cbz	r0, d5be2 <_Z22__fetch_global_Serial1v+0x36>
   d5bc8:	4a08      	ldr	r2, [pc, #32]	; (d5bec <_Z22__fetch_global_Serial1v+0x40>)
   d5bca:	4b09      	ldr	r3, [pc, #36]	; (d5bf0 <_Z22__fetch_global_Serial1v+0x44>)
   d5bcc:	4809      	ldr	r0, [pc, #36]	; (d5bf4 <_Z22__fetch_global_Serial1v+0x48>)
   d5bce:	f7ff ffd7 	bl	d5b80 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d5bd2:	4620      	mov	r0, r4
   d5bd4:	f7fe fa6a 	bl	d40ac <__cxa_guard_release>
   d5bd8:	4a07      	ldr	r2, [pc, #28]	; (d5bf8 <_Z22__fetch_global_Serial1v+0x4c>)
   d5bda:	4908      	ldr	r1, [pc, #32]	; (d5bfc <_Z22__fetch_global_Serial1v+0x50>)
   d5bdc:	4805      	ldr	r0, [pc, #20]	; (d5bf4 <_Z22__fetch_global_Serial1v+0x48>)
   d5bde:	f000 ffb7 	bl	d6b50 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d5be2:	4804      	ldr	r0, [pc, #16]	; (d5bf4 <_Z22__fetch_global_Serial1v+0x48>)
   d5be4:	b002      	add	sp, #8
   d5be6:	bd10      	pop	{r4, pc}
   d5be8:	2003e660 	.word	0x2003e660
   d5bec:	2003e664 	.word	0x2003e664
   d5bf0:	2003e6e8 	.word	0x2003e6e8
   d5bf4:	2003e76c 	.word	0x2003e76c
   d5bf8:	2003e4a4 	.word	0x2003e4a4
   d5bfc:	000d5b05 	.word	0x000d5b05

000d5c00 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d5c00:	680b      	ldr	r3, [r1, #0]
   d5c02:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d5c04:	b113      	cbz	r3, d5c0c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d5c06:	685a      	ldr	r2, [r3, #4]
   d5c08:	3201      	adds	r2, #1
   d5c0a:	605a      	str	r2, [r3, #4]
	  _M_pi->_M_add_ref_copy();
      }
   d5c0c:	4770      	bx	lr

000d5c0e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   d5c0e:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   d5c10:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   d5c12:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   d5c14:	b17c      	cbz	r4, d5c36 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   d5c16:	6863      	ldr	r3, [r4, #4]
   d5c18:	3b01      	subs	r3, #1
   d5c1a:	6063      	str	r3, [r4, #4]
   d5c1c:	b95b      	cbnz	r3, d5c36 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   d5c1e:	6823      	ldr	r3, [r4, #0]
   d5c20:	4620      	mov	r0, r4
   d5c22:	689b      	ldr	r3, [r3, #8]
   d5c24:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d5c26:	68a3      	ldr	r3, [r4, #8]
   d5c28:	3b01      	subs	r3, #1
   d5c2a:	60a3      	str	r3, [r4, #8]
   d5c2c:	b91b      	cbnz	r3, d5c36 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d5c2e:	6823      	ldr	r3, [r4, #0]
   d5c30:	4620      	mov	r0, r4
   d5c32:	68db      	ldr	r3, [r3, #12]
   d5c34:	4798      	blx	r3
      }
   d5c36:	4628      	mov	r0, r5
   d5c38:	bd38      	pop	{r3, r4, r5, pc}

000d5c3a <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5c3a:	7441      	strb	r1, [r0, #17]
}
   d5c3c:	4770      	bx	lr

000d5c3e <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5c3e:	4770      	bx	lr

000d5c40 <_ZN9USBSerial4readEv>:
{
   d5c40:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d5c42:	2100      	movs	r1, #0
   d5c44:	7c00      	ldrb	r0, [r0, #16]
   d5c46:	f7ff fb91 	bl	d536c <HAL_USB_USART_Receive_Data>
}
   d5c4a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5c4e:	bd08      	pop	{r3, pc}

000d5c50 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d5c50:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d5c52:	2101      	movs	r1, #1
   d5c54:	7c00      	ldrb	r0, [r0, #16]
   d5c56:	f7ff fb89 	bl	d536c <HAL_USB_USART_Receive_Data>
}
   d5c5a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5c5e:	bd08      	pop	{r3, pc}

000d5c60 <_ZN9USBSerial17availableForWriteEv>:
{
   d5c60:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d5c62:	7c00      	ldrb	r0, [r0, #16]
   d5c64:	f7ff fb7a 	bl	d535c <HAL_USB_USART_Available_Data_For_Write>
}
   d5c68:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5c6c:	bd08      	pop	{r3, pc}

000d5c6e <_ZN9USBSerial9availableEv>:
{
   d5c6e:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d5c70:	7c00      	ldrb	r0, [r0, #16]
   d5c72:	f7ff fb6b 	bl	d534c <HAL_USB_USART_Available_Data>
}
   d5c76:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5c7a:	bd08      	pop	{r3, pc}

000d5c7c <_ZN9USBSerial5writeEh>:
{
   d5c7c:	b513      	push	{r0, r1, r4, lr}
   d5c7e:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5c80:	7c00      	ldrb	r0, [r0, #16]
{
   d5c82:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5c84:	f7ff fb6a 	bl	d535c <HAL_USB_USART_Available_Data_For_Write>
   d5c88:	2800      	cmp	r0, #0
   d5c8a:	9901      	ldr	r1, [sp, #4]
   d5c8c:	dc01      	bgt.n	d5c92 <_ZN9USBSerial5writeEh+0x16>
   d5c8e:	7c60      	ldrb	r0, [r4, #17]
   d5c90:	b120      	cbz	r0, d5c9c <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d5c92:	7c20      	ldrb	r0, [r4, #16]
   d5c94:	f7ff fb72 	bl	d537c <HAL_USB_USART_Send_Data>
   d5c98:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d5c9c:	b002      	add	sp, #8
   d5c9e:	bd10      	pop	{r4, pc}

000d5ca0 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d5ca0:	7c00      	ldrb	r0, [r0, #16]
   d5ca2:	f7ff bb73 	b.w	d538c <HAL_USB_USART_Flush_Data>

000d5ca6 <_ZN9USBSerialD0Ev>:
   d5ca6:	b510      	push	{r4, lr}
   d5ca8:	2114      	movs	r1, #20
   d5caa:	4604      	mov	r4, r0
   d5cac:	f000 ff55 	bl	d6b5a <_ZdlPvj>
   d5cb0:	4620      	mov	r0, r4
   d5cb2:	bd10      	pop	{r4, pc}

000d5cb4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5cb4:	b510      	push	{r4, lr}
   d5cb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5cba:	4604      	mov	r4, r0
   d5cbc:	4608      	mov	r0, r1
   d5cbe:	2100      	movs	r1, #0
   d5cc0:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d5cc4:	4b04      	ldr	r3, [pc, #16]	; (d5cd8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5cc6:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d5cc8:	2301      	movs	r3, #1
  _serial = serial;
   d5cca:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d5ccc:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d5cce:	4611      	mov	r1, r2
   d5cd0:	f7ff fb2c 	bl	d532c <HAL_USB_USART_Init>
}
   d5cd4:	4620      	mov	r0, r4
   d5cd6:	bd10      	pop	{r4, pc}
   d5cd8:	000d94c8 	.word	0x000d94c8

000d5cdc <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d5cdc:	7c00      	ldrb	r0, [r0, #16]
   d5cde:	2200      	movs	r2, #0
   d5ce0:	f7ff bb2c 	b.w	d533c <HAL_USB_USART_Begin>

000d5ce4 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5ce4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d5ce6:	2214      	movs	r2, #20
{
   d5ce8:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d5cea:	2100      	movs	r1, #0
   d5cec:	f003 f874 	bl	d8dd8 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d5cf0:	4620      	mov	r0, r4
   d5cf2:	bd10      	pop	{r4, pc}

000d5cf4 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d5cf4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5cf6:	4c10      	ldr	r4, [pc, #64]	; (d5d38 <_Z16_fetch_usbserialv+0x44>)
{
   d5cf8:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d5cfa:	a803      	add	r0, sp, #12
   d5cfc:	f7ff fff2 	bl	d5ce4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5d00:	7821      	ldrb	r1, [r4, #0]
   d5d02:	f3bf 8f5b 	dmb	ish
   d5d06:	f011 0101 	ands.w	r1, r1, #1
   d5d0a:	d111      	bne.n	d5d30 <_Z16_fetch_usbserialv+0x3c>
   d5d0c:	4620      	mov	r0, r4
   d5d0e:	9101      	str	r1, [sp, #4]
   d5d10:	f7fe f9c7 	bl	d40a2 <__cxa_guard_acquire>
   d5d14:	9901      	ldr	r1, [sp, #4]
   d5d16:	b158      	cbz	r0, d5d30 <_Z16_fetch_usbserialv+0x3c>
   d5d18:	aa03      	add	r2, sp, #12
   d5d1a:	4808      	ldr	r0, [pc, #32]	; (d5d3c <_Z16_fetch_usbserialv+0x48>)
   d5d1c:	f7ff ffca 	bl	d5cb4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d5d20:	4620      	mov	r0, r4
   d5d22:	f7fe f9c3 	bl	d40ac <__cxa_guard_release>
   d5d26:	4a06      	ldr	r2, [pc, #24]	; (d5d40 <_Z16_fetch_usbserialv+0x4c>)
   d5d28:	4906      	ldr	r1, [pc, #24]	; (d5d44 <_Z16_fetch_usbserialv+0x50>)
   d5d2a:	4804      	ldr	r0, [pc, #16]	; (d5d3c <_Z16_fetch_usbserialv+0x48>)
   d5d2c:	f000 ff10 	bl	d6b50 <__aeabi_atexit>
	return _usbserial;
}
   d5d30:	4802      	ldr	r0, [pc, #8]	; (d5d3c <_Z16_fetch_usbserialv+0x48>)
   d5d32:	b008      	add	sp, #32
   d5d34:	bd10      	pop	{r4, pc}
   d5d36:	bf00      	nop
   d5d38:	2003e780 	.word	0x2003e780
   d5d3c:	2003e784 	.word	0x2003e784
   d5d40:	2003e4a4 	.word	0x2003e4a4
   d5d44:	000d5c3f 	.word	0x000d5c3f

000d5d48 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5d48:	4770      	bx	lr

000d5d4a <_ZN9IPAddressD0Ev>:
   d5d4a:	b510      	push	{r4, lr}
   d5d4c:	2118      	movs	r1, #24
   d5d4e:	4604      	mov	r4, r0
   d5d50:	f000 ff03 	bl	d6b5a <_ZdlPvj>
   d5d54:	4620      	mov	r0, r4
   d5d56:	bd10      	pop	{r4, pc}

000d5d58 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5d58:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5d5a:	7d03      	ldrb	r3, [r0, #20]
   d5d5c:	2b06      	cmp	r3, #6
{
   d5d5e:	b08d      	sub	sp, #52	; 0x34
   d5d60:	460e      	mov	r6, r1
   d5d62:	f100 0704 	add.w	r7, r0, #4
   d5d66:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d5d6a:	d012      	beq.n	d5d92 <_ZNK9IPAddress7printToER5Print+0x3a>
   d5d6c:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d5d70:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5d74:	220a      	movs	r2, #10
   d5d76:	4630      	mov	r0, r6
   d5d78:	f000 fc07 	bl	d658a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5d7c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5d7e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d5d80:	d019      	beq.n	d5db6 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d5d82:	2c00      	cmp	r4, #0
   d5d84:	d0f4      	beq.n	d5d70 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d5d86:	212e      	movs	r1, #46	; 0x2e
   d5d88:	4630      	mov	r0, r6
   d5d8a:	f000 fbe5 	bl	d6558 <_ZN5Print5printEc>
   d5d8e:	4404      	add	r4, r0
   d5d90:	e7ee      	b.n	d5d70 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5d92:	232f      	movs	r3, #47	; 0x2f
   d5d94:	466a      	mov	r2, sp
   d5d96:	4639      	mov	r1, r7
   d5d98:	200a      	movs	r0, #10
		buf[0] = 0;
   d5d9a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5d9e:	f7ff fbd5 	bl	d554c <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d5da2:	4668      	mov	r0, sp
   d5da4:	f003 f861 	bl	d8e6a <strlen>
   d5da8:	6833      	ldr	r3, [r6, #0]
   d5daa:	4602      	mov	r2, r0
   d5dac:	68db      	ldr	r3, [r3, #12]
   d5dae:	4669      	mov	r1, sp
   d5db0:	4630      	mov	r0, r6
   d5db2:	4798      	blx	r3
   d5db4:	4604      	mov	r4, r0
    }
    return n;
}
   d5db6:	4620      	mov	r0, r4
   d5db8:	b00d      	add	sp, #52	; 0x34
   d5dba:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5dbc <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d5dbc:	b510      	push	{r4, lr}
   d5dbe:	4b05      	ldr	r3, [pc, #20]	; (d5dd4 <_ZN9IPAddressC1Ev+0x18>)
   d5dc0:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5dc2:	2211      	movs	r2, #17
   d5dc4:	f840 3b04 	str.w	r3, [r0], #4
   d5dc8:	2100      	movs	r1, #0
   d5dca:	f003 f805 	bl	d8dd8 <memset>
}
   d5dce:	4620      	mov	r0, r4
   d5dd0:	bd10      	pop	{r4, pc}
   d5dd2:	bf00      	nop
   d5dd4:	000d94f8 	.word	0x000d94f8

000d5dd8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d5dd8:	4603      	mov	r3, r0
   d5dda:	4a07      	ldr	r2, [pc, #28]	; (d5df8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5ddc:	b510      	push	{r4, lr}
   d5dde:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d5de2:	f101 0210 	add.w	r2, r1, #16
   d5de6:	f851 4b04 	ldr.w	r4, [r1], #4
   d5dea:	f843 4b04 	str.w	r4, [r3], #4
   d5dee:	4291      	cmp	r1, r2
   d5df0:	d1f9      	bne.n	d5de6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d5df2:	780a      	ldrb	r2, [r1, #0]
   d5df4:	701a      	strb	r2, [r3, #0]
}
   d5df6:	bd10      	pop	{r4, pc}
   d5df8:	000d94f8 	.word	0x000d94f8

000d5dfc <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d5dfc:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d5dfe:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d5e02:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d5e06:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d5e0a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d5e0e:	2304      	movs	r3, #4
   d5e10:	6041      	str	r1, [r0, #4]
   d5e12:	7503      	strb	r3, [r0, #20]
}
   d5e14:	bd10      	pop	{r4, pc}

000d5e16 <_ZN9IPAddressaSEPKh>:
{
   d5e16:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d5e18:	78cb      	ldrb	r3, [r1, #3]
   d5e1a:	9300      	str	r3, [sp, #0]
   d5e1c:	788b      	ldrb	r3, [r1, #2]
   d5e1e:	784a      	ldrb	r2, [r1, #1]
   d5e20:	7809      	ldrb	r1, [r1, #0]
   d5e22:	f7ff ffeb 	bl	d5dfc <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d5e26:	b002      	add	sp, #8
   d5e28:	bd10      	pop	{r4, pc}

000d5e2a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d5e2a:	4770      	bx	lr

000d5e2c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d5e2c:	2000      	movs	r0, #0
   d5e2e:	4770      	bx	lr

000d5e30 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d5e30:	b510      	push	{r4, lr}
   d5e32:	2110      	movs	r1, #16
   d5e34:	4604      	mov	r4, r0
   d5e36:	f000 fe90 	bl	d6b5a <_ZdlPvj>
   d5e3a:	4620      	mov	r0, r4
   d5e3c:	bd10      	pop	{r4, pc}

000d5e3e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d5e3e:	b508      	push	{r3, lr}
      { delete this; }
   d5e40:	f7ff fff6 	bl	d5e30 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d5e44:	bd08      	pop	{r3, pc}

000d5e46 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d5e46:	b530      	push	{r4, r5, lr}
        type_(type) {
   d5e48:	2200      	movs	r2, #0
   d5e4a:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d5e4e:	6002      	str	r2, [r0, #0]
   d5e50:	8084      	strh	r4, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5e52:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d5e54:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d5e56:	680c      	ldr	r4, [r1, #0]
   d5e58:	8085      	strh	r5, [r0, #4]
   d5e5a:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d5e5c:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d5e5e:	bd30      	pop	{r4, r5, pc}

000d5e60 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d5e60:	b510      	push	{r4, lr}
   d5e62:	4604      	mov	r4, r0
    free((void*)msg_);
   d5e64:	6800      	ldr	r0, [r0, #0]
   d5e66:	f7ff fc8d 	bl	d5784 <free>
}
   d5e6a:	4620      	mov	r0, r4
   d5e6c:	bd10      	pop	{r4, pc}

000d5e6e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d5e6e:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d5e70:	68c4      	ldr	r4, [r0, #12]
   d5e72:	b1f4      	cbz	r4, d5eb2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d5e74:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d5e76:	2b02      	cmp	r3, #2
   d5e78:	d103      	bne.n	d5e82 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d5e7a:	f104 000c 	add.w	r0, r4, #12
   d5e7e:	f7ff ffef 	bl	d5e60 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d5e82:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d5e84:	b135      	cbz	r5, d5e94 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   d5e86:	4628      	mov	r0, r5
   d5e88:	f7ff fcbc 	bl	d5804 <_ZNSt14_Function_baseD1Ev>
   d5e8c:	2110      	movs	r1, #16
   d5e8e:	4628      	mov	r0, r5
   d5e90:	f000 fe63 	bl	d6b5a <_ZdlPvj>
   d5e94:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d5e96:	b135      	cbz	r5, d5ea6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d5e98:	4628      	mov	r0, r5
   d5e9a:	f7ff fcb3 	bl	d5804 <_ZNSt14_Function_baseD1Ev>
   d5e9e:	2110      	movs	r1, #16
   d5ea0:	4628      	mov	r0, r5
   d5ea2:	f000 fe5a 	bl	d6b5a <_ZdlPvj>
   d5ea6:	4620      	mov	r0, r4
   d5ea8:	2114      	movs	r1, #20
   d5eaa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d5eae:	f000 be54 	b.w	d6b5a <_ZdlPvj>
   d5eb2:	bd38      	pop	{r3, r4, r5, pc}

000d5eb4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d5eb4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
		     element_type* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5eb6:	460e      	mov	r6, r1
   d5eb8:	4604      	mov	r4, r0
   d5eba:	f856 3b04 	ldr.w	r3, [r6], #4
   d5ebe:	9300      	str	r3, [sp, #0]
   d5ec0:	460d      	mov	r5, r1
   d5ec2:	a801      	add	r0, sp, #4
   d5ec4:	4631      	mov	r1, r6
   d5ec6:	f7ff fe9b 	bl	d5c00 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d5eca:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d5ecc:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d5ece:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d5ed0:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d5ed2:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d5ed4:	2300      	movs	r3, #0
   d5ed6:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d5ed8:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d5eda:	f7ff fe98 	bl	d5c0e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5ede:	4630      	mov	r0, r6
   d5ee0:	f7ff fe95 	bl	d5c0e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d5ee4:	4628      	mov	r0, r5
   d5ee6:	2108      	movs	r1, #8
   d5ee8:	f000 fe37 	bl	d6b5a <_ZdlPvj>
        return p;
    }
   d5eec:	4620      	mov	r0, r4
   d5eee:	b002      	add	sp, #8
   d5ef0:	bd70      	pop	{r4, r5, r6, pc}

000d5ef2 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   d5ef2:	b513      	push	{r0, r1, r4, lr}
   d5ef4:	460b      	mov	r3, r1
   d5ef6:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5ef8:	e9d0 0100 	ldrd	r0, r1, [r0]
   d5efc:	466c      	mov	r4, sp
   d5efe:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d5f02:	e893 0003 	ldmia.w	r3, {r0, r1}
   d5f06:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d5f0a:	e894 0003 	ldmia.w	r4, {r0, r1}
   d5f0e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d5f12:	b002      	add	sp, #8
   d5f14:	bd10      	pop	{r4, pc}

000d5f16 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   d5f16:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d5f18:	b510      	push	{r4, lr}
      if (_M_empty())
   d5f1a:	b90a      	cbnz	r2, d5f20 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d5f1c:	f000 fe21 	bl	d6b62 <_ZSt25__throw_bad_function_callv>
    }
   d5f20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5f24:	68c3      	ldr	r3, [r0, #12]
   d5f26:	4718      	bx	r3

000d5f28 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d5f28:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d5f2a:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d5f2c:	f100 0110 	add.w	r1, r0, #16
   d5f30:	f7ff fff1 	bl	d5f16 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d5f34:	bd08      	pop	{r3, pc}

000d5f36 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d5f36:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d5f38:	b510      	push	{r4, lr}
      if (_M_empty())
   d5f3a:	b90a      	cbnz	r2, d5f40 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d5f3c:	f000 fe11 	bl	d6b62 <_ZSt25__throw_bad_function_callv>
    }
   d5f40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5f44:	68c3      	ldr	r3, [r0, #12]
   d5f46:	4718      	bx	r3

000d5f48 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d5f48:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d5f4a:	6800      	ldr	r0, [r0, #0]
   d5f4c:	f100 0110 	add.w	r1, r0, #16
   d5f50:	f7ff fff1 	bl	d5f36 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d5f54:	bd08      	pop	{r3, pc}
	...

000d5f58 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d5f58:	b538      	push	{r3, r4, r5, lr}
   d5f5a:	2300      	movs	r3, #0
   d5f5c:	4604      	mov	r4, r0
   d5f5e:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5f60:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d5f62:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5f64:	f7fe f897 	bl	d4096 <_Znwj>
   d5f68:	b128      	cbz	r0, d5f76 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d5f6a:	2301      	movs	r3, #1
   d5f6c:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d5f70:	4b02      	ldr	r3, [pc, #8]	; (d5f7c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d5f72:	6003      	str	r3, [r0, #0]
   d5f74:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5f76:	6020      	str	r0, [r4, #0]
	}
   d5f78:	4620      	mov	r0, r4
   d5f7a:	bd38      	pop	{r3, r4, r5, pc}
   d5f7c:	000d950c 	.word	0x000d950c

000d5f80 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d5f80:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d5f82:	2300      	movs	r3, #0
   d5f84:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d5f86:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d5f88:	4604      	mov	r4, r0
   d5f8a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d5f8c:	b12b      	cbz	r3, d5f9a <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d5f8e:	2202      	movs	r2, #2
   d5f90:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d5f92:	68eb      	ldr	r3, [r5, #12]
   d5f94:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d5f96:	68ab      	ldr	r3, [r5, #8]
   d5f98:	60a3      	str	r3, [r4, #8]
    }
   d5f9a:	4620      	mov	r0, r4
   d5f9c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5fa0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d5fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5fa2:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d5fa4:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d5fa6:	4668      	mov	r0, sp
   d5fa8:	f7ff ff4d 	bl	d5e46 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d5fac:	f04f 0302 	mov.w	r3, #2
   d5fb0:	e8d4 2f4f 	ldrexb	r2, [r4]
   d5fb4:	2a00      	cmp	r2, #0
   d5fb6:	d103      	bne.n	d5fc0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d5fb8:	e8c4 3f41 	strexb	r1, r3, [r4]
   d5fbc:	2900      	cmp	r1, #0
   d5fbe:	d1f7      	bne.n	d5fb0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d5fc0:	d125      	bne.n	d600e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d5fc2:	f104 050c 	add.w	r5, r4, #12
   d5fc6:	4669      	mov	r1, sp
   d5fc8:	4628      	mov	r0, r5
   d5fca:	f7ff ff3c 	bl	d5e46 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d5fce:	f3bf 8f5b 	dmb	ish
   d5fd2:	2301      	movs	r3, #1
   d5fd4:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d5fd6:	2000      	movs	r0, #0
   d5fd8:	f104 0308 	add.w	r3, r4, #8
   d5fdc:	f3bf 8f5b 	dmb	ish
   d5fe0:	e853 6f00 	ldrex	r6, [r3]
   d5fe4:	e843 0200 	strex	r2, r0, [r3]
   d5fe8:	2a00      	cmp	r2, #0
   d5fea:	d1f9      	bne.n	d5fe0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d5fec:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d5ff0:	b16e      	cbz	r6, d600e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d5ff2:	f7ff fb9b 	bl	d572c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d5ff6:	b178      	cbz	r0, d6018 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d5ff8:	4629      	mov	r1, r5
   d5ffa:	4630      	mov	r0, r6
   d5ffc:	f7ff ff8b 	bl	d5f16 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d6000:	4630      	mov	r0, r6
   d6002:	f7ff fbff 	bl	d5804 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d6006:	2110      	movs	r1, #16
   d6008:	4630      	mov	r0, r6
   d600a:	f000 fda6 	bl	d6b5a <_ZdlPvj>
        p_->setError(std::move(error));
   d600e:	4668      	mov	r0, sp
   d6010:	f7ff ff26 	bl	d5e60 <_ZN8particle5ErrorD1Ev>
    }
   d6014:	b009      	add	sp, #36	; 0x24
   d6016:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d6018:	4631      	mov	r1, r6
   d601a:	a802      	add	r0, sp, #8
   d601c:	f7ff ffb0 	bl	d5f80 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d6020:	68e0      	ldr	r0, [r4, #12]
   d6022:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d6026:	b108      	cbz	r0, d602c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d6028:	f002 ff02 	bl	d8e30 <strdup>
        type_(type) {
   d602c:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d602e:	2010      	movs	r0, #16
   d6030:	f8ad 501c 	strh.w	r5, [sp, #28]
   d6034:	f7fe f82f 	bl	d4096 <_Znwj>
   d6038:	4605      	mov	r5, r0
   d603a:	b1e8      	cbz	r0, d6078 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d603c:	2700      	movs	r7, #0
   d603e:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6040:	2018      	movs	r0, #24
   d6042:	f7fe f828 	bl	d4096 <_Znwj>
   d6046:	4604      	mov	r4, r0
   d6048:	b188      	cbz	r0, d606e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d604a:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d604c:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d604e:	a802      	add	r0, sp, #8
   d6050:	f7ff ff4f 	bl	d5ef2 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6054:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d6056:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d6058:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d605a:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d605c:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d605e:	a906      	add	r1, sp, #24
   d6060:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d6062:	60e3      	str	r3, [r4, #12]
   d6064:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d6068:	9205      	str	r2, [sp, #20]
   d606a:	f7ff feec 	bl	d5e46 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d606e:	4b08      	ldr	r3, [pc, #32]	; (d6090 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d6070:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d6072:	4b08      	ldr	r3, [pc, #32]	; (d6094 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6074:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d6076:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d6078:	a806      	add	r0, sp, #24
   d607a:	f7ff fef1 	bl	d5e60 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d607e:	a802      	add	r0, sp, #8
   d6080:	f7ff fbc0 	bl	d5804 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d6084:	2200      	movs	r2, #0
   d6086:	4629      	mov	r1, r5
   d6088:	4803      	ldr	r0, [pc, #12]	; (d6098 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d608a:	f7ff fb57 	bl	d573c <application_thread_invoke>
   d608e:	e7b7      	b.n	d6000 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d6090:	000d5f29 	.word	0x000d5f29
   d6094:	000d61c1 	.word	0x000d61c1
   d6098:	000d5add 	.word	0x000d5add

000d609c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d609c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d60a0:	b08a      	sub	sp, #40	; 0x28
   d60a2:	4605      	mov	r5, r0
   d60a4:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d60a8:	460c      	mov	r4, r1
   d60aa:	4617      	mov	r7, r2
   d60ac:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d60ae:	f7ff fabd 	bl	d562c <spark_cloud_flag_connected>
   d60b2:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d60b4:	4682      	mov	sl, r0
   d60b6:	bb38      	cbnz	r0, d6108 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d60b8:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d60bc:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d60be:	a905      	add	r1, sp, #20
   d60c0:	4630      	mov	r0, r6
   d60c2:	f8ad 3018 	strh.w	r3, [sp, #24]
   d60c6:	f7ff febe 	bl	d5e46 <_ZN8particle5ErrorC1EOS0_>
   d60ca:	2014      	movs	r0, #20
   d60cc:	f7fd ffe3 	bl	d4096 <_Znwj>
   d60d0:	4604      	mov	r4, r0
   d60d2:	b148      	cbz	r0, d60e8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d60d4:	2302      	movs	r3, #2
   d60d6:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d60d8:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d60da:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d60de:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d60e0:	4631      	mov	r1, r6
   d60e2:	300c      	adds	r0, #12
   d60e4:	f7ff feaf 	bl	d5e46 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d60e8:	4628      	mov	r0, r5
	: __shared_count(__p)
   d60ea:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d60ec:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d60f0:	f7ff ff32 	bl	d5f58 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d60f4:	4630      	mov	r0, r6
   d60f6:	f7ff feb3 	bl	d5e60 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d60fa:	a805      	add	r0, sp, #20
   d60fc:	f7ff feb0 	bl	d5e60 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   d6100:	4628      	mov	r0, r5
   d6102:	b00a      	add	sp, #40	; 0x28
   d6104:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d6108:	230c      	movs	r3, #12
   d610a:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d610e:	2014      	movs	r0, #20
   d6110:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d6114:	9307      	str	r3, [sp, #28]
   d6116:	f7fd ffbe 	bl	d4096 <_Znwj>
   d611a:	4601      	mov	r1, r0
   d611c:	b128      	cbz	r0, d612a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d611e:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d6122:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6126:	f880 a001 	strb.w	sl, [r0, #1]
   d612a:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d612c:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d612e:	f7ff ff13 	bl	d5f58 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d6132:	4b22      	ldr	r3, [pc, #136]	; (d61bc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d6134:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d6136:	2008      	movs	r0, #8
   d6138:	f7fd ffad 	bl	d4096 <_Znwj>
   d613c:	4682      	mov	sl, r0
   d613e:	b128      	cbz	r0, d614c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6140:	9b03      	ldr	r3, [sp, #12]
   d6142:	f840 3b04 	str.w	r3, [r0], #4
   d6146:	a904      	add	r1, sp, #16
   d6148:	f7ff fd5a 	bl	d5c00 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d614c:	9600      	str	r6, [sp, #0]
   d614e:	fa5f f389 	uxtb.w	r3, r9
   d6152:	4642      	mov	r2, r8
   d6154:	4639      	mov	r1, r7
   d6156:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d6158:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d615c:	f7ff fa6e 	bl	d563c <spark_send_event>
   d6160:	b9b8      	cbnz	r0, d6192 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d6162:	9b03      	ldr	r3, [sp, #12]
   d6164:	785b      	ldrb	r3, [r3, #1]
   d6166:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d616a:	b993      	cbnz	r3, d6192 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d616c:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d6170:	a905      	add	r1, sp, #20
   d6172:	a803      	add	r0, sp, #12
   d6174:	9205      	str	r2, [sp, #20]
   d6176:	f8ad 3018 	strh.w	r3, [sp, #24]
   d617a:	f7ff ff11 	bl	d5fa0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d617e:	a805      	add	r0, sp, #20
   d6180:	f7ff fe6e 	bl	d5e60 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d6184:	a805      	add	r0, sp, #20
   d6186:	9909      	ldr	r1, [sp, #36]	; 0x24
   d6188:	f7ff fe94 	bl	d5eb4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d618c:	a806      	add	r0, sp, #24
   d618e:	f7ff fd3e 	bl	d5c0e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6192:	9b03      	ldr	r3, [sp, #12]
   d6194:	9305      	str	r3, [sp, #20]
   d6196:	a904      	add	r1, sp, #16
   d6198:	a806      	add	r0, sp, #24
   d619a:	f7ff fd31 	bl	d5c00 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d619e:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d61a0:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d61a2:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d61a4:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d61a6:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d61a8:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d61aa:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d61ac:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d61ae:	f7ff fd2e 	bl	d5c0e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d61b2:	a804      	add	r0, sp, #16
   d61b4:	f7ff fd2b 	bl	d5c0e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d61b8:	e7a2      	b.n	d6100 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d61ba:	bf00      	nop
   d61bc:	000d6285 	.word	0x000d6285

000d61c0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d61c0:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d61c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d61c4:	4605      	mov	r5, r0
	  switch (__op)
   d61c6:	d007      	beq.n	d61d8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d61c8:	2a03      	cmp	r2, #3
   d61ca:	d018      	beq.n	d61fe <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d61cc:	2a01      	cmp	r2, #1
   d61ce:	d101      	bne.n	d61d4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d61d0:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d61d2:	6003      	str	r3, [r0, #0]
	}
   d61d4:	2000      	movs	r0, #0
   d61d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d61d8:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d61da:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d61dc:	f7fd ff5b 	bl	d4096 <_Znwj>
   d61e0:	4604      	mov	r4, r0
   d61e2:	b150      	cbz	r0, d61fa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d61e4:	4631      	mov	r1, r6
   d61e6:	f7ff fecb 	bl	d5f80 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d61ea:	6930      	ldr	r0, [r6, #16]
   d61ec:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d61f0:	b108      	cbz	r0, d61f6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d61f2:	f002 fe1d 	bl	d8e30 <strdup>
        type_(type) {
   d61f6:	6120      	str	r0, [r4, #16]
   d61f8:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d61fa:	602c      	str	r4, [r5, #0]
	}
   d61fc:	e7ea      	b.n	d61d4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d61fe:	6804      	ldr	r4, [r0, #0]
   d6200:	2c00      	cmp	r4, #0
   d6202:	d0e7      	beq.n	d61d4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d6204:	f104 0010 	add.w	r0, r4, #16
   d6208:	f7ff fe2a 	bl	d5e60 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d620c:	4620      	mov	r0, r4
   d620e:	f7ff faf9 	bl	d5804 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d6212:	2118      	movs	r1, #24
   d6214:	4620      	mov	r0, r4
   d6216:	f000 fca0 	bl	d6b5a <_ZdlPvj>
   d621a:	e7db      	b.n	d61d4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d621c <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d621c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d621e:	2300      	movs	r3, #0
   d6220:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d6222:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d6224:	4604      	mov	r4, r0
   d6226:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d6228:	b12b      	cbz	r3, d6236 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d622a:	2202      	movs	r2, #2
   d622c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d622e:	68eb      	ldr	r3, [r5, #12]
   d6230:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d6232:	68ab      	ldr	r3, [r5, #8]
   d6234:	60a3      	str	r3, [r4, #8]
    }
   d6236:	4620      	mov	r0, r4
   d6238:	bd38      	pop	{r3, r4, r5, pc}

000d623a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d623a:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d623c:	b570      	push	{r4, r5, r6, lr}
   d623e:	4604      	mov	r4, r0
	  switch (__op)
   d6240:	d007      	beq.n	d6252 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d6242:	2a03      	cmp	r2, #3
   d6244:	d012      	beq.n	d626c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d6246:	2a01      	cmp	r2, #1
   d6248:	d101      	bne.n	d624e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d624a:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d624c:	6003      	str	r3, [r0, #0]
	}
   d624e:	2000      	movs	r0, #0
   d6250:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d6252:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d6254:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d6256:	f7fd ff1e 	bl	d4096 <_Znwj>
   d625a:	4605      	mov	r5, r0
   d625c:	b120      	cbz	r0, d6268 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d625e:	4631      	mov	r1, r6
   d6260:	f7ff ffdc 	bl	d621c <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d6264:	7c33      	ldrb	r3, [r6, #16]
   d6266:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d6268:	6025      	str	r5, [r4, #0]
	}
   d626a:	e7f0      	b.n	d624e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d626c:	6804      	ldr	r4, [r0, #0]
   d626e:	2c00      	cmp	r4, #0
   d6270:	d0ed      	beq.n	d624e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d6272:	4620      	mov	r0, r4
   d6274:	f7ff fac6 	bl	d5804 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d6278:	2114      	movs	r1, #20
   d627a:	4620      	mov	r0, r4
   d627c:	f000 fc6d 	bl	d6b5a <_ZdlPvj>
   d6280:	e7e5      	b.n	d624e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d6284 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d6284:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6286:	b089      	sub	sp, #36	; 0x24
   d6288:	4604      	mov	r4, r0
   d628a:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d628c:	a801      	add	r0, sp, #4
   d628e:	4611      	mov	r1, r2
   d6290:	f7ff fe10 	bl	d5eb4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d6294:	b1a4      	cbz	r4, d62c0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d6296:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d6298:	b11d      	cbz	r5, d62a2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d629a:	4628      	mov	r0, r5
   d629c:	f002 fdc8 	bl	d8e30 <strdup>
   d62a0:	4605      	mov	r5, r0
   d62a2:	a801      	add	r0, sp, #4
   d62a4:	a903      	add	r1, sp, #12
        type_(type) {
   d62a6:	9503      	str	r5, [sp, #12]
   d62a8:	f8ad 4010 	strh.w	r4, [sp, #16]
   d62ac:	f7ff fe78 	bl	d5fa0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d62b0:	a803      	add	r0, sp, #12
   d62b2:	f7ff fdd5 	bl	d5e60 <_ZN8particle5ErrorD1Ev>
   d62b6:	a802      	add	r0, sp, #8
   d62b8:	f7ff fca9 	bl	d5c0e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d62bc:	b009      	add	sp, #36	; 0x24
   d62be:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d62c0:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d62c2:	2301      	movs	r3, #1
   d62c4:	e8d5 2f4f 	ldrexb	r2, [r5]
   d62c8:	2a00      	cmp	r2, #0
   d62ca:	d103      	bne.n	d62d4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d62cc:	e8c5 3f41 	strexb	r1, r3, [r5]
   d62d0:	2900      	cmp	r1, #0
   d62d2:	d1f7      	bne.n	d62c4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d62d4:	d1ef      	bne.n	d62b6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d62d6:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d62d8:	f3bf 8f5b 	dmb	ish
   d62dc:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d62de:	1d2b      	adds	r3, r5, #4
   d62e0:	f3bf 8f5b 	dmb	ish
   d62e4:	e853 6f00 	ldrex	r6, [r3]
   d62e8:	e843 4200 	strex	r2, r4, [r3]
   d62ec:	2a00      	cmp	r2, #0
   d62ee:	d1f9      	bne.n	d62e4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d62f0:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d62f4:	2e00      	cmp	r6, #0
   d62f6:	d0de      	beq.n	d62b6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d62f8:	4620      	mov	r0, r4
   d62fa:	f7ff fa17 	bl	d572c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d62fe:	4607      	mov	r7, r0
   d6300:	b160      	cbz	r0, d631c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d6302:	f105 010c 	add.w	r1, r5, #12
   d6306:	4630      	mov	r0, r6
   d6308:	f7ff fe15 	bl	d5f36 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d630c:	4630      	mov	r0, r6
   d630e:	f7ff fa79 	bl	d5804 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d6312:	2110      	movs	r1, #16
   d6314:	4630      	mov	r0, r6
   d6316:	f000 fc20 	bl	d6b5a <_ZdlPvj>
   d631a:	e7cc      	b.n	d62b6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d631c:	4631      	mov	r1, r6
   d631e:	a803      	add	r0, sp, #12
   d6320:	f7ff ff7c 	bl	d621c <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d6324:	7b2b      	ldrb	r3, [r5, #12]
   d6326:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d632a:	2010      	movs	r0, #16
   d632c:	f7fd feb3 	bl	d4096 <_Znwj>
   d6330:	4605      	mov	r5, r0
   d6332:	b1d0      	cbz	r0, d636a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d6334:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6336:	2014      	movs	r0, #20
   d6338:	f7fd fead 	bl	d4096 <_Znwj>
   d633c:	4604      	mov	r4, r0
   d633e:	b178      	cbz	r0, d6360 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d6340:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d6342:	4601      	mov	r1, r0
   d6344:	a803      	add	r0, sp, #12
   d6346:	f7ff fdd4 	bl	d5ef2 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d634a:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d634c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d634e:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6350:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d6352:	9205      	str	r2, [sp, #20]
   d6354:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d6356:	60e3      	str	r3, [r4, #12]
   d6358:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d635c:	9206      	str	r2, [sp, #24]
   d635e:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d6360:	4b06      	ldr	r3, [pc, #24]	; (d637c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d6362:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d6364:	4b06      	ldr	r3, [pc, #24]	; (d6380 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6366:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d6368:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d636a:	a803      	add	r0, sp, #12
   d636c:	f7ff fa4a 	bl	d5804 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d6370:	2200      	movs	r2, #0
   d6372:	4629      	mov	r1, r5
   d6374:	4803      	ldr	r0, [pc, #12]	; (d6384 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d6376:	f7ff f9e1 	bl	d573c <application_thread_invoke>
   d637a:	e7c7      	b.n	d630c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d637c:	000d5f49 	.word	0x000d5f49
   d6380:	000d623b 	.word	0x000d623b
   d6384:	000d5add 	.word	0x000d5add

000d6388 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d6388:	4b01      	ldr	r3, [pc, #4]	; (d6390 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d638a:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d638c:	4770      	bx	lr
   d638e:	bf00      	nop
   d6390:	2003e440 	.word	0x2003e440

000d6394 <serialEventRun>:
{
   d6394:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d6396:	4b0b      	ldr	r3, [pc, #44]	; (d63c4 <serialEventRun+0x30>)
   d6398:	b143      	cbz	r3, d63ac <serialEventRun+0x18>
   d639a:	f7ff fcab 	bl	d5cf4 <_Z16_fetch_usbserialv>
   d639e:	6803      	ldr	r3, [r0, #0]
   d63a0:	691b      	ldr	r3, [r3, #16]
   d63a2:	4798      	blx	r3
   d63a4:	2800      	cmp	r0, #0
   d63a6:	dd01      	ble.n	d63ac <serialEventRun+0x18>
        serialEvent();
   d63a8:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d63ac:	4b06      	ldr	r3, [pc, #24]	; (d63c8 <serialEventRun+0x34>)
   d63ae:	b143      	cbz	r3, d63c2 <serialEventRun+0x2e>
   d63b0:	f7ff fbfc 	bl	d5bac <_Z22__fetch_global_Serial1v>
   d63b4:	6803      	ldr	r3, [r0, #0]
   d63b6:	691b      	ldr	r3, [r3, #16]
   d63b8:	4798      	blx	r3
   d63ba:	2800      	cmp	r0, #0
   d63bc:	dd01      	ble.n	d63c2 <serialEventRun+0x2e>
        serialEvent1();
   d63be:	f3af 8000 	nop.w
}
   d63c2:	bd08      	pop	{r3, pc}
	...

000d63cc <_post_loop>:
{
   d63cc:	b508      	push	{r3, lr}
	serialEventRun();
   d63ce:	f7ff ffe1 	bl	d6394 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d63d2:	f7ff f8db 	bl	d558c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d63d6:	4b01      	ldr	r3, [pc, #4]	; (d63dc <_post_loop+0x10>)
   d63d8:	6018      	str	r0, [r3, #0]
}
   d63da:	bd08      	pop	{r3, pc}
   d63dc:	2003e7ec 	.word	0x2003e7ec

000d63e0 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d63e0:	4802      	ldr	r0, [pc, #8]	; (d63ec <_Z33system_initialize_user_backup_ramv+0xc>)
   d63e2:	4a03      	ldr	r2, [pc, #12]	; (d63f0 <_Z33system_initialize_user_backup_ramv+0x10>)
   d63e4:	4903      	ldr	r1, [pc, #12]	; (d63f4 <_Z33system_initialize_user_backup_ramv+0x14>)
   d63e6:	1a12      	subs	r2, r2, r0
   d63e8:	f002 bce8 	b.w	d8dbc <memcpy>
   d63ec:	2003f400 	.word	0x2003f400
   d63f0:	2003f404 	.word	0x2003f404
   d63f4:	000d95c8 	.word	0x000d95c8

000d63f8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d63f8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d63fa:	2300      	movs	r3, #0
   d63fc:	9300      	str	r3, [sp, #0]
   d63fe:	461a      	mov	r2, r3
   d6400:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6404:	f7ff f9ac 	bl	d5760 <system_ctrl_set_result>
}
   d6408:	b003      	add	sp, #12
   d640a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6410 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d6410:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d6412:	8843      	ldrh	r3, [r0, #2]
   d6414:	2b0a      	cmp	r3, #10
   d6416:	d008      	beq.n	d642a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d6418:	2b50      	cmp	r3, #80	; 0x50
   d641a:	d10b      	bne.n	d6434 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d641c:	4b09      	ldr	r3, [pc, #36]	; (d6444 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d641e:	681b      	ldr	r3, [r3, #0]
   d6420:	b14b      	cbz	r3, d6436 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d6422:	b003      	add	sp, #12
   d6424:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d6428:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d642a:	f7ff ffe5 	bl	d63f8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d642e:	b003      	add	sp, #12
   d6430:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6434:	2300      	movs	r3, #0
   d6436:	9300      	str	r3, [sp, #0]
   d6438:	461a      	mov	r2, r3
   d643a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d643e:	f7ff f98f 	bl	d5760 <system_ctrl_set_result>
}
   d6442:	e7f4      	b.n	d642e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d6444:	2003e79c 	.word	0x2003e79c

000d6448 <module_user_init_hook>:
{
   d6448:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d644a:	4c12      	ldr	r4, [pc, #72]	; (d6494 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d644c:	4812      	ldr	r0, [pc, #72]	; (d6498 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d644e:	4d13      	ldr	r5, [pc, #76]	; (d649c <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d6450:	2100      	movs	r1, #0
   d6452:	f7ff f9cf 	bl	d57f4 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d6456:	6823      	ldr	r3, [r4, #0]
   d6458:	42ab      	cmp	r3, r5
   d645a:	4b11      	ldr	r3, [pc, #68]	; (d64a0 <module_user_init_hook+0x58>)
   d645c:	bf0c      	ite	eq
   d645e:	2201      	moveq	r2, #1
   d6460:	2200      	movne	r2, #0
   d6462:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d6464:	d002      	beq.n	d646c <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d6466:	f7ff ffbb 	bl	d63e0 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d646a:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d646c:	f7ff f886 	bl	d557c <HAL_RNG_GetRandomNumber>
   d6470:	4604      	mov	r4, r0
    srand(seed);
   d6472:	f002 fcb9 	bl	d8de8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d6476:	4b0b      	ldr	r3, [pc, #44]	; (d64a4 <module_user_init_hook+0x5c>)
   d6478:	b113      	cbz	r3, d6480 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d647a:	4620      	mov	r0, r4
   d647c:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d6480:	2100      	movs	r1, #0
   d6482:	4808      	ldr	r0, [pc, #32]	; (d64a4 <module_user_init_hook+0x5c>)
   d6484:	f7ff f8e2 	bl	d564c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d6488:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d648c:	4806      	ldr	r0, [pc, #24]	; (d64a8 <module_user_init_hook+0x60>)
   d648e:	2100      	movs	r1, #0
   d6490:	f7ff b95c 	b.w	d574c <system_ctrl_set_app_request_handler>
   d6494:	2003f400 	.word	0x2003f400
   d6498:	000d6389 	.word	0x000d6389
   d649c:	9a271c1e 	.word	0x9a271c1e
   d64a0:	2003e798 	.word	0x2003e798
   d64a4:	00000000 	.word	0x00000000
   d64a8:	000d6411 	.word	0x000d6411

000d64ac <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d64ac:	b510      	push	{r4, lr}
   d64ae:	4604      	mov	r4, r0
   d64b0:	f7ff f9a8 	bl	d5804 <_ZNSt14_Function_baseD1Ev>
   d64b4:	4620      	mov	r0, r4
   d64b6:	bd10      	pop	{r4, pc}

000d64b8 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d64b8:	4803      	ldr	r0, [pc, #12]	; (d64c8 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d64ba:	4a04      	ldr	r2, [pc, #16]	; (d64cc <_GLOBAL__sub_I_RGB+0x14>)
   d64bc:	4904      	ldr	r1, [pc, #16]	; (d64d0 <_GLOBAL__sub_I_RGB+0x18>)
   d64be:	2300      	movs	r3, #0
   d64c0:	6083      	str	r3, [r0, #8]
   d64c2:	f000 bb45 	b.w	d6b50 <__aeabi_atexit>
   d64c6:	bf00      	nop
   d64c8:	2003e7a0 	.word	0x2003e7a0
   d64cc:	2003e4a4 	.word	0x2003e4a4
   d64d0:	000d64ad 	.word	0x000d64ad

000d64d4 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d64d4:	2100      	movs	r1, #0
   d64d6:	f7ff b919 	b.w	d570c <system_delay_ms>
	...

000d64dc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d64dc:	4b02      	ldr	r3, [pc, #8]	; (d64e8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d64de:	681a      	ldr	r2, [r3, #0]
   d64e0:	4b02      	ldr	r3, [pc, #8]	; (d64ec <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d64e2:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d64e4:	4770      	bx	lr
   d64e6:	bf00      	nop
   d64e8:	2003e438 	.word	0x2003e438
   d64ec:	2003e7b0 	.word	0x2003e7b0

000d64f0 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d64f0:	4b01      	ldr	r3, [pc, #4]	; (d64f8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d64f2:	4a02      	ldr	r2, [pc, #8]	; (d64fc <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d64f4:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d64f6:	4770      	bx	lr
   d64f8:	2003e7b4 	.word	0x2003e7b4
   d64fc:	000d953c 	.word	0x000d953c

000d6500 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d6500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6502:	4606      	mov	r6, r0
   d6504:	460d      	mov	r5, r1
  size_t n = 0;
   d6506:	188f      	adds	r7, r1, r2
   d6508:	2400      	movs	r4, #0
  while (size--) {
   d650a:	42bd      	cmp	r5, r7
   d650c:	d00c      	beq.n	d6528 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d650e:	6833      	ldr	r3, [r6, #0]
   d6510:	f815 1b01 	ldrb.w	r1, [r5], #1
   d6514:	689b      	ldr	r3, [r3, #8]
   d6516:	4630      	mov	r0, r6
   d6518:	4798      	blx	r3
     if (chunk>=0)
   d651a:	1e03      	subs	r3, r0, #0
   d651c:	db01      	blt.n	d6522 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d651e:	441c      	add	r4, r3
  while (size--) {
   d6520:	e7f3      	b.n	d650a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d6522:	2c00      	cmp	r4, #0
   d6524:	bf08      	it	eq
   d6526:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d6528:	4620      	mov	r0, r4
   d652a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d652c <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   d652c:	b513      	push	{r0, r1, r4, lr}
   d652e:	4604      	mov	r4, r0
    }
   d6530:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d6532:	b159      	cbz	r1, d654c <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d6534:	9101      	str	r1, [sp, #4]
   d6536:	f002 fc98 	bl	d8e6a <strlen>
   d653a:	6823      	ldr	r3, [r4, #0]
   d653c:	9901      	ldr	r1, [sp, #4]
   d653e:	68db      	ldr	r3, [r3, #12]
   d6540:	4602      	mov	r2, r0
   d6542:	4620      	mov	r0, r4
    }
   d6544:	b002      	add	sp, #8
   d6546:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d654a:	4718      	bx	r3
    }
   d654c:	b002      	add	sp, #8
   d654e:	bd10      	pop	{r4, pc}

000d6550 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d6550:	b508      	push	{r3, lr}
  return write(str);
   d6552:	f7ff ffeb 	bl	d652c <_ZN5Print5writeEPKc>
}
   d6556:	bd08      	pop	{r3, pc}

000d6558 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d6558:	6803      	ldr	r3, [r0, #0]
   d655a:	689b      	ldr	r3, [r3, #8]
   d655c:	4718      	bx	r3

000d655e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d655e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d6560:	210d      	movs	r1, #13
{
   d6562:	4605      	mov	r5, r0
  size_t n = print('\r');
   d6564:	f7ff fff8 	bl	d6558 <_ZN5Print5printEc>
  n += print('\n');
   d6568:	210a      	movs	r1, #10
  size_t n = print('\r');
   d656a:	4604      	mov	r4, r0
  n += print('\n');
   d656c:	4628      	mov	r0, r5
   d656e:	f7ff fff3 	bl	d6558 <_ZN5Print5printEc>
  return n;
}
   d6572:	4420      	add	r0, r4
   d6574:	bd38      	pop	{r3, r4, r5, pc}

000d6576 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d6576:	b538      	push	{r3, r4, r5, lr}
   d6578:	4605      	mov	r5, r0
  return write(str);
   d657a:	f7ff ffd7 	bl	d652c <_ZN5Print5writeEPKc>
   d657e:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d6580:	4628      	mov	r0, r5
   d6582:	f7ff ffec 	bl	d655e <_ZN5Print7printlnEv>
  return n;
}
   d6586:	4420      	add	r0, r4
   d6588:	bd38      	pop	{r3, r4, r5, pc}

000d658a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d658a:	b530      	push	{r4, r5, lr}
   d658c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d658e:	2300      	movs	r3, #0
   d6590:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d6594:	2a01      	cmp	r2, #1
   d6596:	bf98      	it	ls
   d6598:	220a      	movls	r2, #10
   d659a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d659c:	460d      	mov	r5, r1
   d659e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d65a2:	fb01 5312 	mls	r3, r1, r2, r5
   d65a6:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d65aa:	2b09      	cmp	r3, #9
   d65ac:	bf94      	ite	ls
   d65ae:	3330      	addls	r3, #48	; 0x30
   d65b0:	3337      	addhi	r3, #55	; 0x37
   d65b2:	b2db      	uxtb	r3, r3
  } while(n);
   d65b4:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d65b6:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d65ba:	d9ef      	bls.n	d659c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d65bc:	4621      	mov	r1, r4
   d65be:	f7ff ffb5 	bl	d652c <_ZN5Print5writeEPKc>
}
   d65c2:	b00b      	add	sp, #44	; 0x2c
   d65c4:	bd30      	pop	{r4, r5, pc}

000d65c6 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   d65c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d65ca:	b086      	sub	sp, #24
   d65cc:	af00      	add	r7, sp, #0
   d65ce:	4605      	mov	r5, r0
   d65d0:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   d65d2:	1d38      	adds	r0, r7, #4
   d65d4:	2114      	movs	r1, #20
{
   d65d6:	4614      	mov	r4, r2
    va_copy(args2, args);
   d65d8:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   d65da:	f7ff f8eb 	bl	d57b4 <vsnprintf>

    if (n<bufsize)
   d65de:	2813      	cmp	r0, #19
   d65e0:	d80e      	bhi.n	d6600 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   d65e2:	1d39      	adds	r1, r7, #4
   d65e4:	4628      	mov	r0, r5
   d65e6:	f7ff ffa1 	bl	d652c <_ZN5Print5writeEPKc>
   d65ea:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   d65ec:	b11e      	cbz	r6, d65f6 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   d65ee:	4628      	mov	r0, r5
   d65f0:	f7ff ffb5 	bl	d655e <_ZN5Print7printlnEv>
   d65f4:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   d65f6:	4620      	mov	r0, r4
   d65f8:	3718      	adds	r7, #24
   d65fa:	46bd      	mov	sp, r7
   d65fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   d6600:	f100 0308 	add.w	r3, r0, #8
   d6604:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   d6608:	46e8      	mov	r8, sp
        char bigger[n+1];
   d660a:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   d660e:	4622      	mov	r2, r4
   d6610:	1c41      	adds	r1, r0, #1
   d6612:	683b      	ldr	r3, [r7, #0]
   d6614:	4668      	mov	r0, sp
   d6616:	f7ff f8cd 	bl	d57b4 <vsnprintf>
  return write(str);
   d661a:	4669      	mov	r1, sp
   d661c:	4628      	mov	r0, r5
   d661e:	f7ff ff85 	bl	d652c <_ZN5Print5writeEPKc>
   d6622:	4604      	mov	r4, r0
   d6624:	46c5      	mov	sp, r8
   d6626:	e7e1      	b.n	d65ec <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000d6628 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d6628:	b510      	push	{r4, lr}
   d662a:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d662c:	6800      	ldr	r0, [r0, #0]
   d662e:	b108      	cbz	r0, d6634 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d6630:	f7fe ff9c 	bl	d556c <os_mutex_recursive_destroy>
    }
   d6634:	4620      	mov	r0, r4
   d6636:	bd10      	pop	{r4, pc}

000d6638 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d6638:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d663a:	4c06      	ldr	r4, [pc, #24]	; (d6654 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d663c:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d663e:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d6640:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d6642:	f7fe ff8b 	bl	d555c <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d6646:	4620      	mov	r0, r4
   d6648:	4a03      	ldr	r2, [pc, #12]	; (d6658 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d664a:	4904      	ldr	r1, [pc, #16]	; (d665c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d664c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d6650:	f000 ba7e 	b.w	d6b50 <__aeabi_atexit>
   d6654:	2003e7b8 	.word	0x2003e7b8
   d6658:	2003e4a4 	.word	0x2003e4a4
   d665c:	000d6629 	.word	0x000d6629

000d6660 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d6660:	b510      	push	{r4, lr}
   d6662:	4604      	mov	r4, r0
{
	free(buffer);
   d6664:	6800      	ldr	r0, [r0, #0]
   d6666:	f7ff f88d 	bl	d5784 <free>
}
   d666a:	4620      	mov	r0, r4
   d666c:	bd10      	pop	{r4, pc}

000d666e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d666e:	b510      	push	{r4, lr}
   d6670:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d6672:	6800      	ldr	r0, [r0, #0]
   d6674:	b108      	cbz	r0, d667a <_ZN6String10invalidateEv+0xc>
   d6676:	f7ff f885 	bl	d5784 <free>
	buffer = NULL;
   d667a:	2300      	movs	r3, #0
	capacity = len = 0;
   d667c:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d6680:	6023      	str	r3, [r4, #0]
}
   d6682:	bd10      	pop	{r4, pc}

000d6684 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d6684:	b538      	push	{r3, r4, r5, lr}
   d6686:	4604      	mov	r4, r0
   d6688:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d668a:	6800      	ldr	r0, [r0, #0]
   d668c:	3101      	adds	r1, #1
   d668e:	f7ff f881 	bl	d5794 <realloc>
	if (newbuffer) {
   d6692:	b110      	cbz	r0, d669a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d6694:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d6698:	2001      	movs	r0, #1
	}
	return 0;
}
   d669a:	bd38      	pop	{r3, r4, r5, pc}

000d669c <_ZN6String7reserveEj>:
{
   d669c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d669e:	6803      	ldr	r3, [r0, #0]
{
   d66a0:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d66a2:	b123      	cbz	r3, d66ae <_ZN6String7reserveEj+0x12>
   d66a4:	6843      	ldr	r3, [r0, #4]
   d66a6:	428b      	cmp	r3, r1
   d66a8:	d301      	bcc.n	d66ae <_ZN6String7reserveEj+0x12>
   d66aa:	2001      	movs	r0, #1
}
   d66ac:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d66ae:	4620      	mov	r0, r4
   d66b0:	f7ff ffe8 	bl	d6684 <_ZN6String12changeBufferEj>
   d66b4:	2800      	cmp	r0, #0
   d66b6:	d0f9      	beq.n	d66ac <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d66b8:	68a3      	ldr	r3, [r4, #8]
   d66ba:	2b00      	cmp	r3, #0
   d66bc:	d1f5      	bne.n	d66aa <_ZN6String7reserveEj+0xe>
   d66be:	6822      	ldr	r2, [r4, #0]
   d66c0:	7013      	strb	r3, [r2, #0]
   d66c2:	e7f2      	b.n	d66aa <_ZN6String7reserveEj+0xe>

000d66c4 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d66c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d66c6:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d66c8:	4611      	mov	r1, r2
   d66ca:	9201      	str	r2, [sp, #4]
{
   d66cc:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d66ce:	f7ff ffe5 	bl	d669c <_ZN6String7reserveEj>
   d66d2:	9a01      	ldr	r2, [sp, #4]
   d66d4:	b928      	cbnz	r0, d66e2 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d66d6:	4620      	mov	r0, r4
   d66d8:	f7ff ffc9 	bl	d666e <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d66dc:	4620      	mov	r0, r4
   d66de:	b003      	add	sp, #12
   d66e0:	bd30      	pop	{r4, r5, pc}
	len = length;
   d66e2:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d66e4:	4629      	mov	r1, r5
   d66e6:	6820      	ldr	r0, [r4, #0]
   d66e8:	f002 fb68 	bl	d8dbc <memcpy>
	buffer[len] = 0;
   d66ec:	6822      	ldr	r2, [r4, #0]
   d66ee:	68a3      	ldr	r3, [r4, #8]
   d66f0:	2100      	movs	r1, #0
   d66f2:	54d1      	strb	r1, [r2, r3]
	return *this;
   d66f4:	e7f2      	b.n	d66dc <_ZN6String4copyEPKcj+0x18>

000d66f6 <_ZN6StringC1EPKc>:
	buffer = NULL;
   d66f6:	2300      	movs	r3, #0
String::String(const char *cstr)
   d66f8:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d66fa:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d66fe:	4604      	mov	r4, r0
	len = 0;
   d6700:	6083      	str	r3, [r0, #8]
	flags = 0;
   d6702:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d6704:	b141      	cbz	r1, d6718 <_ZN6StringC1EPKc+0x22>
   d6706:	4608      	mov	r0, r1
   d6708:	9101      	str	r1, [sp, #4]
   d670a:	f002 fbae 	bl	d8e6a <strlen>
   d670e:	9901      	ldr	r1, [sp, #4]
   d6710:	4602      	mov	r2, r0
   d6712:	4620      	mov	r0, r4
   d6714:	f7ff ffd6 	bl	d66c4 <_ZN6String4copyEPKcj>
}
   d6718:	4620      	mov	r0, r4
   d671a:	b002      	add	sp, #8
   d671c:	bd10      	pop	{r4, pc}

000d671e <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d671e:	4288      	cmp	r0, r1
{
   d6720:	b510      	push	{r4, lr}
   d6722:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d6724:	d005      	beq.n	d6732 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d6726:	680b      	ldr	r3, [r1, #0]
   d6728:	b12b      	cbz	r3, d6736 <_ZN6StringaSERKS_+0x18>
   d672a:	688a      	ldr	r2, [r1, #8]
   d672c:	4619      	mov	r1, r3
   d672e:	f7ff ffc9 	bl	d66c4 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d6732:	4620      	mov	r0, r4
   d6734:	bd10      	pop	{r4, pc}
	else invalidate();
   d6736:	f7ff ff9a 	bl	d666e <_ZN6String10invalidateEv>
   d673a:	e7fa      	b.n	d6732 <_ZN6StringaSERKS_+0x14>

000d673c <_ZN6StringC1ERKS_>:
String::String(const String &value)
   d673c:	b510      	push	{r4, lr}
	buffer = NULL;
   d673e:	2300      	movs	r3, #0
String::String(const String &value)
   d6740:	4604      	mov	r4, r0
	capacity = 0;
   d6742:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d6746:	6083      	str	r3, [r0, #8]
	flags = 0;
   d6748:	7303      	strb	r3, [r0, #12]
	*this = value;
   d674a:	f7ff ffe8 	bl	d671e <_ZN6StringaSERKS_>
}
   d674e:	4620      	mov	r0, r4
   d6750:	bd10      	pop	{r4, pc}

000d6752 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d6752:	b513      	push	{r0, r1, r4, lr}
   d6754:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   d6756:	b159      	cbz	r1, d6770 <_ZN6StringaSEPKc+0x1e>
   d6758:	4608      	mov	r0, r1
   d675a:	9101      	str	r1, [sp, #4]
   d675c:	f002 fb85 	bl	d8e6a <strlen>
   d6760:	9901      	ldr	r1, [sp, #4]
   d6762:	4602      	mov	r2, r0
   d6764:	4620      	mov	r0, r4
   d6766:	f7ff ffad 	bl	d66c4 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d676a:	4620      	mov	r0, r4
   d676c:	b002      	add	sp, #8
   d676e:	bd10      	pop	{r4, pc}
	else invalidate();
   d6770:	f7ff ff7d 	bl	d666e <_ZN6String10invalidateEv>
   d6774:	e7f9      	b.n	d676a <_ZN6StringaSEPKc+0x18>

000d6776 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d6776:	b510      	push	{r4, lr}
   d6778:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d677a:	6800      	ldr	r0, [r0, #0]
   d677c:	b118      	cbz	r0, d6786 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d677e:	f7ff f801 	bl	d5784 <free>
            wakeupSource_ = nullptr;
   d6782:	2300      	movs	r3, #0
   d6784:	6023      	str	r3, [r4, #0]
        }
    }
   d6786:	bd10      	pop	{r4, pc}

000d6788 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d6788:	b510      	push	{r4, lr}
   d678a:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d678c:	f7ff fff3 	bl	d6776 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
   d6790:	4620      	mov	r0, r4
   d6792:	bd10      	pop	{r4, pc}

000d6794 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d6794:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d6796:	4b09      	ldr	r3, [pc, #36]	; (d67bc <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   d6798:	4c09      	ldr	r4, [pc, #36]	; (d67c0 <_GLOBAL__sub_I_System+0x2c>)
   d679a:	2202      	movs	r2, #2
   d679c:	2000      	movs	r0, #0
   d679e:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d67a0:	4b08      	ldr	r3, [pc, #32]	; (d67c4 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d67a2:	6020      	str	r0, [r4, #0]
   d67a4:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d67a6:	71a0      	strb	r0, [r4, #6]
   d67a8:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d67aa:	f7fe ffa7 	bl	d56fc <set_system_mode>
SystemClass System;
   d67ae:	4620      	mov	r0, r4
   d67b0:	4a05      	ldr	r2, [pc, #20]	; (d67c8 <_GLOBAL__sub_I_System+0x34>)
   d67b2:	4906      	ldr	r1, [pc, #24]	; (d67cc <_GLOBAL__sub_I_System+0x38>)
   d67b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d67b8:	f000 b9ca 	b.w	d6b50 <__aeabi_atexit>
   d67bc:	2003e7c8 	.word	0x2003e7c8
   d67c0:	2003e7bc 	.word	0x2003e7bc
   d67c4:	ffff0000 	.word	0xffff0000
   d67c8:	2003e4a4 	.word	0x2003e4a4
   d67cc:	000d6789 	.word	0x000d6789

000d67d0 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return hal_spi_acquire(_spi, nullptr);
   d67d0:	2100      	movs	r1, #0
   d67d2:	f7fe be6b 	b.w	d54ac <hal_spi_acquire>

000d67d6 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   d67d6:	2100      	movs	r1, #0
   d67d8:	f7fe be70 	b.w	d54bc <hal_spi_release>

000d67dc <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d67dc:	b510      	push	{r4, lr}
   d67de:	4604      	mov	r4, r0
   d67e0:	4608      	mov	r0, r1
{
    _spi = spi;
   d67e2:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d67e4:	f7fe fe42 	bl	d546c <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d67e8:	2300      	movs	r3, #0
   d67ea:	6063      	str	r3, [r4, #4]
}
   d67ec:	4620      	mov	r0, r4
   d67ee:	bd10      	pop	{r4, pc}

000d67f0 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d67f0:	b510      	push	{r4, lr}
   d67f2:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d67f4:	7800      	ldrb	r0, [r0, #0]
   d67f6:	f7ff ffeb 	bl	d67d0 <_ZN8SPIClass4lockEv.isra.0>
   d67fa:	b948      	cbnz	r0, d6810 <_ZN8SPIClass5beginEv+0x20>
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   d67fc:	7820      	ldrb	r0, [r4, #0]
   d67fe:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d6802:	f7fe fe23 	bl	d544c <hal_spi_begin>
        unlock();
   d6806:	7820      	ldrb	r0, [r4, #0]
    }
}
   d6808:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d680c:	f7ff bfe3 	b.w	d67d6 <_ZN8SPIClass6unlockEv.isra.0>
}
   d6810:	bd10      	pop	{r4, pc}

000d6812 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d6812:	7800      	ldrb	r0, [r0, #0]
   d6814:	f7ff bfdf 	b.w	d67d6 <_ZN8SPIClass6unlockEv.isra.0>

000d6818 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d6818:	0840      	lsrs	r0, r0, #1
{
   d681a:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   d681c:	6018      	str	r0, [r3, #0]
   d681e:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d6820:	6818      	ldr	r0, [r3, #0]
   d6822:	4288      	cmp	r0, r1
   d6824:	b2e5      	uxtb	r5, r4
   d6826:	d906      	bls.n	d6836 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d6828:	3401      	adds	r4, #1
   d682a:	2c08      	cmp	r4, #8
   d682c:	d002      	beq.n	d6834 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d682e:	0840      	lsrs	r0, r0, #1
   d6830:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   d6832:	e7f5      	b.n	d6820 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d6834:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   d6836:	4b02      	ldr	r3, [pc, #8]	; (d6840 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d6838:	5d5b      	ldrb	r3, [r3, r5]
   d683a:	7013      	strb	r3, [r2, #0]
}
   d683c:	bd30      	pop	{r4, r5, pc}
   d683e:	bf00      	nop
   d6840:	000d9540 	.word	0x000d9540

000d6844 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   d6844:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6848:	4606      	mov	r6, r0
   d684a:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   d684c:	7800      	ldrb	r0, [r0, #0]
{
   d684e:	460d      	mov	r5, r1
    CHECK(lock());
   d6850:	f7ff ffbe 	bl	d67d0 <_ZN8SPIClass4lockEv.isra.0>
   d6854:	2800      	cmp	r0, #0
   d6856:	db1b      	blt.n	d6890 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   d6858:	7834      	ldrb	r4, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   d685a:	2214      	movs	r2, #20
   d685c:	2100      	movs	r1, #0
   d685e:	a809      	add	r0, sp, #36	; 0x24
   d6860:	f002 faba 	bl	d8dd8 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d6864:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   d6866:	2200      	movs	r2, #0
   d6868:	a909      	add	r1, sp, #36	; 0x24
   d686a:	4620      	mov	r0, r4
    info->version = HAL_SPI_INFO_VERSION_1;
   d686c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   d6870:	f7fe fe0c 	bl	d548c <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   d6874:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   d6878:	b113      	cbz	r3, d6880 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   d687a:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
   d687e:	b154      	cbz	r4, d6896 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   d6880:	2700      	movs	r7, #0
   d6882:	46b9      	mov	r9, r7
   d6884:	46b8      	mov	r8, r7
   d6886:	2401      	movs	r4, #1
    if (default_ && other.default_)
   d6888:	792b      	ldrb	r3, [r5, #4]
   d688a:	b15c      	cbz	r4, d68a4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   d688c:	b1c3      	cbz	r3, d68c0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   d688e:	2000      	movs	r0, #0
}
   d6890:	b00f      	add	sp, #60	; 0x3c
   d6892:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   d6896:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d689a:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d689e:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   d68a2:	e7f1      	b.n	d6888 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   d68a4:	2b00      	cmp	r3, #0
   d68a6:	d135      	bne.n	d6914 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   d68a8:	68ab      	ldr	r3, [r5, #8]
   d68aa:	4543      	cmp	r3, r8
   d68ac:	d108      	bne.n	d68c0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   d68ae:	f88d 9020 	strb.w	r9, [sp, #32]
   d68b2:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d68b6:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d68ba:	89ab      	ldrh	r3, [r5, #12]
   d68bc:	429a      	cmp	r2, r3
   d68be:	d0e6      	beq.n	d688e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   d68c0:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d68c2:	68a9      	ldr	r1, [r5, #8]
            uint8_t divisor = 0;
   d68c4:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d68c8:	980a      	ldr	r0, [sp, #40]	; 0x28
   d68ca:	ab04      	add	r3, sp, #16
   d68cc:	f10d 020f 	add.w	r2, sp, #15
   d68d0:	f7ff ffa2 	bl	d6818 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   d68d4:	7929      	ldrb	r1, [r5, #4]
   d68d6:	b984      	cbnz	r4, d68fa <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   d68d8:	b989      	cbnz	r1, d68fe <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d68da:	68ab      	ldr	r3, [r5, #8]
   d68dc:	4543      	cmp	r3, r8
   d68de:	d30e      	bcc.n	d68fe <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   d68e0:	f88d 9020 	strb.w	r9, [sp, #32]
   d68e4:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d68e8:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d68ec:	89ab      	ldrh	r3, [r5, #12]
   d68ee:	429a      	cmp	r2, r3
   d68f0:	d105      	bne.n	d68fe <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d68f2:	9b04      	ldr	r3, [sp, #16]
   d68f4:	4543      	cmp	r3, r8
   d68f6:	d102      	bne.n	d68fe <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d68f8:	e7c9      	b.n	d688e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   d68fa:	2900      	cmp	r1, #0
   d68fc:	d1f9      	bne.n	d68f2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   d68fe:	2300      	movs	r3, #0
   d6900:	9301      	str	r3, [sp, #4]
   d6902:	7b6b      	ldrb	r3, [r5, #13]
   d6904:	9300      	str	r3, [sp, #0]
   d6906:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d690a:	7b2b      	ldrb	r3, [r5, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d690c:	7830      	ldrb	r0, [r6, #0]
   d690e:	f7fe fdc5 	bl	d549c <hal_spi_set_settings>
   d6912:	e7bc      	b.n	d688e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   d6914:	e9cd 4400 	strd	r4, r4, [sp]
   d6918:	4623      	mov	r3, r4
   d691a:	4622      	mov	r2, r4
   d691c:	2101      	movs	r1, #1
   d691e:	e7f5      	b.n	d690c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000d6920 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d6920:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   d6922:	7800      	ldrb	r0, [r0, #0]
   d6924:	f7fe fd9a 	bl	d545c <hal_spi_transfer>
}
   d6928:	b2c0      	uxtb	r0, r0
   d692a:	bd08      	pop	{r3, pc}

000d692c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d692c:	2200      	movs	r2, #0
   d692e:	6840      	ldr	r0, [r0, #4]
   d6930:	4611      	mov	r1, r2
   d6932:	f7fe becb 	b.w	d56cc <network_listening>

000d6936 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d6936:	2200      	movs	r2, #0
   d6938:	6840      	ldr	r0, [r0, #4]
   d693a:	4611      	mov	r1, r2
   d693c:	f7fe bed6 	b.w	d56ec <network_get_listen_timeout>

000d6940 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d6940:	6840      	ldr	r0, [r0, #4]
   d6942:	2200      	movs	r2, #0
   d6944:	f7fe beca 	b.w	d56dc <network_set_listen_timeout>

000d6948 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d6948:	6840      	ldr	r0, [r0, #4]
   d694a:	2200      	movs	r2, #0
   d694c:	f081 0101 	eor.w	r1, r1, #1
   d6950:	f7fe beb4 	b.w	d56bc <network_listen>

000d6954 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d6954:	2300      	movs	r3, #0
   d6956:	6840      	ldr	r0, [r0, #4]
   d6958:	461a      	mov	r2, r3
   d695a:	4619      	mov	r1, r3
   d695c:	f7fe bea6 	b.w	d56ac <network_off>

000d6960 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d6960:	2300      	movs	r3, #0
   d6962:	6840      	ldr	r0, [r0, #4]
   d6964:	461a      	mov	r2, r3
   d6966:	4619      	mov	r1, r3
   d6968:	f7fe be98 	b.w	d569c <network_on>

000d696c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d696c:	2200      	movs	r2, #0
   d696e:	6840      	ldr	r0, [r0, #4]
   d6970:	4611      	mov	r1, r2
   d6972:	f7fe be8b 	b.w	d568c <network_ready>

000d6976 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d6976:	2200      	movs	r2, #0
   d6978:	6840      	ldr	r0, [r0, #4]
   d697a:	4611      	mov	r1, r2
   d697c:	f7fe be76 	b.w	d566c <network_connecting>

000d6980 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6980:	6840      	ldr	r0, [r0, #4]
   d6982:	2200      	movs	r2, #0
   d6984:	2102      	movs	r1, #2
   d6986:	f7fe be79 	b.w	d567c <network_disconnect>

000d698a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d698a:	2300      	movs	r3, #0
   d698c:	6840      	ldr	r0, [r0, #4]
   d698e:	461a      	mov	r2, r3
   d6990:	f7fe be64 	b.w	d565c <network_connect>

000d6994 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d6994:	4b02      	ldr	r3, [pc, #8]	; (d69a0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d6996:	2203      	movs	r2, #3
   d6998:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d699a:	4a02      	ldr	r2, [pc, #8]	; (d69a4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d699c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d699e:	4770      	bx	lr
   d69a0:	2003e7cc 	.word	0x2003e7cc
   d69a4:	000d9550 	.word	0x000d9550

000d69a8 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d69a8:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d69aa:	2300      	movs	r3, #0
   d69ac:	2520      	movs	r5, #32
   d69ae:	8043      	strh	r3, [r0, #2]
   d69b0:	2314      	movs	r3, #20
{
   d69b2:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d69b4:	8003      	strh	r3, [r0, #0]
   d69b6:	6085      	str	r5, [r0, #8]
   d69b8:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d69ba:	4906      	ldr	r1, [pc, #24]	; (d69d4 <_Z17acquireWireBufferv+0x2c>)
   d69bc:	4628      	mov	r0, r5
   d69be:	f000 f8ce 	bl	d6b5e <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d69c2:	4904      	ldr	r1, [pc, #16]	; (d69d4 <_Z17acquireWireBufferv+0x2c>)
	};
   d69c4:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d69c6:	4628      	mov	r0, r5
   d69c8:	f000 f8c9 	bl	d6b5e <_ZnajRKSt9nothrow_t>
	};
   d69cc:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d69ce:	4620      	mov	r0, r4
   d69d0:	bd38      	pop	{r3, r4, r5, pc}
   d69d2:	bf00      	nop
   d69d4:	000d957c 	.word	0x000d957c

000d69d8 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d69d8:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d69da:	4d0f      	ldr	r5, [pc, #60]	; (d6a18 <_Z19__fetch_global_Wirev+0x40>)
   d69dc:	7829      	ldrb	r1, [r5, #0]
   d69de:	f3bf 8f5b 	dmb	ish
   d69e2:	f011 0401 	ands.w	r4, r1, #1
{
   d69e6:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d69e8:	d113      	bne.n	d6a12 <_Z19__fetch_global_Wirev+0x3a>
   d69ea:	4628      	mov	r0, r5
   d69ec:	f7fd fb59 	bl	d40a2 <__cxa_guard_acquire>
   d69f0:	b178      	cbz	r0, d6a12 <_Z19__fetch_global_Wirev+0x3a>
   d69f2:	a801      	add	r0, sp, #4
   d69f4:	f7ff ffd8 	bl	d69a8 <_Z17acquireWireBufferv>
   d69f8:	aa01      	add	r2, sp, #4
   d69fa:	4621      	mov	r1, r4
   d69fc:	4807      	ldr	r0, [pc, #28]	; (d6a1c <_Z19__fetch_global_Wirev+0x44>)
   d69fe:	f7ff f81b 	bl	d5a38 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d6a02:	4628      	mov	r0, r5
   d6a04:	f7fd fb52 	bl	d40ac <__cxa_guard_release>
   d6a08:	4a05      	ldr	r2, [pc, #20]	; (d6a20 <_Z19__fetch_global_Wirev+0x48>)
   d6a0a:	4906      	ldr	r1, [pc, #24]	; (d6a24 <_Z19__fetch_global_Wirev+0x4c>)
   d6a0c:	4803      	ldr	r0, [pc, #12]	; (d6a1c <_Z19__fetch_global_Wirev+0x44>)
   d6a0e:	f000 f89f 	bl	d6b50 <__aeabi_atexit>
	return wire;
}
   d6a12:	4802      	ldr	r0, [pc, #8]	; (d6a1c <_Z19__fetch_global_Wirev+0x44>)
   d6a14:	b007      	add	sp, #28
   d6a16:	bd30      	pop	{r4, r5, pc}
   d6a18:	2003e7d4 	.word	0x2003e7d4
   d6a1c:	2003e7d8 	.word	0x2003e7d8
   d6a20:	2003e4a4 	.word	0x2003e4a4
   d6a24:	000d59e1 	.word	0x000d59e1

000d6a28 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d6a28:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d6a2a:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d6a2c:	d902      	bls.n	d6a34 <pinAvailable+0xc>
    return false;
   d6a2e:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d6a30:	b002      	add	sp, #8
   d6a32:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d6a34:	f1a0 030b 	sub.w	r3, r0, #11
   d6a38:	2b02      	cmp	r3, #2
   d6a3a:	d81a      	bhi.n	d6a72 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d6a3c:	4c17      	ldr	r4, [pc, #92]	; (d6a9c <pinAvailable+0x74>)
   d6a3e:	7821      	ldrb	r1, [r4, #0]
   d6a40:	f3bf 8f5b 	dmb	ish
   d6a44:	f011 0101 	ands.w	r1, r1, #1
   d6a48:	d10b      	bne.n	d6a62 <pinAvailable+0x3a>
   d6a4a:	4620      	mov	r0, r4
   d6a4c:	9101      	str	r1, [sp, #4]
   d6a4e:	f7fd fb28 	bl	d40a2 <__cxa_guard_acquire>
   d6a52:	9901      	ldr	r1, [sp, #4]
   d6a54:	b128      	cbz	r0, d6a62 <pinAvailable+0x3a>
   d6a56:	4812      	ldr	r0, [pc, #72]	; (d6aa0 <pinAvailable+0x78>)
   d6a58:	f7ff fec0 	bl	d67dc <_ZN8SPIClassC1E19hal_spi_interface_t>
   d6a5c:	4620      	mov	r0, r4
   d6a5e:	f7fd fb25 	bl	d40ac <__cxa_guard_release>
   d6a62:	4b0f      	ldr	r3, [pc, #60]	; (d6aa0 <pinAvailable+0x78>)
   d6a64:	7818      	ldrb	r0, [r3, #0]
   d6a66:	f7fe fd09 	bl	d547c <hal_spi_is_enabled>
   d6a6a:	2800      	cmp	r0, #0
   d6a6c:	d1df      	bne.n	d6a2e <pinAvailable+0x6>
  return true; // 'pin' is available
   d6a6e:	2001      	movs	r0, #1
   d6a70:	e7de      	b.n	d6a30 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d6a72:	2801      	cmp	r0, #1
   d6a74:	d809      	bhi.n	d6a8a <pinAvailable+0x62>
   d6a76:	f7ff ffaf 	bl	d69d8 <_Z19__fetch_global_Wirev>
   d6a7a:	2100      	movs	r1, #0
   d6a7c:	7c00      	ldrb	r0, [r0, #16]
   d6a7e:	f7fe fccd 	bl	d541c <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d6a82:	f080 0001 	eor.w	r0, r0, #1
   d6a86:	b2c0      	uxtb	r0, r0
   d6a88:	e7d2      	b.n	d6a30 <pinAvailable+0x8>
   d6a8a:	3809      	subs	r0, #9
   d6a8c:	2801      	cmp	r0, #1
   d6a8e:	d8ee      	bhi.n	d6a6e <pinAvailable+0x46>
   d6a90:	f7ff f88c 	bl	d5bac <_Z22__fetch_global_Serial1v>
   d6a94:	7c00      	ldrb	r0, [r0, #16]
   d6a96:	f7fe fd49 	bl	d552c <hal_usart_is_enabled>
   d6a9a:	e7f2      	b.n	d6a82 <pinAvailable+0x5a>
   d6a9c:	2003e644 	.word	0x2003e644
   d6aa0:	2003e648 	.word	0x2003e648

000d6aa4 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6aa4:	2823      	cmp	r0, #35	; 0x23
{
   d6aa6:	b538      	push	{r3, r4, r5, lr}
   d6aa8:	4604      	mov	r4, r0
   d6aaa:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6aac:	d80a      	bhi.n	d6ac4 <pinMode+0x20>
   d6aae:	29ff      	cmp	r1, #255	; 0xff
   d6ab0:	d008      	beq.n	d6ac4 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d6ab2:	f7ff ffb9 	bl	d6a28 <pinAvailable>
   d6ab6:	b128      	cbz	r0, d6ac4 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d6ab8:	4629      	mov	r1, r5
   d6aba:	4620      	mov	r0, r4
}
   d6abc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d6ac0:	f7fe bd74 	b.w	d55ac <HAL_Pin_Mode>
}
   d6ac4:	bd38      	pop	{r3, r4, r5, pc}

000d6ac6 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d6ac6:	b538      	push	{r3, r4, r5, lr}
   d6ac8:	4604      	mov	r4, r0
   d6aca:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d6acc:	f7fe fd76 	bl	d55bc <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d6ad0:	28ff      	cmp	r0, #255	; 0xff
   d6ad2:	d010      	beq.n	d6af6 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d6ad4:	2806      	cmp	r0, #6
   d6ad6:	d804      	bhi.n	d6ae2 <digitalWrite+0x1c>
   d6ad8:	234d      	movs	r3, #77	; 0x4d
   d6ada:	fa23 f000 	lsr.w	r0, r3, r0
   d6ade:	07c3      	lsls	r3, r0, #31
   d6ae0:	d409      	bmi.n	d6af6 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d6ae2:	4620      	mov	r0, r4
   d6ae4:	f7ff ffa0 	bl	d6a28 <pinAvailable>
   d6ae8:	b128      	cbz	r0, d6af6 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d6aea:	4629      	mov	r1, r5
   d6aec:	4620      	mov	r0, r4
}
   d6aee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d6af2:	f7fe bd6b 	b.w	d55cc <HAL_GPIO_Write>
}
   d6af6:	bd38      	pop	{r3, r4, r5, pc}

000d6af8 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d6af8:	b510      	push	{r4, lr}
   d6afa:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d6afc:	f7fe fd5e 	bl	d55bc <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   d6b00:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   d6b02:	b2db      	uxtb	r3, r3
   d6b04:	2b01      	cmp	r3, #1
   d6b06:	d908      	bls.n	d6b1a <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d6b08:	4620      	mov	r0, r4
   d6b0a:	f7ff ff8d 	bl	d6a28 <pinAvailable>
   d6b0e:	b120      	cbz	r0, d6b1a <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d6b10:	4620      	mov	r0, r4
}
   d6b12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   d6b16:	f7fe bd61 	b.w	d55dc <HAL_GPIO_Read>
}
   d6b1a:	2000      	movs	r0, #0
   d6b1c:	bd10      	pop	{r4, pc}

000d6b1e <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d6b1e:	280d      	cmp	r0, #13
{
   d6b20:	b510      	push	{r4, lr}
   d6b22:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   d6b24:	bf9c      	itt	ls
   d6b26:	340e      	addls	r4, #14
   d6b28:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d6b2a:	4620      	mov	r0, r4
   d6b2c:	f7ff ff7c 	bl	d6a28 <pinAvailable>
   d6b30:	b150      	cbz	r0, d6b48 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d6b32:	2103      	movs	r1, #3
   d6b34:	4620      	mov	r0, r4
   d6b36:	f7fe fd31 	bl	d559c <HAL_Validate_Pin_Function>
   d6b3a:	2803      	cmp	r0, #3
   d6b3c:	d104      	bne.n	d6b48 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   d6b3e:	4620      	mov	r0, r4
}
   d6b40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   d6b44:	f7fe bd52 	b.w	d55ec <hal_adc_read>
}
   d6b48:	2000      	movs	r0, #0
   d6b4a:	bd10      	pop	{r4, pc}

000d6b4c <pulseIn>:
 */
uint32_t pulseIn(pin_t pin, uint16_t value) {

    // NO SAFETY CHECKS!!! WILD WILD WEST!!!

    return HAL_Pulse_In(pin, value);
   d6b4c:	f7fe bd56 	b.w	d55fc <HAL_Pulse_In>

000d6b50 <__aeabi_atexit>:
   d6b50:	460b      	mov	r3, r1
   d6b52:	4601      	mov	r1, r0
   d6b54:	4618      	mov	r0, r3
   d6b56:	f002 b923 	b.w	d8da0 <__cxa_atexit>

000d6b5a <_ZdlPvj>:
   d6b5a:	f7fd baa0 	b.w	d409e <_ZdlPv>

000d6b5e <_ZnajRKSt9nothrow_t>:
   d6b5e:	f7fd ba9c 	b.w	d409a <_Znaj>

000d6b62 <_ZSt25__throw_bad_function_callv>:
   d6b62:	b508      	push	{r3, lr}
   d6b64:	f7fe fe2e 	bl	d57c4 <abort>

000d6b68 <pow>:
   d6b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6b6c:	ed2d 8b02 	vpush	{d8}
   d6b70:	b08d      	sub	sp, #52	; 0x34
   d6b72:	ec57 6b10 	vmov	r6, r7, d0
   d6b76:	ec55 4b11 	vmov	r4, r5, d1
   d6b7a:	f000 f9ad 	bl	d6ed8 <__ieee754_pow>
   d6b7e:	4bae      	ldr	r3, [pc, #696]	; (d6e38 <pow+0x2d0>)
   d6b80:	eeb0 8a40 	vmov.f32	s16, s0
   d6b84:	eef0 8a60 	vmov.f32	s17, s1
   d6b88:	f993 9000 	ldrsb.w	r9, [r3]
   d6b8c:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
   d6b90:	d037      	beq.n	d6c02 <pow+0x9a>
   d6b92:	4622      	mov	r2, r4
   d6b94:	462b      	mov	r3, r5
   d6b96:	4620      	mov	r0, r4
   d6b98:	4629      	mov	r1, r5
   d6b9a:	f001 fdd9 	bl	d8750 <__aeabi_dcmpun>
   d6b9e:	4683      	mov	fp, r0
   d6ba0:	bb78      	cbnz	r0, d6c02 <pow+0x9a>
   d6ba2:	4632      	mov	r2, r6
   d6ba4:	463b      	mov	r3, r7
   d6ba6:	4630      	mov	r0, r6
   d6ba8:	4639      	mov	r1, r7
   d6baa:	f001 fdd1 	bl	d8750 <__aeabi_dcmpun>
   d6bae:	4680      	mov	r8, r0
   d6bb0:	2800      	cmp	r0, #0
   d6bb2:	f040 8093 	bne.w	d6cdc <pow+0x174>
   d6bb6:	f04f 0a00 	mov.w	sl, #0
   d6bba:	f04f 0b00 	mov.w	fp, #0
   d6bbe:	4630      	mov	r0, r6
   d6bc0:	4639      	mov	r1, r7
   d6bc2:	4652      	mov	r2, sl
   d6bc4:	465b      	mov	r3, fp
   d6bc6:	f001 fd91 	bl	d86ec <__aeabi_dcmpeq>
   d6bca:	b318      	cbz	r0, d6c14 <pow+0xac>
   d6bcc:	4652      	mov	r2, sl
   d6bce:	465b      	mov	r3, fp
   d6bd0:	4620      	mov	r0, r4
   d6bd2:	4629      	mov	r1, r5
   d6bd4:	f001 fd8a 	bl	d86ec <__aeabi_dcmpeq>
   d6bd8:	9000      	str	r0, [sp, #0]
   d6bda:	2800      	cmp	r0, #0
   d6bdc:	d057      	beq.n	d6c8e <pow+0x126>
   d6bde:	4b97      	ldr	r3, [pc, #604]	; (d6e3c <pow+0x2d4>)
   d6be0:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   d6be4:	2201      	movs	r2, #1
   d6be6:	e9cd 6704 	strd	r6, r7, [sp, #16]
   d6bea:	e9cd 4506 	strd	r4, r5, [sp, #24]
   d6bee:	e9cd ab08 	strd	sl, fp, [sp, #32]
   d6bf2:	9202      	str	r2, [sp, #8]
   d6bf4:	9303      	str	r3, [sp, #12]
   d6bf6:	f1b9 0f00 	cmp.w	r9, #0
   d6bfa:	f000 8089 	beq.w	d6d10 <pow+0x1a8>
   d6bfe:	ed9f 8b8a 	vldr	d8, [pc, #552]	; d6e28 <pow+0x2c0>
   d6c02:	eeb0 0a48 	vmov.f32	s0, s16
   d6c06:	eef0 0a68 	vmov.f32	s1, s17
   d6c0a:	b00d      	add	sp, #52	; 0x34
   d6c0c:	ecbd 8b02 	vpop	{d8}
   d6c10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6c14:	eeb0 0a48 	vmov.f32	s0, s16
   d6c18:	eef0 0a68 	vmov.f32	s1, s17
   d6c1c:	f001 f804 	bl	d7c28 <finite>
   d6c20:	4680      	mov	r8, r0
   d6c22:	2800      	cmp	r0, #0
   d6c24:	f000 8082 	beq.w	d6d2c <pow+0x1c4>
   d6c28:	f04f 0800 	mov.w	r8, #0
   d6c2c:	f04f 0900 	mov.w	r9, #0
   d6c30:	ec51 0b18 	vmov	r0, r1, d8
   d6c34:	4642      	mov	r2, r8
   d6c36:	464b      	mov	r3, r9
   d6c38:	f001 fd58 	bl	d86ec <__aeabi_dcmpeq>
   d6c3c:	2800      	cmp	r0, #0
   d6c3e:	d0e0      	beq.n	d6c02 <pow+0x9a>
   d6c40:	ec47 6b10 	vmov	d0, r6, r7
   d6c44:	f000 fff0 	bl	d7c28 <finite>
   d6c48:	2800      	cmp	r0, #0
   d6c4a:	d0da      	beq.n	d6c02 <pow+0x9a>
   d6c4c:	ec45 4b10 	vmov	d0, r4, r5
   d6c50:	f000 ffea 	bl	d7c28 <finite>
   d6c54:	2800      	cmp	r0, #0
   d6c56:	d0d4      	beq.n	d6c02 <pow+0x9a>
   d6c58:	4b77      	ldr	r3, [pc, #476]	; (d6e38 <pow+0x2d0>)
   d6c5a:	4a78      	ldr	r2, [pc, #480]	; (d6e3c <pow+0x2d4>)
   d6c5c:	f993 3000 	ldrsb.w	r3, [r3]
   d6c60:	9203      	str	r2, [sp, #12]
   d6c62:	2104      	movs	r1, #4
   d6c64:	2200      	movs	r2, #0
   d6c66:	2b02      	cmp	r3, #2
   d6c68:	e9cd 6704 	strd	r6, r7, [sp, #16]
   d6c6c:	e9cd 4506 	strd	r4, r5, [sp, #24]
   d6c70:	e9cd 8908 	strd	r8, r9, [sp, #32]
   d6c74:	9102      	str	r1, [sp, #8]
   d6c76:	920a      	str	r2, [sp, #40]	; 0x28
   d6c78:	d004      	beq.n	d6c84 <pow+0x11c>
   d6c7a:	a802      	add	r0, sp, #8
   d6c7c:	f000 ffe0 	bl	d7c40 <matherr>
   d6c80:	2800      	cmp	r0, #0
   d6c82:	d14a      	bne.n	d6d1a <pow+0x1b2>
   d6c84:	f7fe fdae 	bl	d57e4 <__errno>
   d6c88:	2322      	movs	r3, #34	; 0x22
   d6c8a:	6003      	str	r3, [r0, #0]
   d6c8c:	e045      	b.n	d6d1a <pow+0x1b2>
   d6c8e:	ec45 4b10 	vmov	d0, r4, r5
   d6c92:	f000 ffc9 	bl	d7c28 <finite>
   d6c96:	2800      	cmp	r0, #0
   d6c98:	d0b3      	beq.n	d6c02 <pow+0x9a>
   d6c9a:	4652      	mov	r2, sl
   d6c9c:	465b      	mov	r3, fp
   d6c9e:	4620      	mov	r0, r4
   d6ca0:	4629      	mov	r1, r5
   d6ca2:	f001 fd2d 	bl	d8700 <__aeabi_dcmplt>
   d6ca6:	2800      	cmp	r0, #0
   d6ca8:	d0ab      	beq.n	d6c02 <pow+0x9a>
   d6caa:	4b63      	ldr	r3, [pc, #396]	; (d6e38 <pow+0x2d0>)
   d6cac:	9900      	ldr	r1, [sp, #0]
   d6cae:	4a63      	ldr	r2, [pc, #396]	; (d6e3c <pow+0x2d4>)
   d6cb0:	f993 3000 	ldrsb.w	r3, [r3]
   d6cb4:	910a      	str	r1, [sp, #40]	; 0x28
   d6cb6:	2101      	movs	r1, #1
   d6cb8:	e9cd 6704 	strd	r6, r7, [sp, #16]
   d6cbc:	e9cd 4506 	strd	r4, r5, [sp, #24]
   d6cc0:	e9cd 1202 	strd	r1, r2, [sp, #8]
   d6cc4:	2b00      	cmp	r3, #0
   d6cc6:	d16f      	bne.n	d6da8 <pow+0x240>
   d6cc8:	e9cd ab08 	strd	sl, fp, [sp, #32]
   d6ccc:	a802      	add	r0, sp, #8
   d6cce:	f000 ffb7 	bl	d7c40 <matherr>
   d6cd2:	2800      	cmp	r0, #0
   d6cd4:	d06e      	beq.n	d6db4 <pow+0x24c>
   d6cd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d6cd8:	b32b      	cbz	r3, d6d26 <pow+0x1be>
   d6cda:	e020      	b.n	d6d1e <pow+0x1b6>
   d6cdc:	2200      	movs	r2, #0
   d6cde:	2300      	movs	r3, #0
   d6ce0:	4620      	mov	r0, r4
   d6ce2:	4629      	mov	r1, r5
   d6ce4:	f001 fd02 	bl	d86ec <__aeabi_dcmpeq>
   d6ce8:	2800      	cmp	r0, #0
   d6cea:	d08a      	beq.n	d6c02 <pow+0x9a>
   d6cec:	ed9f 8b4e 	vldr	d8, [pc, #312]	; d6e28 <pow+0x2c0>
   d6cf0:	4b52      	ldr	r3, [pc, #328]	; (d6e3c <pow+0x2d4>)
   d6cf2:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
   d6cf6:	2201      	movs	r2, #1
   d6cf8:	f1b9 0f02 	cmp.w	r9, #2
   d6cfc:	e9cd 6704 	strd	r6, r7, [sp, #16]
   d6d00:	e9cd 4506 	strd	r4, r5, [sp, #24]
   d6d04:	ed8d 8b08 	vstr	d8, [sp, #32]
   d6d08:	9202      	str	r2, [sp, #8]
   d6d0a:	9303      	str	r3, [sp, #12]
   d6d0c:	f43f af79 	beq.w	d6c02 <pow+0x9a>
   d6d10:	a802      	add	r0, sp, #8
   d6d12:	f000 ff95 	bl	d7c40 <matherr>
   d6d16:	2800      	cmp	r0, #0
   d6d18:	d051      	beq.n	d6dbe <pow+0x256>
   d6d1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d6d1c:	b11b      	cbz	r3, d6d26 <pow+0x1be>
   d6d1e:	f7fe fd61 	bl	d57e4 <__errno>
   d6d22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d6d24:	6003      	str	r3, [r0, #0]
   d6d26:	ed9d 8b08 	vldr	d8, [sp, #32]
   d6d2a:	e76a      	b.n	d6c02 <pow+0x9a>
   d6d2c:	ec47 6b10 	vmov	d0, r6, r7
   d6d30:	f000 ff7a 	bl	d7c28 <finite>
   d6d34:	2800      	cmp	r0, #0
   d6d36:	f43f af77 	beq.w	d6c28 <pow+0xc0>
   d6d3a:	ec45 4b10 	vmov	d0, r4, r5
   d6d3e:	f000 ff73 	bl	d7c28 <finite>
   d6d42:	2800      	cmp	r0, #0
   d6d44:	f43f af70 	beq.w	d6c28 <pow+0xc0>
   d6d48:	ec53 2b18 	vmov	r2, r3, d8
   d6d4c:	ee18 0a10 	vmov	r0, s16
   d6d50:	4619      	mov	r1, r3
   d6d52:	f001 fcfd 	bl	d8750 <__aeabi_dcmpun>
   d6d56:	4b38      	ldr	r3, [pc, #224]	; (d6e38 <pow+0x2d0>)
   d6d58:	2800      	cmp	r0, #0
   d6d5a:	f040 8096 	bne.w	d6e8a <pow+0x322>
   d6d5e:	f993 8000 	ldrsb.w	r8, [r3]
   d6d62:	900a      	str	r0, [sp, #40]	; 0x28
   d6d64:	2303      	movs	r3, #3
   d6d66:	9302      	str	r3, [sp, #8]
   d6d68:	4b34      	ldr	r3, [pc, #208]	; (d6e3c <pow+0x2d4>)
   d6d6a:	9303      	str	r3, [sp, #12]
   d6d6c:	e9cd 6704 	strd	r6, r7, [sp, #16]
   d6d70:	e9cd 4506 	strd	r4, r5, [sp, #24]
   d6d74:	f1b8 0f00 	cmp.w	r8, #0
   d6d78:	d126      	bne.n	d6dc8 <pow+0x260>
   d6d7a:	f8df 90d0 	ldr.w	r9, [pc, #208]	; d6e4c <pow+0x2e4>
   d6d7e:	f04f 4860 	mov.w	r8, #3758096384	; 0xe0000000
   d6d82:	4652      	mov	r2, sl
   d6d84:	465b      	mov	r3, fp
   d6d86:	4630      	mov	r0, r6
   d6d88:	4639      	mov	r1, r7
   d6d8a:	e9cd 8908 	strd	r8, r9, [sp, #32]
   d6d8e:	f001 fcb7 	bl	d8700 <__aeabi_dcmplt>
   d6d92:	bb48      	cbnz	r0, d6de8 <pow+0x280>
   d6d94:	a802      	add	r0, sp, #8
   d6d96:	f000 ff53 	bl	d7c40 <matherr>
   d6d9a:	2800      	cmp	r0, #0
   d6d9c:	d19b      	bne.n	d6cd6 <pow+0x16e>
   d6d9e:	f7fe fd21 	bl	d57e4 <__errno>
   d6da2:	2322      	movs	r3, #34	; 0x22
   d6da4:	6003      	str	r3, [r0, #0]
   d6da6:	e796      	b.n	d6cd6 <pow+0x16e>
   d6da8:	4925      	ldr	r1, [pc, #148]	; (d6e40 <pow+0x2d8>)
   d6daa:	2000      	movs	r0, #0
   d6dac:	2b02      	cmp	r3, #2
   d6dae:	e9cd 0108 	strd	r0, r1, [sp, #32]
   d6db2:	d18b      	bne.n	d6ccc <pow+0x164>
   d6db4:	f7fe fd16 	bl	d57e4 <__errno>
   d6db8:	2321      	movs	r3, #33	; 0x21
   d6dba:	6003      	str	r3, [r0, #0]
   d6dbc:	e78b      	b.n	d6cd6 <pow+0x16e>
   d6dbe:	f7fe fd11 	bl	d57e4 <__errno>
   d6dc2:	2321      	movs	r3, #33	; 0x21
   d6dc4:	6003      	str	r3, [r0, #0]
   d6dc6:	e7a8      	b.n	d6d1a <pow+0x1b2>
   d6dc8:	ed9f 7b19 	vldr	d7, [pc, #100]	; d6e30 <pow+0x2c8>
   d6dcc:	4652      	mov	r2, sl
   d6dce:	465b      	mov	r3, fp
   d6dd0:	4630      	mov	r0, r6
   d6dd2:	4639      	mov	r1, r7
   d6dd4:	ed8d 7b08 	vstr	d7, [sp, #32]
   d6dd8:	f001 fc92 	bl	d8700 <__aeabi_dcmplt>
   d6ddc:	2800      	cmp	r0, #0
   d6dde:	d137      	bne.n	d6e50 <pow+0x2e8>
   d6de0:	f1b8 0f02 	cmp.w	r8, #2
   d6de4:	d0db      	beq.n	d6d9e <pow+0x236>
   d6de6:	e7d5      	b.n	d6d94 <pow+0x22c>
   d6de8:	4b16      	ldr	r3, [pc, #88]	; (d6e44 <pow+0x2dc>)
   d6dea:	2200      	movs	r2, #0
   d6dec:	4620      	mov	r0, r4
   d6dee:	4629      	mov	r1, r5
   d6df0:	f001 fa14 	bl	d821c <__aeabi_dmul>
   d6df4:	4602      	mov	r2, r0
   d6df6:	460b      	mov	r3, r1
   d6df8:	ec43 2b10 	vmov	d0, r2, r3
   d6dfc:	e9cd 2300 	strd	r2, r3, [sp]
   d6e00:	f000 ff2a 	bl	d7c58 <rint>
   d6e04:	e9dd 2300 	ldrd	r2, r3, [sp]
   d6e08:	ec51 0b10 	vmov	r0, r1, d0
   d6e0c:	f001 fc6e 	bl	d86ec <__aeabi_dcmpeq>
   d6e10:	2800      	cmp	r0, #0
   d6e12:	d136      	bne.n	d6e82 <pow+0x31a>
   d6e14:	4b0c      	ldr	r3, [pc, #48]	; (d6e48 <pow+0x2e0>)
   d6e16:	4908      	ldr	r1, [pc, #32]	; (d6e38 <pow+0x2d0>)
   d6e18:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d6e1c:	e9cd 2308 	strd	r2, r3, [sp, #32]
   d6e20:	f991 8000 	ldrsb.w	r8, [r1]
   d6e24:	e7dc      	b.n	d6de0 <pow+0x278>
   d6e26:	bf00      	nop
   d6e28:	00000000 	.word	0x00000000
   d6e2c:	3ff00000 	.word	0x3ff00000
   d6e30:	00000000 	.word	0x00000000
   d6e34:	7ff00000 	.word	0x7ff00000
   d6e38:	2003e43c 	.word	0x2003e43c
   d6e3c:	000d9580 	.word	0x000d9580
   d6e40:	fff00000 	.word	0xfff00000
   d6e44:	3fe00000 	.word	0x3fe00000
   d6e48:	c7efffff 	.word	0xc7efffff
   d6e4c:	47efffff 	.word	0x47efffff
   d6e50:	4b1c      	ldr	r3, [pc, #112]	; (d6ec4 <pow+0x35c>)
   d6e52:	2200      	movs	r2, #0
   d6e54:	4620      	mov	r0, r4
   d6e56:	4629      	mov	r1, r5
   d6e58:	f001 f9e0 	bl	d821c <__aeabi_dmul>
   d6e5c:	4602      	mov	r2, r0
   d6e5e:	460b      	mov	r3, r1
   d6e60:	ec43 2b10 	vmov	d0, r2, r3
   d6e64:	e9cd 2300 	strd	r2, r3, [sp]
   d6e68:	f000 fef6 	bl	d7c58 <rint>
   d6e6c:	e9dd 2300 	ldrd	r2, r3, [sp]
   d6e70:	ec51 0b10 	vmov	r0, r1, d0
   d6e74:	f001 fc3a 	bl	d86ec <__aeabi_dcmpeq>
   d6e78:	b918      	cbnz	r0, d6e82 <pow+0x31a>
   d6e7a:	4b13      	ldr	r3, [pc, #76]	; (d6ec8 <pow+0x360>)
   d6e7c:	2200      	movs	r2, #0
   d6e7e:	e9cd 2308 	strd	r2, r3, [sp, #32]
   d6e82:	4b12      	ldr	r3, [pc, #72]	; (d6ecc <pow+0x364>)
   d6e84:	f993 8000 	ldrsb.w	r8, [r3]
   d6e88:	e7aa      	b.n	d6de0 <pow+0x278>
   d6e8a:	f993 9000 	ldrsb.w	r9, [r3]
   d6e8e:	4b10      	ldr	r3, [pc, #64]	; (d6ed0 <pow+0x368>)
   d6e90:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   d6e94:	2201      	movs	r2, #1
   d6e96:	e9cd 6704 	strd	r6, r7, [sp, #16]
   d6e9a:	e9cd 4506 	strd	r4, r5, [sp, #24]
   d6e9e:	e9cd 2302 	strd	r2, r3, [sp, #8]
   d6ea2:	f1b9 0f00 	cmp.w	r9, #0
   d6ea6:	f43f af0f 	beq.w	d6cc8 <pow+0x160>
   d6eaa:	4652      	mov	r2, sl
   d6eac:	465b      	mov	r3, fp
   d6eae:	4650      	mov	r0, sl
   d6eb0:	4659      	mov	r1, fp
   d6eb2:	f001 fadd 	bl	d8470 <__aeabi_ddiv>
   d6eb6:	f1b9 0f02 	cmp.w	r9, #2
   d6eba:	e9cd 0108 	strd	r0, r1, [sp, #32]
   d6ebe:	f43f af79 	beq.w	d6db4 <pow+0x24c>
   d6ec2:	e703      	b.n	d6ccc <pow+0x164>
   d6ec4:	3fe00000 	.word	0x3fe00000
   d6ec8:	fff00000 	.word	0xfff00000
   d6ecc:	2003e43c 	.word	0x2003e43c
   d6ed0:	000d9580 	.word	0x000d9580
   d6ed4:	00000000 	.word	0x00000000

000d6ed8 <__ieee754_pow>:
   d6ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6edc:	ec57 6b11 	vmov	r6, r7, d1
   d6ee0:	ed2d 8b0a 	vpush	{d8-d12}
   d6ee4:	f027 4a00 	bic.w	sl, r7, #2147483648	; 0x80000000
   d6ee8:	ea5a 0206 	orrs.w	r2, sl, r6
   d6eec:	b089      	sub	sp, #36	; 0x24
   d6eee:	d03d      	beq.n	d6f6c <__ieee754_pow+0x94>
   d6ef0:	ec55 4b10 	vmov	r4, r5, d0
   d6ef4:	4976      	ldr	r1, [pc, #472]	; (d70d0 <__ieee754_pow+0x1f8>)
   d6ef6:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
   d6efa:	4588      	cmp	r8, r1
   d6efc:	ee10 2a10 	vmov	r2, s0
   d6f00:	46a9      	mov	r9, r5
   d6f02:	dc2c      	bgt.n	d6f5e <__ieee754_pow+0x86>
   d6f04:	ee11 3a10 	vmov	r3, s2
   d6f08:	46bb      	mov	fp, r7
   d6f0a:	d03a      	beq.n	d6f82 <__ieee754_pow+0xaa>
   d6f0c:	458a      	cmp	sl, r1
   d6f0e:	dc26      	bgt.n	d6f5e <__ieee754_pow+0x86>
   d6f10:	496f      	ldr	r1, [pc, #444]	; (d70d0 <__ieee754_pow+0x1f8>)
   d6f12:	458a      	cmp	sl, r1
   d6f14:	d021      	beq.n	d6f5a <__ieee754_pow+0x82>
   d6f16:	f1b9 0f00 	cmp.w	r9, #0
   d6f1a:	db3d      	blt.n	d6f98 <__ieee754_pow+0xc0>
   d6f1c:	2100      	movs	r1, #0
   d6f1e:	9103      	str	r1, [sp, #12]
   d6f20:	2b00      	cmp	r3, #0
   d6f22:	d155      	bne.n	d6fd0 <__ieee754_pow+0xf8>
   d6f24:	4b6a      	ldr	r3, [pc, #424]	; (d70d0 <__ieee754_pow+0x1f8>)
   d6f26:	459a      	cmp	sl, r3
   d6f28:	f000 80a8 	beq.w	d707c <__ieee754_pow+0x1a4>
   d6f2c:	4b69      	ldr	r3, [pc, #420]	; (d70d4 <__ieee754_pow+0x1fc>)
   d6f2e:	459a      	cmp	sl, r3
   d6f30:	f000 80b6 	beq.w	d70a0 <__ieee754_pow+0x1c8>
   d6f34:	f1bb 4f80 	cmp.w	fp, #1073741824	; 0x40000000
   d6f38:	f000 8501 	beq.w	d793e <__ieee754_pow+0xa66>
   d6f3c:	4b66      	ldr	r3, [pc, #408]	; (d70d8 <__ieee754_pow+0x200>)
   d6f3e:	459b      	cmp	fp, r3
   d6f40:	d146      	bne.n	d6fd0 <__ieee754_pow+0xf8>
   d6f42:	f1b9 0f00 	cmp.w	r9, #0
   d6f46:	db43      	blt.n	d6fd0 <__ieee754_pow+0xf8>
   d6f48:	ec45 4b10 	vmov	d0, r4, r5
   d6f4c:	b009      	add	sp, #36	; 0x24
   d6f4e:	ecbd 8b0a 	vpop	{d8-d12}
   d6f52:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6f56:	f000 bd99 	b.w	d7a8c <__ieee754_sqrt>
   d6f5a:	2b00      	cmp	r3, #0
   d6f5c:	d0db      	beq.n	d6f16 <__ieee754_pow+0x3e>
   d6f5e:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   d6f62:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   d6f66:	ea58 0302 	orrs.w	r3, r8, r2
   d6f6a:	d10d      	bne.n	d6f88 <__ieee754_pow+0xb0>
   d6f6c:	ed9f 7b54 	vldr	d7, [pc, #336]	; d70c0 <__ieee754_pow+0x1e8>
   d6f70:	ed8d 7b00 	vstr	d7, [sp]
   d6f74:	ed9d 0b00 	vldr	d0, [sp]
   d6f78:	b009      	add	sp, #36	; 0x24
   d6f7a:	ecbd 8b0a 	vpop	{d8-d12}
   d6f7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6f82:	b90c      	cbnz	r4, d6f88 <__ieee754_pow+0xb0>
   d6f84:	45c2      	cmp	sl, r8
   d6f86:	ddc3      	ble.n	d6f10 <__ieee754_pow+0x38>
   d6f88:	4854      	ldr	r0, [pc, #336]	; (d70dc <__ieee754_pow+0x204>)
   d6f8a:	b009      	add	sp, #36	; 0x24
   d6f8c:	ecbd 8b0a 	vpop	{d8-d12}
   d6f90:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6f94:	f000 be58 	b.w	d7c48 <nan>
   d6f98:	4951      	ldr	r1, [pc, #324]	; (d70e0 <__ieee754_pow+0x208>)
   d6f9a:	458a      	cmp	sl, r1
   d6f9c:	f300 8087 	bgt.w	d70ae <__ieee754_pow+0x1d6>
   d6fa0:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
   d6fa4:	458a      	cmp	sl, r1
   d6fa6:	dd0f      	ble.n	d6fc8 <__ieee754_pow+0xf0>
   d6fa8:	ea4f 512a 	mov.w	r1, sl, asr #20
   d6fac:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
   d6fb0:	2914      	cmp	r1, #20
   d6fb2:	f340 84ce 	ble.w	d7952 <__ieee754_pow+0xa7a>
   d6fb6:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
   d6fba:	fa23 f001 	lsr.w	r0, r3, r1
   d6fbe:	fa00 f101 	lsl.w	r1, r0, r1
   d6fc2:	4299      	cmp	r1, r3
   d6fc4:	f000 8520 	beq.w	d7a08 <__ieee754_pow+0xb30>
   d6fc8:	2100      	movs	r1, #0
   d6fca:	9103      	str	r1, [sp, #12]
   d6fcc:	2b00      	cmp	r3, #0
   d6fce:	d0ad      	beq.n	d6f2c <__ieee754_pow+0x54>
   d6fd0:	ec45 4b10 	vmov	d0, r4, r5
   d6fd4:	9206      	str	r2, [sp, #24]
   d6fd6:	f000 fe1d 	bl	d7c14 <fabs>
   d6fda:	9a06      	ldr	r2, [sp, #24]
   d6fdc:	ed8d 0b00 	vstr	d0, [sp]
   d6fe0:	bb5a      	cbnz	r2, d703a <__ieee754_pow+0x162>
   d6fe2:	f1b8 0f00 	cmp.w	r8, #0
   d6fe6:	d004      	beq.n	d6ff2 <__ieee754_pow+0x11a>
   d6fe8:	4b3a      	ldr	r3, [pc, #232]	; (d70d4 <__ieee754_pow+0x1fc>)
   d6fea:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
   d6fee:	429a      	cmp	r2, r3
   d6ff0:	d123      	bne.n	d703a <__ieee754_pow+0x162>
   d6ff2:	f1bb 0f00 	cmp.w	fp, #0
   d6ff6:	da07      	bge.n	d7008 <__ieee754_pow+0x130>
   d6ff8:	e9dd 2300 	ldrd	r2, r3, [sp]
   d6ffc:	4935      	ldr	r1, [pc, #212]	; (d70d4 <__ieee754_pow+0x1fc>)
   d6ffe:	2000      	movs	r0, #0
   d7000:	f001 fa36 	bl	d8470 <__aeabi_ddiv>
   d7004:	e9cd 0100 	strd	r0, r1, [sp]
   d7008:	f1b9 0f00 	cmp.w	r9, #0
   d700c:	dab2      	bge.n	d6f74 <__ieee754_pow+0x9c>
   d700e:	9b03      	ldr	r3, [sp, #12]
   d7010:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   d7014:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   d7018:	ea58 0303 	orrs.w	r3, r8, r3
   d701c:	f040 84be 	bne.w	d799c <__ieee754_pow+0xac4>
   d7020:	e9dd 2300 	ldrd	r2, r3, [sp]
   d7024:	4610      	mov	r0, r2
   d7026:	4619      	mov	r1, r3
   d7028:	f000 ff40 	bl	d7eac <__aeabi_dsub>
   d702c:	4602      	mov	r2, r0
   d702e:	460b      	mov	r3, r1
   d7030:	f001 fa1e 	bl	d8470 <__aeabi_ddiv>
   d7034:	e9cd 0100 	strd	r0, r1, [sp]
   d7038:	e79c      	b.n	d6f74 <__ieee754_pow+0x9c>
   d703a:	9a03      	ldr	r2, [sp, #12]
   d703c:	ea4f 73d9 	mov.w	r3, r9, lsr #31
   d7040:	3b01      	subs	r3, #1
   d7042:	9306      	str	r3, [sp, #24]
   d7044:	4313      	orrs	r3, r2
   d7046:	d035      	beq.n	d70b4 <__ieee754_pow+0x1dc>
   d7048:	4b26      	ldr	r3, [pc, #152]	; (d70e4 <__ieee754_pow+0x20c>)
   d704a:	459a      	cmp	sl, r3
   d704c:	dd4e      	ble.n	d70ec <__ieee754_pow+0x214>
   d704e:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
   d7052:	459a      	cmp	sl, r3
   d7054:	4b24      	ldr	r3, [pc, #144]	; (d70e8 <__ieee754_pow+0x210>)
   d7056:	f340 83ed 	ble.w	d7834 <__ieee754_pow+0x95c>
   d705a:	4598      	cmp	r8, r3
   d705c:	f340 836b 	ble.w	d7736 <__ieee754_pow+0x85e>
   d7060:	f1bb 0f00 	cmp.w	fp, #0
   d7064:	f340 836b 	ble.w	d773e <__ieee754_pow+0x866>
   d7068:	a317      	add	r3, pc, #92	; (adr r3, d70c8 <__ieee754_pow+0x1f0>)
   d706a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d706e:	4610      	mov	r0, r2
   d7070:	4619      	mov	r1, r3
   d7072:	f001 f8d3 	bl	d821c <__aeabi_dmul>
   d7076:	e9cd 0100 	strd	r0, r1, [sp]
   d707a:	e77b      	b.n	d6f74 <__ieee754_pow+0x9c>
   d707c:	f108 4340 	add.w	r3, r8, #3221225472	; 0xc0000000
   d7080:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   d7084:	4313      	orrs	r3, r2
   d7086:	f43f af71 	beq.w	d6f6c <__ieee754_pow+0x94>
   d708a:	4b17      	ldr	r3, [pc, #92]	; (d70e8 <__ieee754_pow+0x210>)
   d708c:	4598      	cmp	r8, r3
   d708e:	f340 8388 	ble.w	d77a2 <__ieee754_pow+0x8ca>
   d7092:	f1bb 0f00 	cmp.w	fp, #0
   d7096:	f2c0 8352 	blt.w	d773e <__ieee754_pow+0x866>
   d709a:	e9cd 6700 	strd	r6, r7, [sp]
   d709e:	e769      	b.n	d6f74 <__ieee754_pow+0x9c>
   d70a0:	f1bb 0f00 	cmp.w	fp, #0
   d70a4:	f2c0 8441 	blt.w	d792a <__ieee754_pow+0xa52>
   d70a8:	e9cd 4500 	strd	r4, r5, [sp]
   d70ac:	e762      	b.n	d6f74 <__ieee754_pow+0x9c>
   d70ae:	2102      	movs	r1, #2
   d70b0:	9103      	str	r1, [sp, #12]
   d70b2:	e735      	b.n	d6f20 <__ieee754_pow+0x48>
   d70b4:	4622      	mov	r2, r4
   d70b6:	462b      	mov	r3, r5
   d70b8:	e7b4      	b.n	d7024 <__ieee754_pow+0x14c>
   d70ba:	bf00      	nop
   d70bc:	f3af 8000 	nop.w
   d70c0:	00000000 	.word	0x00000000
   d70c4:	3ff00000 	.word	0x3ff00000
   d70c8:	8800759c 	.word	0x8800759c
   d70cc:	7e37e43c 	.word	0x7e37e43c
   d70d0:	7ff00000 	.word	0x7ff00000
   d70d4:	3ff00000 	.word	0x3ff00000
   d70d8:	3fe00000 	.word	0x3fe00000
   d70dc:	000d9584 	.word	0x000d9584
   d70e0:	433fffff 	.word	0x433fffff
   d70e4:	41e00000 	.word	0x41e00000
   d70e8:	3fefffff 	.word	0x3fefffff
   d70ec:	4be4      	ldr	r3, [pc, #912]	; (d7480 <__ieee754_pow+0x5a8>)
   d70ee:	ea09 0303 	and.w	r3, r9, r3
   d70f2:	2b00      	cmp	r3, #0
   d70f4:	f040 8416 	bne.w	d7924 <__ieee754_pow+0xa4c>
   d70f8:	e9dd 0100 	ldrd	r0, r1, [sp]
   d70fc:	4be1      	ldr	r3, [pc, #900]	; (d7484 <__ieee754_pow+0x5ac>)
   d70fe:	2200      	movs	r2, #0
   d7100:	f001 f88c 	bl	d821c <__aeabi_dmul>
   d7104:	e9cd 0100 	strd	r0, r1, [sp]
   d7108:	f8dd 8004 	ldr.w	r8, [sp, #4]
   d710c:	f06f 0034 	mvn.w	r0, #52	; 0x34
   d7110:	ea4f 5328 	mov.w	r3, r8, asr #20
   d7114:	49dc      	ldr	r1, [pc, #880]	; (d7488 <__ieee754_pow+0x5b0>)
   d7116:	f3c8 0213 	ubfx	r2, r8, #0, #20
   d711a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   d711e:	f042 587f 	orr.w	r8, r2, #1069547520	; 0x3fc00000
   d7122:	1818      	adds	r0, r3, r0
   d7124:	428a      	cmp	r2, r1
   d7126:	9007      	str	r0, [sp, #28]
   d7128:	f448 1840 	orr.w	r8, r8, #3145728	; 0x300000
   d712c:	f340 83e9 	ble.w	d7902 <__ieee754_pow+0xa2a>
   d7130:	4bd6      	ldr	r3, [pc, #856]	; (d748c <__ieee754_pow+0x5b4>)
   d7132:	429a      	cmp	r2, r3
   d7134:	f340 843e 	ble.w	d79b4 <__ieee754_pow+0xadc>
   d7138:	ed9f 7bbb 	vldr	d7, [pc, #748]	; d7428 <__ieee754_pow+0x550>
   d713c:	eeb0 ba47 	vmov.f32	s22, s14
   d7140:	eef0 ba67 	vmov.f32	s23, s15
   d7144:	eeb0 ca47 	vmov.f32	s24, s14
   d7148:	eef0 ca67 	vmov.f32	s25, s15
   d714c:	ed9f 7bb8 	vldr	d7, [pc, #736]	; d7430 <__ieee754_pow+0x558>
   d7150:	3001      	adds	r0, #1
   d7152:	ec54 3b17 	vmov	r3, r4, d7
   d7156:	9007      	str	r0, [sp, #28]
   d7158:	f5a8 1880 	sub.w	r8, r8, #1048576	; 0x100000
   d715c:	f04f 0900 	mov.w	r9, #0
   d7160:	e9dd ab00 	ldrd	sl, fp, [sp]
   d7164:	ec44 3b18 	vmov	d8, r3, r4
   d7168:	461a      	mov	r2, r3
   d716a:	4650      	mov	r0, sl
   d716c:	4623      	mov	r3, r4
   d716e:	4641      	mov	r1, r8
   d7170:	f000 fe9c 	bl	d7eac <__aeabi_dsub>
   d7174:	ec53 2b18 	vmov	r2, r3, d8
   d7178:	4604      	mov	r4, r0
   d717a:	460d      	mov	r5, r1
   d717c:	4650      	mov	r0, sl
   d717e:	4641      	mov	r1, r8
   d7180:	f000 fe96 	bl	d7eb0 <__adddf3>
   d7184:	4602      	mov	r2, r0
   d7186:	460b      	mov	r3, r1
   d7188:	2000      	movs	r0, #0
   d718a:	49c1      	ldr	r1, [pc, #772]	; (d7490 <__ieee754_pow+0x5b8>)
   d718c:	f001 f970 	bl	d8470 <__aeabi_ddiv>
   d7190:	ec45 4b1a 	vmov	d10, r4, r5
   d7194:	ec41 0b19 	vmov	d9, r0, r1
   d7198:	ec51 0b1a 	vmov	r0, r1, d10
   d719c:	ec53 2b19 	vmov	r2, r3, d9
   d71a0:	f001 f83c 	bl	d821c <__aeabi_dmul>
   d71a4:	46c3      	mov	fp, r8
   d71a6:	ea4f 0868 	mov.w	r8, r8, asr #1
   d71aa:	f048 5800 	orr.w	r8, r8, #536870912	; 0x20000000
   d71ae:	f508 2300 	add.w	r3, r8, #524288	; 0x80000
   d71b2:	eb03 0509 	add.w	r5, r3, r9
   d71b6:	460a      	mov	r2, r1
   d71b8:	2300      	movs	r3, #0
   d71ba:	4601      	mov	r1, r0
   d71bc:	e9cd 1200 	strd	r1, r2, [sp]
   d71c0:	9300      	str	r3, [sp, #0]
   d71c2:	e9dd 8900 	ldrd	r8, r9, [sp]
   d71c6:	2400      	movs	r4, #0
   d71c8:	e9cd 1204 	strd	r1, r2, [sp, #16]
   d71cc:	462b      	mov	r3, r5
   d71ce:	4622      	mov	r2, r4
   d71d0:	4640      	mov	r0, r8
   d71d2:	4649      	mov	r1, r9
   d71d4:	f001 f822 	bl	d821c <__aeabi_dmul>
   d71d8:	4602      	mov	r2, r0
   d71da:	460b      	mov	r3, r1
   d71dc:	ec51 0b1a 	vmov	r0, r1, d10
   d71e0:	f000 fe64 	bl	d7eac <__aeabi_dsub>
   d71e4:	ec41 0b17 	vmov	d7, r0, r1
   d71e8:	ec53 2b18 	vmov	r2, r3, d8
   d71ec:	4620      	mov	r0, r4
   d71ee:	4629      	mov	r1, r5
   d71f0:	ec55 4b17 	vmov	r4, r5, d7
   d71f4:	f000 fe5a 	bl	d7eac <__aeabi_dsub>
   d71f8:	4602      	mov	r2, r0
   d71fa:	460b      	mov	r3, r1
   d71fc:	4650      	mov	r0, sl
   d71fe:	4659      	mov	r1, fp
   d7200:	f000 fe54 	bl	d7eac <__aeabi_dsub>
   d7204:	4642      	mov	r2, r8
   d7206:	464b      	mov	r3, r9
   d7208:	f001 f808 	bl	d821c <__aeabi_dmul>
   d720c:	4602      	mov	r2, r0
   d720e:	460b      	mov	r3, r1
   d7210:	4620      	mov	r0, r4
   d7212:	4629      	mov	r1, r5
   d7214:	f000 fe4a 	bl	d7eac <__aeabi_dsub>
   d7218:	ec53 2b19 	vmov	r2, r3, d9
   d721c:	f000 fffe 	bl	d821c <__aeabi_dmul>
   d7220:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
   d7224:	4604      	mov	r4, r0
   d7226:	460d      	mov	r5, r1
   d7228:	4652      	mov	r2, sl
   d722a:	465b      	mov	r3, fp
   d722c:	4650      	mov	r0, sl
   d722e:	4659      	mov	r1, fp
   d7230:	f000 fff4 	bl	d821c <__aeabi_dmul>
   d7234:	a380      	add	r3, pc, #512	; (adr r3, d7438 <__ieee754_pow+0x560>)
   d7236:	e9d3 2300 	ldrd	r2, r3, [r3]
   d723a:	ec45 4b1a 	vmov	d10, r4, r5
   d723e:	4604      	mov	r4, r0
   d7240:	460d      	mov	r5, r1
   d7242:	f000 ffeb 	bl	d821c <__aeabi_dmul>
   d7246:	a37e      	add	r3, pc, #504	; (adr r3, d7440 <__ieee754_pow+0x568>)
   d7248:	e9d3 2300 	ldrd	r2, r3, [r3]
   d724c:	f000 fe30 	bl	d7eb0 <__adddf3>
   d7250:	4622      	mov	r2, r4
   d7252:	462b      	mov	r3, r5
   d7254:	f000 ffe2 	bl	d821c <__aeabi_dmul>
   d7258:	a37b      	add	r3, pc, #492	; (adr r3, d7448 <__ieee754_pow+0x570>)
   d725a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d725e:	f000 fe27 	bl	d7eb0 <__adddf3>
   d7262:	4622      	mov	r2, r4
   d7264:	462b      	mov	r3, r5
   d7266:	f000 ffd9 	bl	d821c <__aeabi_dmul>
   d726a:	a379      	add	r3, pc, #484	; (adr r3, d7450 <__ieee754_pow+0x578>)
   d726c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7270:	f000 fe1e 	bl	d7eb0 <__adddf3>
   d7274:	4622      	mov	r2, r4
   d7276:	462b      	mov	r3, r5
   d7278:	f000 ffd0 	bl	d821c <__aeabi_dmul>
   d727c:	a376      	add	r3, pc, #472	; (adr r3, d7458 <__ieee754_pow+0x580>)
   d727e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7282:	f000 fe15 	bl	d7eb0 <__adddf3>
   d7286:	4622      	mov	r2, r4
   d7288:	462b      	mov	r3, r5
   d728a:	f000 ffc7 	bl	d821c <__aeabi_dmul>
   d728e:	a374      	add	r3, pc, #464	; (adr r3, d7460 <__ieee754_pow+0x588>)
   d7290:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7294:	f000 fe0c 	bl	d7eb0 <__adddf3>
   d7298:	4622      	mov	r2, r4
   d729a:	462b      	mov	r3, r5
   d729c:	4604      	mov	r4, r0
   d729e:	460d      	mov	r5, r1
   d72a0:	4610      	mov	r0, r2
   d72a2:	4619      	mov	r1, r3
   d72a4:	f000 ffba 	bl	d821c <__aeabi_dmul>
   d72a8:	4602      	mov	r2, r0
   d72aa:	460b      	mov	r3, r1
   d72ac:	4620      	mov	r0, r4
   d72ae:	4629      	mov	r1, r5
   d72b0:	f000 ffb4 	bl	d821c <__aeabi_dmul>
   d72b4:	4642      	mov	r2, r8
   d72b6:	4604      	mov	r4, r0
   d72b8:	460d      	mov	r5, r1
   d72ba:	464b      	mov	r3, r9
   d72bc:	4650      	mov	r0, sl
   d72be:	4659      	mov	r1, fp
   d72c0:	e9cd ab04 	strd	sl, fp, [sp, #16]
   d72c4:	f000 fdf4 	bl	d7eb0 <__adddf3>
   d72c8:	ec53 2b1a 	vmov	r2, r3, d10
   d72cc:	f000 ffa6 	bl	d821c <__aeabi_dmul>
   d72d0:	4622      	mov	r2, r4
   d72d2:	462b      	mov	r3, r5
   d72d4:	f000 fdec 	bl	d7eb0 <__adddf3>
   d72d8:	4642      	mov	r2, r8
   d72da:	4604      	mov	r4, r0
   d72dc:	460d      	mov	r5, r1
   d72de:	464b      	mov	r3, r9
   d72e0:	4640      	mov	r0, r8
   d72e2:	4649      	mov	r1, r9
   d72e4:	f000 ff9a 	bl	d821c <__aeabi_dmul>
   d72e8:	ec45 4b19 	vmov	d9, r4, r5
   d72ec:	4b69      	ldr	r3, [pc, #420]	; (d7494 <__ieee754_pow+0x5bc>)
   d72ee:	2200      	movs	r2, #0
   d72f0:	4682      	mov	sl, r0
   d72f2:	468b      	mov	fp, r1
   d72f4:	f000 fddc 	bl	d7eb0 <__adddf3>
   d72f8:	ec53 2b19 	vmov	r2, r3, d9
   d72fc:	f000 fdd8 	bl	d7eb0 <__adddf3>
   d7300:	9c00      	ldr	r4, [sp, #0]
   d7302:	460d      	mov	r5, r1
   d7304:	4622      	mov	r2, r4
   d7306:	462b      	mov	r3, r5
   d7308:	4640      	mov	r0, r8
   d730a:	4649      	mov	r1, r9
   d730c:	f000 ff86 	bl	d821c <__aeabi_dmul>
   d7310:	4b60      	ldr	r3, [pc, #384]	; (d7494 <__ieee754_pow+0x5bc>)
   d7312:	4680      	mov	r8, r0
   d7314:	4689      	mov	r9, r1
   d7316:	2200      	movs	r2, #0
   d7318:	4620      	mov	r0, r4
   d731a:	4629      	mov	r1, r5
   d731c:	f000 fdc6 	bl	d7eac <__aeabi_dsub>
   d7320:	4652      	mov	r2, sl
   d7322:	465b      	mov	r3, fp
   d7324:	f000 fdc2 	bl	d7eac <__aeabi_dsub>
   d7328:	4602      	mov	r2, r0
   d732a:	460b      	mov	r3, r1
   d732c:	ec51 0b19 	vmov	r0, r1, d9
   d7330:	f000 fdbc 	bl	d7eac <__aeabi_dsub>
   d7334:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   d7338:	f000 ff70 	bl	d821c <__aeabi_dmul>
   d733c:	ec49 8b18 	vmov	d8, r8, r9
   d7340:	4622      	mov	r2, r4
   d7342:	4680      	mov	r8, r0
   d7344:	4689      	mov	r9, r1
   d7346:	462b      	mov	r3, r5
   d7348:	ec51 0b1a 	vmov	r0, r1, d10
   d734c:	f000 ff66 	bl	d821c <__aeabi_dmul>
   d7350:	4602      	mov	r2, r0
   d7352:	460b      	mov	r3, r1
   d7354:	4640      	mov	r0, r8
   d7356:	4649      	mov	r1, r9
   d7358:	f000 fdaa 	bl	d7eb0 <__adddf3>
   d735c:	4682      	mov	sl, r0
   d735e:	468b      	mov	fp, r1
   d7360:	4652      	mov	r2, sl
   d7362:	465b      	mov	r3, fp
   d7364:	ec51 0b18 	vmov	r0, r1, d8
   d7368:	f000 fda2 	bl	d7eb0 <__adddf3>
   d736c:	9c00      	ldr	r4, [sp, #0]
   d736e:	a33e      	add	r3, pc, #248	; (adr r3, d7468 <__ieee754_pow+0x590>)
   d7370:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7374:	4620      	mov	r0, r4
   d7376:	460d      	mov	r5, r1
   d7378:	f000 ff50 	bl	d821c <__aeabi_dmul>
   d737c:	ec53 2b18 	vmov	r2, r3, d8
   d7380:	4680      	mov	r8, r0
   d7382:	4689      	mov	r9, r1
   d7384:	4620      	mov	r0, r4
   d7386:	4629      	mov	r1, r5
   d7388:	f000 fd90 	bl	d7eac <__aeabi_dsub>
   d738c:	4602      	mov	r2, r0
   d738e:	460b      	mov	r3, r1
   d7390:	4650      	mov	r0, sl
   d7392:	4659      	mov	r1, fp
   d7394:	f000 fd8a 	bl	d7eac <__aeabi_dsub>
   d7398:	a335      	add	r3, pc, #212	; (adr r3, d7470 <__ieee754_pow+0x598>)
   d739a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d739e:	f000 ff3d 	bl	d821c <__aeabi_dmul>
   d73a2:	ec49 8b19 	vmov	d9, r8, r9
   d73a6:	a334      	add	r3, pc, #208	; (adr r3, d7478 <__ieee754_pow+0x5a0>)
   d73a8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d73ac:	4680      	mov	r8, r0
   d73ae:	4689      	mov	r9, r1
   d73b0:	4620      	mov	r0, r4
   d73b2:	4629      	mov	r1, r5
   d73b4:	f000 ff32 	bl	d821c <__aeabi_dmul>
   d73b8:	4602      	mov	r2, r0
   d73ba:	460b      	mov	r3, r1
   d73bc:	4640      	mov	r0, r8
   d73be:	4649      	mov	r1, r9
   d73c0:	f000 fd76 	bl	d7eb0 <__adddf3>
   d73c4:	ec53 2b1c 	vmov	r2, r3, d12
   d73c8:	f000 fd72 	bl	d7eb0 <__adddf3>
   d73cc:	4682      	mov	sl, r0
   d73ce:	9807      	ldr	r0, [sp, #28]
   d73d0:	468b      	mov	fp, r1
   d73d2:	f000 feb9 	bl	d8148 <__aeabi_i2d>
   d73d6:	4652      	mov	r2, sl
   d73d8:	4680      	mov	r8, r0
   d73da:	4689      	mov	r9, r1
   d73dc:	465b      	mov	r3, fp
   d73de:	ec51 0b19 	vmov	r0, r1, d9
   d73e2:	f000 fd65 	bl	d7eb0 <__adddf3>
   d73e6:	ec53 2b1b 	vmov	r2, r3, d11
   d73ea:	f000 fd61 	bl	d7eb0 <__adddf3>
   d73ee:	4642      	mov	r2, r8
   d73f0:	464b      	mov	r3, r9
   d73f2:	f000 fd5d 	bl	d7eb0 <__adddf3>
   d73f6:	9c00      	ldr	r4, [sp, #0]
   d73f8:	4642      	mov	r2, r8
   d73fa:	464b      	mov	r3, r9
   d73fc:	4620      	mov	r0, r4
   d73fe:	460d      	mov	r5, r1
   d7400:	f000 fd54 	bl	d7eac <__aeabi_dsub>
   d7404:	ec53 2b1b 	vmov	r2, r3, d11
   d7408:	f000 fd50 	bl	d7eac <__aeabi_dsub>
   d740c:	ec53 2b19 	vmov	r2, r3, d9
   d7410:	f000 fd4c 	bl	d7eac <__aeabi_dsub>
   d7414:	4602      	mov	r2, r0
   d7416:	460b      	mov	r3, r1
   d7418:	4650      	mov	r0, sl
   d741a:	4659      	mov	r1, fp
   d741c:	f000 fd46 	bl	d7eac <__aeabi_dsub>
   d7420:	4682      	mov	sl, r0
   d7422:	468b      	mov	fp, r1
   d7424:	e038      	b.n	d7498 <__ieee754_pow+0x5c0>
   d7426:	bf00      	nop
	...
   d7434:	3ff00000 	.word	0x3ff00000
   d7438:	4a454eef 	.word	0x4a454eef
   d743c:	3fca7e28 	.word	0x3fca7e28
   d7440:	93c9db65 	.word	0x93c9db65
   d7444:	3fcd864a 	.word	0x3fcd864a
   d7448:	a91d4101 	.word	0xa91d4101
   d744c:	3fd17460 	.word	0x3fd17460
   d7450:	518f264d 	.word	0x518f264d
   d7454:	3fd55555 	.word	0x3fd55555
   d7458:	db6fabff 	.word	0xdb6fabff
   d745c:	3fdb6db6 	.word	0x3fdb6db6
   d7460:	33333303 	.word	0x33333303
   d7464:	3fe33333 	.word	0x3fe33333
   d7468:	e0000000 	.word	0xe0000000
   d746c:	3feec709 	.word	0x3feec709
   d7470:	dc3a03fd 	.word	0xdc3a03fd
   d7474:	3feec709 	.word	0x3feec709
   d7478:	145b01f5 	.word	0x145b01f5
   d747c:	be3e2fe0 	.word	0xbe3e2fe0
   d7480:	7ff00000 	.word	0x7ff00000
   d7484:	43400000 	.word	0x43400000
   d7488:	0003988e 	.word	0x0003988e
   d748c:	000bb679 	.word	0x000bb679
   d7490:	3ff00000 	.word	0x3ff00000
   d7494:	40080000 	.word	0x40080000
   d7498:	9b03      	ldr	r3, [sp, #12]
   d749a:	9a06      	ldr	r2, [sp, #24]
   d749c:	3b01      	subs	r3, #1
   d749e:	4313      	orrs	r3, r2
   d74a0:	f040 8178 	bne.w	d7794 <__ieee754_pow+0x8bc>
   d74a4:	ed9f 7bc4 	vldr	d7, [pc, #784]	; d77b8 <__ieee754_pow+0x8e0>
   d74a8:	eeb0 9a47 	vmov.f32	s18, s14
   d74ac:	eef0 9a67 	vmov.f32	s19, s15
   d74b0:	2300      	movs	r3, #0
   d74b2:	e9cd 6700 	strd	r6, r7, [sp]
   d74b6:	9300      	str	r3, [sp, #0]
   d74b8:	e9dd 8900 	ldrd	r8, r9, [sp]
   d74bc:	4630      	mov	r0, r6
   d74be:	4642      	mov	r2, r8
   d74c0:	4639      	mov	r1, r7
   d74c2:	464b      	mov	r3, r9
   d74c4:	f000 fcf2 	bl	d7eac <__aeabi_dsub>
   d74c8:	4622      	mov	r2, r4
   d74ca:	462b      	mov	r3, r5
   d74cc:	f000 fea6 	bl	d821c <__aeabi_dmul>
   d74d0:	4632      	mov	r2, r6
   d74d2:	463b      	mov	r3, r7
   d74d4:	4606      	mov	r6, r0
   d74d6:	460f      	mov	r7, r1
   d74d8:	4650      	mov	r0, sl
   d74da:	4659      	mov	r1, fp
   d74dc:	f000 fe9e 	bl	d821c <__aeabi_dmul>
   d74e0:	4602      	mov	r2, r0
   d74e2:	460b      	mov	r3, r1
   d74e4:	4630      	mov	r0, r6
   d74e6:	4639      	mov	r1, r7
   d74e8:	f000 fce2 	bl	d7eb0 <__adddf3>
   d74ec:	4642      	mov	r2, r8
   d74ee:	4682      	mov	sl, r0
   d74f0:	468b      	mov	fp, r1
   d74f2:	464b      	mov	r3, r9
   d74f4:	4620      	mov	r0, r4
   d74f6:	4629      	mov	r1, r5
   d74f8:	f000 fe90 	bl	d821c <__aeabi_dmul>
   d74fc:	4606      	mov	r6, r0
   d74fe:	460f      	mov	r7, r1
   d7500:	463b      	mov	r3, r7
   d7502:	4650      	mov	r0, sl
   d7504:	4659      	mov	r1, fp
   d7506:	4632      	mov	r2, r6
   d7508:	f000 fcd2 	bl	d7eb0 <__adddf3>
   d750c:	4bc4      	ldr	r3, [pc, #784]	; (d7820 <__ieee754_pow+0x948>)
   d750e:	4299      	cmp	r1, r3
   d7510:	4604      	mov	r4, r0
   d7512:	460d      	mov	r5, r1
   d7514:	4688      	mov	r8, r1
   d7516:	f340 8117 	ble.w	d7748 <__ieee754_pow+0x870>
   d751a:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
   d751e:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
   d7522:	4303      	orrs	r3, r0
   d7524:	f040 822a 	bne.w	d797c <__ieee754_pow+0xaa4>
   d7528:	a3a5      	add	r3, pc, #660	; (adr r3, d77c0 <__ieee754_pow+0x8e8>)
   d752a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d752e:	4650      	mov	r0, sl
   d7530:	4659      	mov	r1, fp
   d7532:	f000 fcbd 	bl	d7eb0 <__adddf3>
   d7536:	4632      	mov	r2, r6
   d7538:	ec41 0b18 	vmov	d8, r0, r1
   d753c:	463b      	mov	r3, r7
   d753e:	4620      	mov	r0, r4
   d7540:	4629      	mov	r1, r5
   d7542:	f000 fcb3 	bl	d7eac <__aeabi_dsub>
   d7546:	4602      	mov	r2, r0
   d7548:	460b      	mov	r3, r1
   d754a:	ec51 0b18 	vmov	r0, r1, d8
   d754e:	f001 f8f5 	bl	d873c <__aeabi_dcmpgt>
   d7552:	2800      	cmp	r0, #0
   d7554:	f040 8212 	bne.w	d797c <__ieee754_pow+0xaa4>
   d7558:	f3c8 530a 	ubfx	r3, r8, #20, #11
   d755c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   d7560:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   d7564:	fa42 f303 	asr.w	r3, r2, r3
   d7568:	4443      	add	r3, r8
   d756a:	49ae      	ldr	r1, [pc, #696]	; (d7824 <__ieee754_pow+0x94c>)
   d756c:	f3c3 520a 	ubfx	r2, r3, #20, #11
   d7570:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
   d7574:	fa41 fc02 	asr.w	ip, r1, r2
   d7578:	f3c3 0513 	ubfx	r5, r3, #0, #20
   d757c:	ea23 010c 	bic.w	r1, r3, ip
   d7580:	f1c2 0414 	rsb	r4, r2, #20
   d7584:	f445 1580 	orr.w	r5, r5, #1048576	; 0x100000
   d7588:	f1b8 0f00 	cmp.w	r8, #0
   d758c:	460b      	mov	r3, r1
   d758e:	fa45 f104 	asr.w	r1, r5, r4
   d7592:	9103      	str	r1, [sp, #12]
   d7594:	f04f 0000 	mov.w	r0, #0
   d7598:	bfb8      	it	lt
   d759a:	4249      	neglt	r1, r1
   d759c:	4602      	mov	r2, r0
   d759e:	bfb8      	it	lt
   d75a0:	9103      	strlt	r1, [sp, #12]
   d75a2:	4630      	mov	r0, r6
   d75a4:	4639      	mov	r1, r7
   d75a6:	f000 fc81 	bl	d7eac <__aeabi_dsub>
   d75aa:	4606      	mov	r6, r0
   d75ac:	460f      	mov	r7, r1
   d75ae:	463b      	mov	r3, r7
   d75b0:	4650      	mov	r0, sl
   d75b2:	4659      	mov	r1, fp
   d75b4:	4632      	mov	r2, r6
   d75b6:	f000 fc7b 	bl	d7eb0 <__adddf3>
   d75ba:	9b03      	ldr	r3, [sp, #12]
   d75bc:	051b      	lsls	r3, r3, #20
   d75be:	9300      	str	r3, [sp, #0]
   d75c0:	460d      	mov	r5, r1
   d75c2:	2400      	movs	r4, #0
   d75c4:	a380      	add	r3, pc, #512	; (adr r3, d77c8 <__ieee754_pow+0x8f0>)
   d75c6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d75ca:	4620      	mov	r0, r4
   d75cc:	4629      	mov	r1, r5
   d75ce:	f000 fe25 	bl	d821c <__aeabi_dmul>
   d75d2:	4632      	mov	r2, r6
   d75d4:	4680      	mov	r8, r0
   d75d6:	4689      	mov	r9, r1
   d75d8:	463b      	mov	r3, r7
   d75da:	4620      	mov	r0, r4
   d75dc:	4629      	mov	r1, r5
   d75de:	f000 fc65 	bl	d7eac <__aeabi_dsub>
   d75e2:	4602      	mov	r2, r0
   d75e4:	460b      	mov	r3, r1
   d75e6:	4650      	mov	r0, sl
   d75e8:	4659      	mov	r1, fp
   d75ea:	f000 fc5f 	bl	d7eac <__aeabi_dsub>
   d75ee:	a378      	add	r3, pc, #480	; (adr r3, d77d0 <__ieee754_pow+0x8f8>)
   d75f0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d75f4:	f000 fe12 	bl	d821c <__aeabi_dmul>
   d75f8:	a377      	add	r3, pc, #476	; (adr r3, d77d8 <__ieee754_pow+0x900>)
   d75fa:	e9d3 2300 	ldrd	r2, r3, [r3]
   d75fe:	4606      	mov	r6, r0
   d7600:	460f      	mov	r7, r1
   d7602:	4620      	mov	r0, r4
   d7604:	4629      	mov	r1, r5
   d7606:	f000 fe09 	bl	d821c <__aeabi_dmul>
   d760a:	4602      	mov	r2, r0
   d760c:	460b      	mov	r3, r1
   d760e:	4630      	mov	r0, r6
   d7610:	4639      	mov	r1, r7
   d7612:	f000 fc4d 	bl	d7eb0 <__adddf3>
   d7616:	4606      	mov	r6, r0
   d7618:	460f      	mov	r7, r1
   d761a:	4632      	mov	r2, r6
   d761c:	463b      	mov	r3, r7
   d761e:	4640      	mov	r0, r8
   d7620:	4649      	mov	r1, r9
   d7622:	f000 fc45 	bl	d7eb0 <__adddf3>
   d7626:	4642      	mov	r2, r8
   d7628:	464b      	mov	r3, r9
   d762a:	4604      	mov	r4, r0
   d762c:	460d      	mov	r5, r1
   d762e:	f000 fc3d 	bl	d7eac <__aeabi_dsub>
   d7632:	4602      	mov	r2, r0
   d7634:	460b      	mov	r3, r1
   d7636:	4630      	mov	r0, r6
   d7638:	4639      	mov	r1, r7
   d763a:	f000 fc37 	bl	d7eac <__aeabi_dsub>
   d763e:	4622      	mov	r2, r4
   d7640:	4682      	mov	sl, r0
   d7642:	468b      	mov	fp, r1
   d7644:	462b      	mov	r3, r5
   d7646:	4620      	mov	r0, r4
   d7648:	4629      	mov	r1, r5
   d764a:	f000 fde7 	bl	d821c <__aeabi_dmul>
   d764e:	a364      	add	r3, pc, #400	; (adr r3, d77e0 <__ieee754_pow+0x908>)
   d7650:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7654:	4606      	mov	r6, r0
   d7656:	460f      	mov	r7, r1
   d7658:	f000 fde0 	bl	d821c <__aeabi_dmul>
   d765c:	a362      	add	r3, pc, #392	; (adr r3, d77e8 <__ieee754_pow+0x910>)
   d765e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7662:	f000 fc23 	bl	d7eac <__aeabi_dsub>
   d7666:	4632      	mov	r2, r6
   d7668:	463b      	mov	r3, r7
   d766a:	f000 fdd7 	bl	d821c <__aeabi_dmul>
   d766e:	a360      	add	r3, pc, #384	; (adr r3, d77f0 <__ieee754_pow+0x918>)
   d7670:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7674:	f000 fc1c 	bl	d7eb0 <__adddf3>
   d7678:	4632      	mov	r2, r6
   d767a:	463b      	mov	r3, r7
   d767c:	f000 fdce 	bl	d821c <__aeabi_dmul>
   d7680:	a35d      	add	r3, pc, #372	; (adr r3, d77f8 <__ieee754_pow+0x920>)
   d7682:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7686:	f000 fc11 	bl	d7eac <__aeabi_dsub>
   d768a:	4632      	mov	r2, r6
   d768c:	463b      	mov	r3, r7
   d768e:	f000 fdc5 	bl	d821c <__aeabi_dmul>
   d7692:	a35b      	add	r3, pc, #364	; (adr r3, d7800 <__ieee754_pow+0x928>)
   d7694:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7698:	f000 fc0a 	bl	d7eb0 <__adddf3>
   d769c:	4632      	mov	r2, r6
   d769e:	463b      	mov	r3, r7
   d76a0:	f000 fdbc 	bl	d821c <__aeabi_dmul>
   d76a4:	4602      	mov	r2, r0
   d76a6:	460b      	mov	r3, r1
   d76a8:	4620      	mov	r0, r4
   d76aa:	4629      	mov	r1, r5
   d76ac:	f000 fbfe 	bl	d7eac <__aeabi_dsub>
   d76b0:	4606      	mov	r6, r0
   d76b2:	460f      	mov	r7, r1
   d76b4:	4632      	mov	r2, r6
   d76b6:	463b      	mov	r3, r7
   d76b8:	4620      	mov	r0, r4
   d76ba:	4629      	mov	r1, r5
   d76bc:	f000 fdae 	bl	d821c <__aeabi_dmul>
   d76c0:	2200      	movs	r2, #0
   d76c2:	4680      	mov	r8, r0
   d76c4:	4689      	mov	r9, r1
   d76c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d76ca:	4630      	mov	r0, r6
   d76cc:	4639      	mov	r1, r7
   d76ce:	f000 fbed 	bl	d7eac <__aeabi_dsub>
   d76d2:	4602      	mov	r2, r0
   d76d4:	460b      	mov	r3, r1
   d76d6:	4640      	mov	r0, r8
   d76d8:	4649      	mov	r1, r9
   d76da:	f000 fec9 	bl	d8470 <__aeabi_ddiv>
   d76de:	4652      	mov	r2, sl
   d76e0:	4606      	mov	r6, r0
   d76e2:	460f      	mov	r7, r1
   d76e4:	465b      	mov	r3, fp
   d76e6:	4620      	mov	r0, r4
   d76e8:	4629      	mov	r1, r5
   d76ea:	f000 fd97 	bl	d821c <__aeabi_dmul>
   d76ee:	4652      	mov	r2, sl
   d76f0:	465b      	mov	r3, fp
   d76f2:	f000 fbdd 	bl	d7eb0 <__adddf3>
   d76f6:	4602      	mov	r2, r0
   d76f8:	460b      	mov	r3, r1
   d76fa:	4630      	mov	r0, r6
   d76fc:	4639      	mov	r1, r7
   d76fe:	f000 fbd5 	bl	d7eac <__aeabi_dsub>
   d7702:	4622      	mov	r2, r4
   d7704:	462b      	mov	r3, r5
   d7706:	f000 fbd1 	bl	d7eac <__aeabi_dsub>
   d770a:	4602      	mov	r2, r0
   d770c:	460b      	mov	r3, r1
   d770e:	2000      	movs	r0, #0
   d7710:	4945      	ldr	r1, [pc, #276]	; (d7828 <__ieee754_pow+0x950>)
   d7712:	f000 fbcb 	bl	d7eac <__aeabi_dsub>
   d7716:	460b      	mov	r3, r1
   d7718:	9900      	ldr	r1, [sp, #0]
   d771a:	4419      	add	r1, r3
   d771c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d7720:	4602      	mov	r2, r0
   d7722:	f2c0 8169 	blt.w	d79f8 <__ieee754_pow+0xb20>
   d7726:	4610      	mov	r0, r2
   d7728:	ec53 2b19 	vmov	r2, r3, d9
   d772c:	f000 fd76 	bl	d821c <__aeabi_dmul>
   d7730:	e9cd 0100 	strd	r0, r1, [sp]
   d7734:	e41e      	b.n	d6f74 <__ieee754_pow+0x9c>
   d7736:	f1bb 0f00 	cmp.w	fp, #0
   d773a:	f6ff ac95 	blt.w	d7068 <__ieee754_pow+0x190>
   d773e:	ed9f 7b32 	vldr	d7, [pc, #200]	; d7808 <__ieee754_pow+0x930>
   d7742:	ed8d 7b00 	vstr	d7, [sp]
   d7746:	e415      	b.n	d6f74 <__ieee754_pow+0x9c>
   d7748:	f8df c0e4 	ldr.w	ip, [pc, #228]	; d7830 <__ieee754_pow+0x958>
   d774c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   d7750:	4563      	cmp	r3, ip
   d7752:	f340 810b 	ble.w	d796c <__ieee754_pow+0xa94>
   d7756:	4b35      	ldr	r3, [pc, #212]	; (d782c <__ieee754_pow+0x954>)
   d7758:	440b      	add	r3, r1
   d775a:	4303      	orrs	r3, r0
   d775c:	d10a      	bne.n	d7774 <__ieee754_pow+0x89c>
   d775e:	4632      	mov	r2, r6
   d7760:	463b      	mov	r3, r7
   d7762:	f000 fba3 	bl	d7eac <__aeabi_dsub>
   d7766:	4652      	mov	r2, sl
   d7768:	465b      	mov	r3, fp
   d776a:	f000 ffdd 	bl	d8728 <__aeabi_dcmpge>
   d776e:	2800      	cmp	r0, #0
   d7770:	f43f aef2 	beq.w	d7558 <__ieee754_pow+0x680>
   d7774:	a326      	add	r3, pc, #152	; (adr r3, d7810 <__ieee754_pow+0x938>)
   d7776:	e9d3 2300 	ldrd	r2, r3, [r3]
   d777a:	ec51 0b19 	vmov	r0, r1, d9
   d777e:	f000 fd4d 	bl	d821c <__aeabi_dmul>
   d7782:	a323      	add	r3, pc, #140	; (adr r3, d7810 <__ieee754_pow+0x938>)
   d7784:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7788:	f000 fd48 	bl	d821c <__aeabi_dmul>
   d778c:	e9cd 0100 	strd	r0, r1, [sp]
   d7790:	f7ff bbf0 	b.w	d6f74 <__ieee754_pow+0x9c>
   d7794:	ed9f 7b20 	vldr	d7, [pc, #128]	; d7818 <__ieee754_pow+0x940>
   d7798:	eeb0 9a47 	vmov.f32	s18, s14
   d779c:	eef0 9a67 	vmov.f32	s19, s15
   d77a0:	e686      	b.n	d74b0 <__ieee754_pow+0x5d8>
   d77a2:	f1bb 0f00 	cmp.w	fp, #0
   d77a6:	daca      	bge.n	d773e <__ieee754_pow+0x866>
   d77a8:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   d77ac:	9600      	str	r6, [sp, #0]
   d77ae:	9301      	str	r3, [sp, #4]
   d77b0:	f7ff bbe0 	b.w	d6f74 <__ieee754_pow+0x9c>
   d77b4:	f3af 8000 	nop.w
   d77b8:	00000000 	.word	0x00000000
   d77bc:	bff00000 	.word	0xbff00000
   d77c0:	652b82fe 	.word	0x652b82fe
   d77c4:	3c971547 	.word	0x3c971547
   d77c8:	00000000 	.word	0x00000000
   d77cc:	3fe62e43 	.word	0x3fe62e43
   d77d0:	fefa39ef 	.word	0xfefa39ef
   d77d4:	3fe62e42 	.word	0x3fe62e42
   d77d8:	0ca86c39 	.word	0x0ca86c39
   d77dc:	be205c61 	.word	0xbe205c61
   d77e0:	72bea4d0 	.word	0x72bea4d0
   d77e4:	3e663769 	.word	0x3e663769
   d77e8:	c5d26bf1 	.word	0xc5d26bf1
   d77ec:	3ebbbd41 	.word	0x3ebbbd41
   d77f0:	af25de2c 	.word	0xaf25de2c
   d77f4:	3f11566a 	.word	0x3f11566a
   d77f8:	16bebd93 	.word	0x16bebd93
   d77fc:	3f66c16c 	.word	0x3f66c16c
   d7800:	5555553e 	.word	0x5555553e
   d7804:	3fc55555 	.word	0x3fc55555
	...
   d7810:	c2f8f359 	.word	0xc2f8f359
   d7814:	01a56e1f 	.word	0x01a56e1f
   d7818:	00000000 	.word	0x00000000
   d781c:	3ff00000 	.word	0x3ff00000
   d7820:	408fffff 	.word	0x408fffff
   d7824:	000fffff 	.word	0x000fffff
   d7828:	3ff00000 	.word	0x3ff00000
   d782c:	3f6f3400 	.word	0x3f6f3400
   d7830:	4090cbff 	.word	0x4090cbff
   d7834:	4598      	cmp	r8, r3
   d7836:	f6ff af7e 	blt.w	d7736 <__ieee754_pow+0x85e>
   d783a:	4b91      	ldr	r3, [pc, #580]	; (d7a80 <__ieee754_pow+0xba8>)
   d783c:	4598      	cmp	r8, r3
   d783e:	f73f ac0f 	bgt.w	d7060 <__ieee754_pow+0x188>
   d7842:	4b8f      	ldr	r3, [pc, #572]	; (d7a80 <__ieee754_pow+0xba8>)
   d7844:	2200      	movs	r2, #0
   d7846:	e9dd 0100 	ldrd	r0, r1, [sp]
   d784a:	f000 fb2f 	bl	d7eac <__aeabi_dsub>
   d784e:	a378      	add	r3, pc, #480	; (adr r3, d7a30 <__ieee754_pow+0xb58>)
   d7850:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7854:	4604      	mov	r4, r0
   d7856:	460d      	mov	r5, r1
   d7858:	f000 fce0 	bl	d821c <__aeabi_dmul>
   d785c:	a376      	add	r3, pc, #472	; (adr r3, d7a38 <__ieee754_pow+0xb60>)
   d785e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7862:	4682      	mov	sl, r0
   d7864:	468b      	mov	fp, r1
   d7866:	4620      	mov	r0, r4
   d7868:	4629      	mov	r1, r5
   d786a:	f000 fcd7 	bl	d821c <__aeabi_dmul>
   d786e:	4b85      	ldr	r3, [pc, #532]	; (d7a84 <__ieee754_pow+0xbac>)
   d7870:	4680      	mov	r8, r0
   d7872:	4689      	mov	r9, r1
   d7874:	2200      	movs	r2, #0
   d7876:	4620      	mov	r0, r4
   d7878:	4629      	mov	r1, r5
   d787a:	f000 fccf 	bl	d821c <__aeabi_dmul>
   d787e:	4602      	mov	r2, r0
   d7880:	460b      	mov	r3, r1
   d7882:	a16f      	add	r1, pc, #444	; (adr r1, d7a40 <__ieee754_pow+0xb68>)
   d7884:	e9d1 0100 	ldrd	r0, r1, [r1]
   d7888:	f000 fb10 	bl	d7eac <__aeabi_dsub>
   d788c:	4622      	mov	r2, r4
   d788e:	462b      	mov	r3, r5
   d7890:	f000 fcc4 	bl	d821c <__aeabi_dmul>
   d7894:	4602      	mov	r2, r0
   d7896:	460b      	mov	r3, r1
   d7898:	2000      	movs	r0, #0
   d789a:	497b      	ldr	r1, [pc, #492]	; (d7a88 <__ieee754_pow+0xbb0>)
   d789c:	f000 fb06 	bl	d7eac <__aeabi_dsub>
   d78a0:	4622      	mov	r2, r4
   d78a2:	462b      	mov	r3, r5
   d78a4:	4604      	mov	r4, r0
   d78a6:	460d      	mov	r5, r1
   d78a8:	4610      	mov	r0, r2
   d78aa:	4619      	mov	r1, r3
   d78ac:	f000 fcb6 	bl	d821c <__aeabi_dmul>
   d78b0:	4602      	mov	r2, r0
   d78b2:	460b      	mov	r3, r1
   d78b4:	4620      	mov	r0, r4
   d78b6:	4629      	mov	r1, r5
   d78b8:	f000 fcb0 	bl	d821c <__aeabi_dmul>
   d78bc:	a362      	add	r3, pc, #392	; (adr r3, d7a48 <__ieee754_pow+0xb70>)
   d78be:	e9d3 2300 	ldrd	r2, r3, [r3]
   d78c2:	f000 fcab 	bl	d821c <__aeabi_dmul>
   d78c6:	4602      	mov	r2, r0
   d78c8:	460b      	mov	r3, r1
   d78ca:	4640      	mov	r0, r8
   d78cc:	4649      	mov	r1, r9
   d78ce:	f000 faed 	bl	d7eac <__aeabi_dsub>
   d78d2:	4680      	mov	r8, r0
   d78d4:	4689      	mov	r9, r1
   d78d6:	4650      	mov	r0, sl
   d78d8:	4659      	mov	r1, fp
   d78da:	4642      	mov	r2, r8
   d78dc:	464b      	mov	r3, r9
   d78de:	f000 fae7 	bl	d7eb0 <__adddf3>
   d78e2:	2400      	movs	r4, #0
   d78e4:	4652      	mov	r2, sl
   d78e6:	465b      	mov	r3, fp
   d78e8:	4620      	mov	r0, r4
   d78ea:	460d      	mov	r5, r1
   d78ec:	f000 fade 	bl	d7eac <__aeabi_dsub>
   d78f0:	4602      	mov	r2, r0
   d78f2:	460b      	mov	r3, r1
   d78f4:	4640      	mov	r0, r8
   d78f6:	4649      	mov	r1, r9
   d78f8:	f000 fad8 	bl	d7eac <__aeabi_dsub>
   d78fc:	4682      	mov	sl, r0
   d78fe:	468b      	mov	fp, r1
   d7900:	e5ca      	b.n	d7498 <__ieee754_pow+0x5c0>
   d7902:	ed9f 7b53 	vldr	d7, [pc, #332]	; d7a50 <__ieee754_pow+0xb78>
   d7906:	eeb0 ba47 	vmov.f32	s22, s14
   d790a:	eef0 ba67 	vmov.f32	s23, s15
   d790e:	eeb0 ca47 	vmov.f32	s24, s14
   d7912:	eef0 ca67 	vmov.f32	s25, s15
   d7916:	ed9f 7b50 	vldr	d7, [pc, #320]	; d7a58 <__ieee754_pow+0xb80>
   d791a:	f04f 0900 	mov.w	r9, #0
   d791e:	ec54 3b17 	vmov	r3, r4, d7
   d7922:	e41d      	b.n	d7160 <__ieee754_pow+0x288>
   d7924:	2000      	movs	r0, #0
   d7926:	f7ff bbf3 	b.w	d7110 <__ieee754_pow+0x238>
   d792a:	4955      	ldr	r1, [pc, #340]	; (d7a80 <__ieee754_pow+0xba8>)
   d792c:	4622      	mov	r2, r4
   d792e:	462b      	mov	r3, r5
   d7930:	2000      	movs	r0, #0
   d7932:	f000 fd9d 	bl	d8470 <__aeabi_ddiv>
   d7936:	e9cd 0100 	strd	r0, r1, [sp]
   d793a:	f7ff bb1b 	b.w	d6f74 <__ieee754_pow+0x9c>
   d793e:	4622      	mov	r2, r4
   d7940:	462b      	mov	r3, r5
   d7942:	4620      	mov	r0, r4
   d7944:	4629      	mov	r1, r5
   d7946:	f000 fc69 	bl	d821c <__aeabi_dmul>
   d794a:	e9cd 0100 	strd	r0, r1, [sp]
   d794e:	f7ff bb11 	b.w	d6f74 <__ieee754_pow+0x9c>
   d7952:	2b00      	cmp	r3, #0
   d7954:	d142      	bne.n	d79dc <__ieee754_pow+0xb04>
   d7956:	f1c1 0114 	rsb	r1, r1, #20
   d795a:	fa4a f001 	asr.w	r0, sl, r1
   d795e:	fa00 f101 	lsl.w	r1, r0, r1
   d7962:	4551      	cmp	r1, sl
   d7964:	d05a      	beq.n	d7a1c <__ieee754_pow+0xb44>
   d7966:	9303      	str	r3, [sp, #12]
   d7968:	f7ff bae0 	b.w	d6f2c <__ieee754_pow+0x54>
   d796c:	4a46      	ldr	r2, [pc, #280]	; (d7a88 <__ieee754_pow+0xbb0>)
   d796e:	4293      	cmp	r3, r2
   d7970:	dc5b      	bgt.n	d7a2a <__ieee754_pow+0xb52>
   d7972:	e9dd 1200 	ldrd	r1, r2, [sp]
   d7976:	9100      	str	r1, [sp, #0]
   d7978:	9103      	str	r1, [sp, #12]
   d797a:	e622      	b.n	d75c2 <__ieee754_pow+0x6ea>
   d797c:	a338      	add	r3, pc, #224	; (adr r3, d7a60 <__ieee754_pow+0xb88>)
   d797e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7982:	ec51 0b19 	vmov	r0, r1, d9
   d7986:	f000 fc49 	bl	d821c <__aeabi_dmul>
   d798a:	a335      	add	r3, pc, #212	; (adr r3, d7a60 <__ieee754_pow+0xb88>)
   d798c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7990:	f000 fc44 	bl	d821c <__aeabi_dmul>
   d7994:	e9cd 0100 	strd	r0, r1, [sp]
   d7998:	f7ff baec 	b.w	d6f74 <__ieee754_pow+0x9c>
   d799c:	9b03      	ldr	r3, [sp, #12]
   d799e:	2b01      	cmp	r3, #1
   d79a0:	f47f aae8 	bne.w	d6f74 <__ieee754_pow+0x9c>
   d79a4:	e9dd 2100 	ldrd	r2, r1, [sp]
   d79a8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d79ac:	e9cd 2300 	strd	r2, r3, [sp]
   d79b0:	f7ff bae0 	b.w	d6f74 <__ieee754_pow+0x9c>
   d79b4:	ed9f 7b2c 	vldr	d7, [pc, #176]	; d7a68 <__ieee754_pow+0xb90>
   d79b8:	eeb0 ba47 	vmov.f32	s22, s14
   d79bc:	eef0 ba67 	vmov.f32	s23, s15
   d79c0:	ed9f 7b2b 	vldr	d7, [pc, #172]	; d7a70 <__ieee754_pow+0xb98>
   d79c4:	eeb0 ca47 	vmov.f32	s24, s14
   d79c8:	eef0 ca67 	vmov.f32	s25, s15
   d79cc:	ed9f 7b2a 	vldr	d7, [pc, #168]	; d7a78 <__ieee754_pow+0xba0>
   d79d0:	f44f 2980 	mov.w	r9, #262144	; 0x40000
   d79d4:	ec54 3b17 	vmov	r3, r4, d7
   d79d8:	f7ff bbc2 	b.w	d7160 <__ieee754_pow+0x288>
   d79dc:	ec45 4b10 	vmov	d0, r4, r5
   d79e0:	9203      	str	r2, [sp, #12]
   d79e2:	f000 f917 	bl	d7c14 <fabs>
   d79e6:	9a03      	ldr	r2, [sp, #12]
   d79e8:	ed8d 0b00 	vstr	d0, [sp]
   d79ec:	2a00      	cmp	r2, #0
   d79ee:	f47f ab61 	bne.w	d70b4 <__ieee754_pow+0x1dc>
   d79f2:	9203      	str	r2, [sp, #12]
   d79f4:	f7ff baf5 	b.w	d6fe2 <__ieee754_pow+0x10a>
   d79f8:	9803      	ldr	r0, [sp, #12]
   d79fa:	ec43 2b10 	vmov	d0, r2, r3
   d79fe:	f000 f9bf 	bl	d7d80 <scalbn>
   d7a02:	ec51 0b10 	vmov	r0, r1, d0
   d7a06:	e68f      	b.n	d7728 <__ieee754_pow+0x850>
   d7a08:	f000 0001 	and.w	r0, r0, #1
   d7a0c:	f1c0 0102 	rsb	r1, r0, #2
   d7a10:	9103      	str	r1, [sp, #12]
   d7a12:	2b00      	cmp	r3, #0
   d7a14:	f43f aa8a 	beq.w	d6f2c <__ieee754_pow+0x54>
   d7a18:	f7ff bada 	b.w	d6fd0 <__ieee754_pow+0xf8>
   d7a1c:	f000 0001 	and.w	r0, r0, #1
   d7a20:	f1c0 0302 	rsb	r3, r0, #2
   d7a24:	9303      	str	r3, [sp, #12]
   d7a26:	f7ff ba81 	b.w	d6f2c <__ieee754_pow+0x54>
   d7a2a:	151b      	asrs	r3, r3, #20
   d7a2c:	e596      	b.n	d755c <__ieee754_pow+0x684>
   d7a2e:	bf00      	nop
   d7a30:	60000000 	.word	0x60000000
   d7a34:	3ff71547 	.word	0x3ff71547
   d7a38:	f85ddf44 	.word	0xf85ddf44
   d7a3c:	3e54ae0b 	.word	0x3e54ae0b
   d7a40:	55555555 	.word	0x55555555
   d7a44:	3fd55555 	.word	0x3fd55555
   d7a48:	652b82fe 	.word	0x652b82fe
   d7a4c:	3ff71547 	.word	0x3ff71547
	...
   d7a5c:	3ff00000 	.word	0x3ff00000
   d7a60:	8800759c 	.word	0x8800759c
   d7a64:	7e37e43c 	.word	0x7e37e43c
   d7a68:	40000000 	.word	0x40000000
   d7a6c:	3fe2b803 	.word	0x3fe2b803
   d7a70:	43cfd006 	.word	0x43cfd006
   d7a74:	3e4cfdeb 	.word	0x3e4cfdeb
   d7a78:	00000000 	.word	0x00000000
   d7a7c:	3ff80000 	.word	0x3ff80000
   d7a80:	3ff00000 	.word	0x3ff00000
   d7a84:	3fd00000 	.word	0x3fd00000
   d7a88:	3fe00000 	.word	0x3fe00000

000d7a8c <__ieee754_sqrt>:
   d7a8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7a90:	4a5f      	ldr	r2, [pc, #380]	; (d7c10 <__ieee754_sqrt+0x184>)
   d7a92:	ec57 6b10 	vmov	r6, r7, d0
   d7a96:	43ba      	bics	r2, r7
   d7a98:	f000 8098 	beq.w	d7bcc <__ieee754_sqrt+0x140>
   d7a9c:	2f00      	cmp	r7, #0
   d7a9e:	ee10 4a10 	vmov	r4, s0
   d7aa2:	463b      	mov	r3, r7
   d7aa4:	dd4e      	ble.n	d7b44 <__ieee754_sqrt+0xb8>
   d7aa6:	1539      	asrs	r1, r7, #20
   d7aa8:	d05b      	beq.n	d7b62 <__ieee754_sqrt+0xd6>
   d7aaa:	f3c3 0313 	ubfx	r3, r3, #0, #20
   d7aae:	07ca      	lsls	r2, r1, #31
   d7ab0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d7ab4:	f2a1 3eff 	subw	lr, r1, #1023	; 0x3ff
   d7ab8:	d403      	bmi.n	d7ac2 <__ieee754_sqrt+0x36>
   d7aba:	005b      	lsls	r3, r3, #1
   d7abc:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
   d7ac0:	0064      	lsls	r4, r4, #1
   d7ac2:	0fe2      	lsrs	r2, r4, #31
   d7ac4:	f04f 0c00 	mov.w	ip, #0
   d7ac8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   d7acc:	ea4f 0e6e 	mov.w	lr, lr, asr #1
   d7ad0:	0064      	lsls	r4, r4, #1
   d7ad2:	4666      	mov	r6, ip
   d7ad4:	2516      	movs	r5, #22
   d7ad6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   d7ada:	18b1      	adds	r1, r6, r2
   d7adc:	4299      	cmp	r1, r3
   d7ade:	dc02      	bgt.n	d7ae6 <__ieee754_sqrt+0x5a>
   d7ae0:	1a5b      	subs	r3, r3, r1
   d7ae2:	188e      	adds	r6, r1, r2
   d7ae4:	4494      	add	ip, r2
   d7ae6:	005b      	lsls	r3, r3, #1
   d7ae8:	3d01      	subs	r5, #1
   d7aea:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
   d7aee:	ea4f 0252 	mov.w	r2, r2, lsr #1
   d7af2:	ea4f 0444 	mov.w	r4, r4, lsl #1
   d7af6:	d1f0      	bne.n	d7ada <__ieee754_sqrt+0x4e>
   d7af8:	462f      	mov	r7, r5
   d7afa:	2020      	movs	r0, #32
   d7afc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   d7b00:	e009      	b.n	d7b16 <__ieee754_sqrt+0x8a>
   d7b02:	d03e      	beq.n	d7b82 <__ieee754_sqrt+0xf6>
   d7b04:	0fe1      	lsrs	r1, r4, #31
   d7b06:	3801      	subs	r0, #1
   d7b08:	ea4f 0252 	mov.w	r2, r2, lsr #1
   d7b0c:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   d7b10:	ea4f 0444 	mov.w	r4, r4, lsl #1
   d7b14:	d03e      	beq.n	d7b94 <__ieee754_sqrt+0x108>
   d7b16:	42b3      	cmp	r3, r6
   d7b18:	eb02 0105 	add.w	r1, r2, r5
   d7b1c:	ddf1      	ble.n	d7b02 <__ieee754_sqrt+0x76>
   d7b1e:	2900      	cmp	r1, #0
   d7b20:	eb01 0502 	add.w	r5, r1, r2
   d7b24:	db09      	blt.n	d7b3a <__ieee754_sqrt+0xae>
   d7b26:	46b0      	mov	r8, r6
   d7b28:	1b9b      	subs	r3, r3, r6
   d7b2a:	42a1      	cmp	r1, r4
   d7b2c:	bf88      	it	hi
   d7b2e:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
   d7b32:	1a64      	subs	r4, r4, r1
   d7b34:	4417      	add	r7, r2
   d7b36:	4646      	mov	r6, r8
   d7b38:	e7e4      	b.n	d7b04 <__ieee754_sqrt+0x78>
   d7b3a:	2d00      	cmp	r5, #0
   d7b3c:	dbf3      	blt.n	d7b26 <__ieee754_sqrt+0x9a>
   d7b3e:	f106 0801 	add.w	r8, r6, #1
   d7b42:	e7f1      	b.n	d7b28 <__ieee754_sqrt+0x9c>
   d7b44:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
   d7b48:	4332      	orrs	r2, r6
   d7b4a:	d036      	beq.n	d7bba <__ieee754_sqrt+0x12e>
   d7b4c:	2f00      	cmp	r7, #0
   d7b4e:	d14d      	bne.n	d7bec <__ieee754_sqrt+0x160>
   d7b50:	4639      	mov	r1, r7
   d7b52:	0ae2      	lsrs	r2, r4, #11
   d7b54:	3915      	subs	r1, #21
   d7b56:	0564      	lsls	r4, r4, #21
   d7b58:	4613      	mov	r3, r2
   d7b5a:	2a00      	cmp	r2, #0
   d7b5c:	d0f9      	beq.n	d7b52 <__ieee754_sqrt+0xc6>
   d7b5e:	02d7      	lsls	r7, r2, #11
   d7b60:	d451      	bmi.n	d7c06 <__ieee754_sqrt+0x17a>
   d7b62:	2000      	movs	r0, #0
   d7b64:	005b      	lsls	r3, r3, #1
   d7b66:	02de      	lsls	r6, r3, #11
   d7b68:	4605      	mov	r5, r0
   d7b6a:	f100 0001 	add.w	r0, r0, #1
   d7b6e:	d5f9      	bpl.n	d7b64 <__ieee754_sqrt+0xd8>
   d7b70:	461a      	mov	r2, r3
   d7b72:	4623      	mov	r3, r4
   d7b74:	4084      	lsls	r4, r0
   d7b76:	f1c0 0020 	rsb	r0, r0, #32
   d7b7a:	40c3      	lsrs	r3, r0
   d7b7c:	4313      	orrs	r3, r2
   d7b7e:	1b49      	subs	r1, r1, r5
   d7b80:	e793      	b.n	d7aaa <__ieee754_sqrt+0x1e>
   d7b82:	42a1      	cmp	r1, r4
   d7b84:	d8be      	bhi.n	d7b04 <__ieee754_sqrt+0x78>
   d7b86:	2900      	cmp	r1, #0
   d7b88:	eb01 0502 	add.w	r5, r1, r2
   d7b8c:	dbd5      	blt.n	d7b3a <__ieee754_sqrt+0xae>
   d7b8e:	4698      	mov	r8, r3
   d7b90:	2300      	movs	r3, #0
   d7b92:	e7ce      	b.n	d7b32 <__ieee754_sqrt+0xa6>
   d7b94:	4323      	orrs	r3, r4
   d7b96:	d112      	bne.n	d7bbe <__ieee754_sqrt+0x132>
   d7b98:	0878      	lsrs	r0, r7, #1
   d7b9a:	ea4f 016c 	mov.w	r1, ip, asr #1
   d7b9e:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   d7ba2:	f01c 0f01 	tst.w	ip, #1
   d7ba6:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   d7baa:	bf18      	it	ne
   d7bac:	f040 4000 	orrne.w	r0, r0, #2147483648	; 0x80000000
   d7bb0:	eb01 530e 	add.w	r3, r1, lr, lsl #20
   d7bb4:	4602      	mov	r2, r0
   d7bb6:	ec43 2b10 	vmov	d0, r2, r3
   d7bba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d7bbe:	1c7b      	adds	r3, r7, #1
   d7bc0:	bf16      	itet	ne
   d7bc2:	1c78      	addne	r0, r7, #1
   d7bc4:	f10c 0c01 	addeq.w	ip, ip, #1
   d7bc8:	0840      	lsrne	r0, r0, #1
   d7bca:	e7e6      	b.n	d7b9a <__ieee754_sqrt+0x10e>
   d7bcc:	ee10 2a10 	vmov	r2, s0
   d7bd0:	ee10 0a10 	vmov	r0, s0
   d7bd4:	463b      	mov	r3, r7
   d7bd6:	4639      	mov	r1, r7
   d7bd8:	f000 fb20 	bl	d821c <__aeabi_dmul>
   d7bdc:	4632      	mov	r2, r6
   d7bde:	463b      	mov	r3, r7
   d7be0:	f000 f966 	bl	d7eb0 <__adddf3>
   d7be4:	ec41 0b10 	vmov	d0, r0, r1
   d7be8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d7bec:	ee10 2a10 	vmov	r2, s0
   d7bf0:	4630      	mov	r0, r6
   d7bf2:	4639      	mov	r1, r7
   d7bf4:	f000 f95a 	bl	d7eac <__aeabi_dsub>
   d7bf8:	4602      	mov	r2, r0
   d7bfa:	460b      	mov	r3, r1
   d7bfc:	f000 fc38 	bl	d8470 <__aeabi_ddiv>
   d7c00:	ec41 0b10 	vmov	d0, r0, r1
   d7c04:	e7d9      	b.n	d7bba <__ieee754_sqrt+0x12e>
   d7c06:	4623      	mov	r3, r4
   d7c08:	2020      	movs	r0, #32
   d7c0a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   d7c0e:	e7b4      	b.n	d7b7a <__ieee754_sqrt+0xee>
   d7c10:	7ff00000 	.word	0x7ff00000

000d7c14 <fabs>:
   d7c14:	ec51 0b10 	vmov	r0, r1, d0
   d7c18:	ee10 2a10 	vmov	r2, s0
   d7c1c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   d7c20:	ec43 2b10 	vmov	d0, r2, r3
   d7c24:	4770      	bx	lr
   d7c26:	bf00      	nop

000d7c28 <finite>:
   d7c28:	b082      	sub	sp, #8
   d7c2a:	ed8d 0b00 	vstr	d0, [sp]
   d7c2e:	9801      	ldr	r0, [sp, #4]
   d7c30:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
   d7c34:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
   d7c38:	0fc0      	lsrs	r0, r0, #31
   d7c3a:	b002      	add	sp, #8
   d7c3c:	4770      	bx	lr
   d7c3e:	bf00      	nop

000d7c40 <matherr>:
   d7c40:	2000      	movs	r0, #0
   d7c42:	4770      	bx	lr
   d7c44:	0000      	movs	r0, r0
	...

000d7c48 <nan>:
   d7c48:	ed9f 0b01 	vldr	d0, [pc, #4]	; d7c50 <nan+0x8>
   d7c4c:	4770      	bx	lr
   d7c4e:	bf00      	nop
   d7c50:	00000000 	.word	0x00000000
   d7c54:	7ff80000 	.word	0x7ff80000

000d7c58 <rint>:
   d7c58:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7c5a:	ec53 2b10 	vmov	r2, r3, d0
   d7c5e:	f3c3 560a 	ubfx	r6, r3, #20, #11
   d7c62:	f2a6 30ff 	subw	r0, r6, #1023	; 0x3ff
   d7c66:	2813      	cmp	r0, #19
   d7c68:	ee10 5a10 	vmov	r5, s0
   d7c6c:	b083      	sub	sp, #12
   d7c6e:	4619      	mov	r1, r3
   d7c70:	ea4f 74d3 	mov.w	r4, r3, lsr #31
   d7c74:	dc31      	bgt.n	d7cda <rint+0x82>
   d7c76:	2800      	cmp	r0, #0
   d7c78:	db4c      	blt.n	d7d14 <rint+0xbc>
   d7c7a:	4e3e      	ldr	r6, [pc, #248]	; (d7d74 <rint+0x11c>)
   d7c7c:	4106      	asrs	r6, r0
   d7c7e:	ea03 0706 	and.w	r7, r3, r6
   d7c82:	4317      	orrs	r7, r2
   d7c84:	d02e      	beq.n	d7ce4 <rint+0x8c>
   d7c86:	ea03 0356 	and.w	r3, r3, r6, lsr #1
   d7c8a:	431d      	orrs	r5, r3
   d7c8c:	ea4f 0656 	mov.w	r6, r6, lsr #1
   d7c90:	d00c      	beq.n	d7cac <rint+0x54>
   d7c92:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   d7c96:	2813      	cmp	r0, #19
   d7c98:	ea21 0606 	bic.w	r6, r1, r6
   d7c9c:	fa43 f100 	asr.w	r1, r3, r0
   d7ca0:	ea41 0106 	orr.w	r1, r1, r6
   d7ca4:	bf0c      	ite	eq
   d7ca6:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
   d7caa:	2500      	movne	r5, #0
   d7cac:	4832      	ldr	r0, [pc, #200]	; (d7d78 <rint+0x120>)
   d7cae:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
   d7cb2:	462a      	mov	r2, r5
   d7cb4:	e9d4 4500 	ldrd	r4, r5, [r4]
   d7cb8:	460b      	mov	r3, r1
   d7cba:	4620      	mov	r0, r4
   d7cbc:	4629      	mov	r1, r5
   d7cbe:	f000 f8f7 	bl	d7eb0 <__adddf3>
   d7cc2:	e9cd 0100 	strd	r0, r1, [sp]
   d7cc6:	e9dd 0100 	ldrd	r0, r1, [sp]
   d7cca:	4622      	mov	r2, r4
   d7ccc:	462b      	mov	r3, r5
   d7cce:	f000 f8ed 	bl	d7eac <__aeabi_dsub>
   d7cd2:	ec41 0b10 	vmov	d0, r0, r1
   d7cd6:	b003      	add	sp, #12
   d7cd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7cda:	2833      	cmp	r0, #51	; 0x33
   d7cdc:	dd06      	ble.n	d7cec <rint+0x94>
   d7cde:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   d7ce2:	d040      	beq.n	d7d66 <rint+0x10e>
   d7ce4:	ec43 2b10 	vmov	d0, r2, r3
   d7ce8:	b003      	add	sp, #12
   d7cea:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7cec:	f2a6 4613 	subw	r6, r6, #1043	; 0x413
   d7cf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d7cf4:	40f0      	lsrs	r0, r6
   d7cf6:	4202      	tst	r2, r0
   d7cf8:	d0f4      	beq.n	d7ce4 <rint+0x8c>
   d7cfa:	ea15 0250 	ands.w	r2, r5, r0, lsr #1
   d7cfe:	ea4f 0350 	mov.w	r3, r0, lsr #1
   d7d02:	d0d3      	beq.n	d7cac <rint+0x54>
   d7d04:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   d7d08:	ea25 0503 	bic.w	r5, r5, r3
   d7d0c:	fa42 f606 	asr.w	r6, r2, r6
   d7d10:	4335      	orrs	r5, r6
   d7d12:	e7cb      	b.n	d7cac <rint+0x54>
   d7d14:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   d7d18:	4310      	orrs	r0, r2
   d7d1a:	d0e3      	beq.n	d7ce4 <rint+0x8c>
   d7d1c:	f3c3 0013 	ubfx	r0, r3, #0, #20
   d7d20:	4310      	orrs	r0, r2
   d7d22:	4245      	negs	r5, r0
   d7d24:	4305      	orrs	r5, r0
   d7d26:	4814      	ldr	r0, [pc, #80]	; (d7d78 <rint+0x120>)
   d7d28:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   d7d2c:	e9d0 6700 	ldrd	r6, r7, [r0]
   d7d30:	0c59      	lsrs	r1, r3, #17
   d7d32:	0b2d      	lsrs	r5, r5, #12
   d7d34:	0449      	lsls	r1, r1, #17
   d7d36:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
   d7d3a:	ea45 0301 	orr.w	r3, r5, r1
   d7d3e:	4630      	mov	r0, r6
   d7d40:	4639      	mov	r1, r7
   d7d42:	f000 f8b5 	bl	d7eb0 <__adddf3>
   d7d46:	e9cd 0100 	strd	r0, r1, [sp]
   d7d4a:	463b      	mov	r3, r7
   d7d4c:	e9dd 0100 	ldrd	r0, r1, [sp]
   d7d50:	4632      	mov	r2, r6
   d7d52:	f000 f8ab 	bl	d7eac <__aeabi_dsub>
   d7d56:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   d7d5a:	ea43 71c4 	orr.w	r1, r3, r4, lsl #31
   d7d5e:	ec41 0b10 	vmov	d0, r0, r1
   d7d62:	b003      	add	sp, #12
   d7d64:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7d66:	ee10 0a10 	vmov	r0, s0
   d7d6a:	f000 f8a1 	bl	d7eb0 <__adddf3>
   d7d6e:	ec41 0b10 	vmov	d0, r0, r1
   d7d72:	e7b9      	b.n	d7ce8 <rint+0x90>
   d7d74:	000fffff 	.word	0x000fffff
   d7d78:	000d9588 	.word	0x000d9588
   d7d7c:	00000000 	.word	0x00000000

000d7d80 <scalbn>:
   d7d80:	b538      	push	{r3, r4, r5, lr}
   d7d82:	ec53 2b10 	vmov	r2, r3, d0
   d7d86:	f3c3 510a 	ubfx	r1, r3, #20, #11
   d7d8a:	461c      	mov	r4, r3
   d7d8c:	4605      	mov	r5, r0
   d7d8e:	bb81      	cbnz	r1, d7df2 <scalbn+0x72>
   d7d90:	ee10 1a10 	vmov	r1, s0
   d7d94:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   d7d98:	4321      	orrs	r1, r4
   d7d9a:	d029      	beq.n	d7df0 <scalbn+0x70>
   d7d9c:	4619      	mov	r1, r3
   d7d9e:	2200      	movs	r2, #0
   d7da0:	4b3d      	ldr	r3, [pc, #244]	; (d7e98 <scalbn+0x118>)
   d7da2:	4c3e      	ldr	r4, [pc, #248]	; (d7e9c <scalbn+0x11c>)
   d7da4:	ee10 0a10 	vmov	r0, s0
   d7da8:	f000 fa38 	bl	d821c <__aeabi_dmul>
   d7dac:	42a5      	cmp	r5, r4
   d7dae:	4602      	mov	r2, r0
   d7db0:	460b      	mov	r3, r1
   d7db2:	db16      	blt.n	d7de2 <scalbn+0x62>
   d7db4:	460c      	mov	r4, r1
   d7db6:	f3c1 510a 	ubfx	r1, r1, #20, #11
   d7dba:	3936      	subs	r1, #54	; 0x36
   d7dbc:	4429      	add	r1, r5
   d7dbe:	f240 70fe 	movw	r0, #2046	; 0x7fe
   d7dc2:	4281      	cmp	r1, r0
   d7dc4:	dc21      	bgt.n	d7e0a <scalbn+0x8a>
   d7dc6:	2900      	cmp	r1, #0
   d7dc8:	dc47      	bgt.n	d7e5a <scalbn+0xda>
   d7dca:	f111 0f35 	cmn.w	r1, #53	; 0x35
   d7dce:	da34      	bge.n	d7e3a <scalbn+0xba>
   d7dd0:	f24c 3150 	movw	r1, #50000	; 0xc350
   d7dd4:	428d      	cmp	r5, r1
   d7dd6:	dc18      	bgt.n	d7e0a <scalbn+0x8a>
   d7dd8:	2b00      	cmp	r3, #0
   d7dda:	a127      	add	r1, pc, #156	; (adr r1, d7e78 <scalbn+0xf8>)
   d7ddc:	e9d1 0100 	ldrd	r0, r1, [r1]
   d7de0:	db44      	blt.n	d7e6c <scalbn+0xec>
   d7de2:	a325      	add	r3, pc, #148	; (adr r3, d7e78 <scalbn+0xf8>)
   d7de4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7de8:	f000 fa18 	bl	d821c <__aeabi_dmul>
   d7dec:	ec41 0b10 	vmov	d0, r0, r1
   d7df0:	bd38      	pop	{r3, r4, r5, pc}
   d7df2:	f240 70ff 	movw	r0, #2047	; 0x7ff
   d7df6:	4281      	cmp	r1, r0
   d7df8:	d1e0      	bne.n	d7dbc <scalbn+0x3c>
   d7dfa:	ee10 0a10 	vmov	r0, s0
   d7dfe:	4619      	mov	r1, r3
   d7e00:	f000 f856 	bl	d7eb0 <__adddf3>
   d7e04:	ec41 0b10 	vmov	d0, r0, r1
   d7e08:	bd38      	pop	{r3, r4, r5, pc}
   d7e0a:	2b00      	cmp	r3, #0
   d7e0c:	a11c      	add	r1, pc, #112	; (adr r1, d7e80 <scalbn+0x100>)
   d7e0e:	e9d1 0100 	ldrd	r0, r1, [r1]
   d7e12:	db07      	blt.n	d7e24 <scalbn+0xa4>
   d7e14:	a31a      	add	r3, pc, #104	; (adr r3, d7e80 <scalbn+0x100>)
   d7e16:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7e1a:	f000 f9ff 	bl	d821c <__aeabi_dmul>
   d7e1e:	ec41 0b10 	vmov	d0, r0, r1
   d7e22:	bd38      	pop	{r3, r4, r5, pc}
   d7e24:	a118      	add	r1, pc, #96	; (adr r1, d7e88 <scalbn+0x108>)
   d7e26:	e9d1 0100 	ldrd	r0, r1, [r1]
   d7e2a:	a315      	add	r3, pc, #84	; (adr r3, d7e80 <scalbn+0x100>)
   d7e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7e30:	f000 f9f4 	bl	d821c <__aeabi_dmul>
   d7e34:	ec41 0b10 	vmov	d0, r0, r1
   d7e38:	e7f3      	b.n	d7e22 <scalbn+0xa2>
   d7e3a:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
   d7e3e:	f424 04e0 	bic.w	r4, r4, #7340032	; 0x700000
   d7e42:	3136      	adds	r1, #54	; 0x36
   d7e44:	ea44 5301 	orr.w	r3, r4, r1, lsl #20
   d7e48:	4610      	mov	r0, r2
   d7e4a:	4619      	mov	r1, r3
   d7e4c:	2200      	movs	r2, #0
   d7e4e:	4b14      	ldr	r3, [pc, #80]	; (d7ea0 <scalbn+0x120>)
   d7e50:	f000 f9e4 	bl	d821c <__aeabi_dmul>
   d7e54:	ec41 0b10 	vmov	d0, r0, r1
   d7e58:	bd38      	pop	{r3, r4, r5, pc}
   d7e5a:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
   d7e5e:	f424 04e0 	bic.w	r4, r4, #7340032	; 0x700000
   d7e62:	ea44 5301 	orr.w	r3, r4, r1, lsl #20
   d7e66:	ec43 2b10 	vmov	d0, r2, r3
   d7e6a:	bd38      	pop	{r3, r4, r5, pc}
   d7e6c:	a108      	add	r1, pc, #32	; (adr r1, d7e90 <scalbn+0x110>)
   d7e6e:	e9d1 0100 	ldrd	r0, r1, [r1]
   d7e72:	e7b6      	b.n	d7de2 <scalbn+0x62>
   d7e74:	f3af 8000 	nop.w
   d7e78:	c2f8f359 	.word	0xc2f8f359
   d7e7c:	01a56e1f 	.word	0x01a56e1f
   d7e80:	8800759c 	.word	0x8800759c
   d7e84:	7e37e43c 	.word	0x7e37e43c
   d7e88:	8800759c 	.word	0x8800759c
   d7e8c:	fe37e43c 	.word	0xfe37e43c
   d7e90:	c2f8f359 	.word	0xc2f8f359
   d7e94:	81a56e1f 	.word	0x81a56e1f
   d7e98:	43500000 	.word	0x43500000
   d7e9c:	ffff3cb0 	.word	0xffff3cb0
   d7ea0:	3c900000 	.word	0x3c900000

000d7ea4 <__aeabi_drsub>:
   d7ea4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d7ea8:	e002      	b.n	d7eb0 <__adddf3>
   d7eaa:	bf00      	nop

000d7eac <__aeabi_dsub>:
   d7eac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d7eb0 <__adddf3>:
   d7eb0:	b530      	push	{r4, r5, lr}
   d7eb2:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d7eb6:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d7eba:	ea94 0f05 	teq	r4, r5
   d7ebe:	bf08      	it	eq
   d7ec0:	ea90 0f02 	teqeq	r0, r2
   d7ec4:	bf1f      	itttt	ne
   d7ec6:	ea54 0c00 	orrsne.w	ip, r4, r0
   d7eca:	ea55 0c02 	orrsne.w	ip, r5, r2
   d7ece:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d7ed2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d7ed6:	f000 80e2 	beq.w	d809e <__adddf3+0x1ee>
   d7eda:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d7ede:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d7ee2:	bfb8      	it	lt
   d7ee4:	426d      	neglt	r5, r5
   d7ee6:	dd0c      	ble.n	d7f02 <__adddf3+0x52>
   d7ee8:	442c      	add	r4, r5
   d7eea:	ea80 0202 	eor.w	r2, r0, r2
   d7eee:	ea81 0303 	eor.w	r3, r1, r3
   d7ef2:	ea82 0000 	eor.w	r0, r2, r0
   d7ef6:	ea83 0101 	eor.w	r1, r3, r1
   d7efa:	ea80 0202 	eor.w	r2, r0, r2
   d7efe:	ea81 0303 	eor.w	r3, r1, r3
   d7f02:	2d36      	cmp	r5, #54	; 0x36
   d7f04:	bf88      	it	hi
   d7f06:	bd30      	pophi	{r4, r5, pc}
   d7f08:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d7f0c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d7f10:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d7f14:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d7f18:	d002      	beq.n	d7f20 <__adddf3+0x70>
   d7f1a:	4240      	negs	r0, r0
   d7f1c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d7f20:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d7f24:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d7f28:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d7f2c:	d002      	beq.n	d7f34 <__adddf3+0x84>
   d7f2e:	4252      	negs	r2, r2
   d7f30:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d7f34:	ea94 0f05 	teq	r4, r5
   d7f38:	f000 80a7 	beq.w	d808a <__adddf3+0x1da>
   d7f3c:	f1a4 0401 	sub.w	r4, r4, #1
   d7f40:	f1d5 0e20 	rsbs	lr, r5, #32
   d7f44:	db0d      	blt.n	d7f62 <__adddf3+0xb2>
   d7f46:	fa02 fc0e 	lsl.w	ip, r2, lr
   d7f4a:	fa22 f205 	lsr.w	r2, r2, r5
   d7f4e:	1880      	adds	r0, r0, r2
   d7f50:	f141 0100 	adc.w	r1, r1, #0
   d7f54:	fa03 f20e 	lsl.w	r2, r3, lr
   d7f58:	1880      	adds	r0, r0, r2
   d7f5a:	fa43 f305 	asr.w	r3, r3, r5
   d7f5e:	4159      	adcs	r1, r3
   d7f60:	e00e      	b.n	d7f80 <__adddf3+0xd0>
   d7f62:	f1a5 0520 	sub.w	r5, r5, #32
   d7f66:	f10e 0e20 	add.w	lr, lr, #32
   d7f6a:	2a01      	cmp	r2, #1
   d7f6c:	fa03 fc0e 	lsl.w	ip, r3, lr
   d7f70:	bf28      	it	cs
   d7f72:	f04c 0c02 	orrcs.w	ip, ip, #2
   d7f76:	fa43 f305 	asr.w	r3, r3, r5
   d7f7a:	18c0      	adds	r0, r0, r3
   d7f7c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d7f80:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7f84:	d507      	bpl.n	d7f96 <__adddf3+0xe6>
   d7f86:	f04f 0e00 	mov.w	lr, #0
   d7f8a:	f1dc 0c00 	rsbs	ip, ip, #0
   d7f8e:	eb7e 0000 	sbcs.w	r0, lr, r0
   d7f92:	eb6e 0101 	sbc.w	r1, lr, r1
   d7f96:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d7f9a:	d31b      	bcc.n	d7fd4 <__adddf3+0x124>
   d7f9c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d7fa0:	d30c      	bcc.n	d7fbc <__adddf3+0x10c>
   d7fa2:	0849      	lsrs	r1, r1, #1
   d7fa4:	ea5f 0030 	movs.w	r0, r0, rrx
   d7fa8:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d7fac:	f104 0401 	add.w	r4, r4, #1
   d7fb0:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d7fb4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d7fb8:	f080 809a 	bcs.w	d80f0 <__adddf3+0x240>
   d7fbc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d7fc0:	bf08      	it	eq
   d7fc2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d7fc6:	f150 0000 	adcs.w	r0, r0, #0
   d7fca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d7fce:	ea41 0105 	orr.w	r1, r1, r5
   d7fd2:	bd30      	pop	{r4, r5, pc}
   d7fd4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d7fd8:	4140      	adcs	r0, r0
   d7fda:	eb41 0101 	adc.w	r1, r1, r1
   d7fde:	3c01      	subs	r4, #1
   d7fe0:	bf28      	it	cs
   d7fe2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d7fe6:	d2e9      	bcs.n	d7fbc <__adddf3+0x10c>
   d7fe8:	f091 0f00 	teq	r1, #0
   d7fec:	bf04      	itt	eq
   d7fee:	4601      	moveq	r1, r0
   d7ff0:	2000      	moveq	r0, #0
   d7ff2:	fab1 f381 	clz	r3, r1
   d7ff6:	bf08      	it	eq
   d7ff8:	3320      	addeq	r3, #32
   d7ffa:	f1a3 030b 	sub.w	r3, r3, #11
   d7ffe:	f1b3 0220 	subs.w	r2, r3, #32
   d8002:	da0c      	bge.n	d801e <__adddf3+0x16e>
   d8004:	320c      	adds	r2, #12
   d8006:	dd08      	ble.n	d801a <__adddf3+0x16a>
   d8008:	f102 0c14 	add.w	ip, r2, #20
   d800c:	f1c2 020c 	rsb	r2, r2, #12
   d8010:	fa01 f00c 	lsl.w	r0, r1, ip
   d8014:	fa21 f102 	lsr.w	r1, r1, r2
   d8018:	e00c      	b.n	d8034 <__adddf3+0x184>
   d801a:	f102 0214 	add.w	r2, r2, #20
   d801e:	bfd8      	it	le
   d8020:	f1c2 0c20 	rsble	ip, r2, #32
   d8024:	fa01 f102 	lsl.w	r1, r1, r2
   d8028:	fa20 fc0c 	lsr.w	ip, r0, ip
   d802c:	bfdc      	itt	le
   d802e:	ea41 010c 	orrle.w	r1, r1, ip
   d8032:	4090      	lslle	r0, r2
   d8034:	1ae4      	subs	r4, r4, r3
   d8036:	bfa2      	ittt	ge
   d8038:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d803c:	4329      	orrge	r1, r5
   d803e:	bd30      	popge	{r4, r5, pc}
   d8040:	ea6f 0404 	mvn.w	r4, r4
   d8044:	3c1f      	subs	r4, #31
   d8046:	da1c      	bge.n	d8082 <__adddf3+0x1d2>
   d8048:	340c      	adds	r4, #12
   d804a:	dc0e      	bgt.n	d806a <__adddf3+0x1ba>
   d804c:	f104 0414 	add.w	r4, r4, #20
   d8050:	f1c4 0220 	rsb	r2, r4, #32
   d8054:	fa20 f004 	lsr.w	r0, r0, r4
   d8058:	fa01 f302 	lsl.w	r3, r1, r2
   d805c:	ea40 0003 	orr.w	r0, r0, r3
   d8060:	fa21 f304 	lsr.w	r3, r1, r4
   d8064:	ea45 0103 	orr.w	r1, r5, r3
   d8068:	bd30      	pop	{r4, r5, pc}
   d806a:	f1c4 040c 	rsb	r4, r4, #12
   d806e:	f1c4 0220 	rsb	r2, r4, #32
   d8072:	fa20 f002 	lsr.w	r0, r0, r2
   d8076:	fa01 f304 	lsl.w	r3, r1, r4
   d807a:	ea40 0003 	orr.w	r0, r0, r3
   d807e:	4629      	mov	r1, r5
   d8080:	bd30      	pop	{r4, r5, pc}
   d8082:	fa21 f004 	lsr.w	r0, r1, r4
   d8086:	4629      	mov	r1, r5
   d8088:	bd30      	pop	{r4, r5, pc}
   d808a:	f094 0f00 	teq	r4, #0
   d808e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d8092:	bf06      	itte	eq
   d8094:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d8098:	3401      	addeq	r4, #1
   d809a:	3d01      	subne	r5, #1
   d809c:	e74e      	b.n	d7f3c <__adddf3+0x8c>
   d809e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d80a2:	bf18      	it	ne
   d80a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d80a8:	d029      	beq.n	d80fe <__adddf3+0x24e>
   d80aa:	ea94 0f05 	teq	r4, r5
   d80ae:	bf08      	it	eq
   d80b0:	ea90 0f02 	teqeq	r0, r2
   d80b4:	d005      	beq.n	d80c2 <__adddf3+0x212>
   d80b6:	ea54 0c00 	orrs.w	ip, r4, r0
   d80ba:	bf04      	itt	eq
   d80bc:	4619      	moveq	r1, r3
   d80be:	4610      	moveq	r0, r2
   d80c0:	bd30      	pop	{r4, r5, pc}
   d80c2:	ea91 0f03 	teq	r1, r3
   d80c6:	bf1e      	ittt	ne
   d80c8:	2100      	movne	r1, #0
   d80ca:	2000      	movne	r0, #0
   d80cc:	bd30      	popne	{r4, r5, pc}
   d80ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d80d2:	d105      	bne.n	d80e0 <__adddf3+0x230>
   d80d4:	0040      	lsls	r0, r0, #1
   d80d6:	4149      	adcs	r1, r1
   d80d8:	bf28      	it	cs
   d80da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d80de:	bd30      	pop	{r4, r5, pc}
   d80e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d80e4:	bf3c      	itt	cc
   d80e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d80ea:	bd30      	popcc	{r4, r5, pc}
   d80ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d80f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d80f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d80f8:	f04f 0000 	mov.w	r0, #0
   d80fc:	bd30      	pop	{r4, r5, pc}
   d80fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d8102:	bf1a      	itte	ne
   d8104:	4619      	movne	r1, r3
   d8106:	4610      	movne	r0, r2
   d8108:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d810c:	bf1c      	itt	ne
   d810e:	460b      	movne	r3, r1
   d8110:	4602      	movne	r2, r0
   d8112:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d8116:	bf06      	itte	eq
   d8118:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d811c:	ea91 0f03 	teqeq	r1, r3
   d8120:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d8124:	bd30      	pop	{r4, r5, pc}
   d8126:	bf00      	nop

000d8128 <__aeabi_ui2d>:
   d8128:	f090 0f00 	teq	r0, #0
   d812c:	bf04      	itt	eq
   d812e:	2100      	moveq	r1, #0
   d8130:	4770      	bxeq	lr
   d8132:	b530      	push	{r4, r5, lr}
   d8134:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8138:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d813c:	f04f 0500 	mov.w	r5, #0
   d8140:	f04f 0100 	mov.w	r1, #0
   d8144:	e750      	b.n	d7fe8 <__adddf3+0x138>
   d8146:	bf00      	nop

000d8148 <__aeabi_i2d>:
   d8148:	f090 0f00 	teq	r0, #0
   d814c:	bf04      	itt	eq
   d814e:	2100      	moveq	r1, #0
   d8150:	4770      	bxeq	lr
   d8152:	b530      	push	{r4, r5, lr}
   d8154:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8158:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d815c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d8160:	bf48      	it	mi
   d8162:	4240      	negmi	r0, r0
   d8164:	f04f 0100 	mov.w	r1, #0
   d8168:	e73e      	b.n	d7fe8 <__adddf3+0x138>
   d816a:	bf00      	nop

000d816c <__aeabi_f2d>:
   d816c:	0042      	lsls	r2, r0, #1
   d816e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d8172:	ea4f 0131 	mov.w	r1, r1, rrx
   d8176:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d817a:	bf1f      	itttt	ne
   d817c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d8180:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d8184:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d8188:	4770      	bxne	lr
   d818a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d818e:	bf08      	it	eq
   d8190:	4770      	bxeq	lr
   d8192:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d8196:	bf04      	itt	eq
   d8198:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d819c:	4770      	bxeq	lr
   d819e:	b530      	push	{r4, r5, lr}
   d81a0:	f44f 7460 	mov.w	r4, #896	; 0x380
   d81a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d81a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d81ac:	e71c      	b.n	d7fe8 <__adddf3+0x138>
   d81ae:	bf00      	nop

000d81b0 <__aeabi_ul2d>:
   d81b0:	ea50 0201 	orrs.w	r2, r0, r1
   d81b4:	bf08      	it	eq
   d81b6:	4770      	bxeq	lr
   d81b8:	b530      	push	{r4, r5, lr}
   d81ba:	f04f 0500 	mov.w	r5, #0
   d81be:	e00a      	b.n	d81d6 <__aeabi_l2d+0x16>

000d81c0 <__aeabi_l2d>:
   d81c0:	ea50 0201 	orrs.w	r2, r0, r1
   d81c4:	bf08      	it	eq
   d81c6:	4770      	bxeq	lr
   d81c8:	b530      	push	{r4, r5, lr}
   d81ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d81ce:	d502      	bpl.n	d81d6 <__aeabi_l2d+0x16>
   d81d0:	4240      	negs	r0, r0
   d81d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d81d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d81da:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d81de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d81e2:	f43f aed8 	beq.w	d7f96 <__adddf3+0xe6>
   d81e6:	f04f 0203 	mov.w	r2, #3
   d81ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d81ee:	bf18      	it	ne
   d81f0:	3203      	addne	r2, #3
   d81f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d81f6:	bf18      	it	ne
   d81f8:	3203      	addne	r2, #3
   d81fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d81fe:	f1c2 0320 	rsb	r3, r2, #32
   d8202:	fa00 fc03 	lsl.w	ip, r0, r3
   d8206:	fa20 f002 	lsr.w	r0, r0, r2
   d820a:	fa01 fe03 	lsl.w	lr, r1, r3
   d820e:	ea40 000e 	orr.w	r0, r0, lr
   d8212:	fa21 f102 	lsr.w	r1, r1, r2
   d8216:	4414      	add	r4, r2
   d8218:	e6bd      	b.n	d7f96 <__adddf3+0xe6>
   d821a:	bf00      	nop

000d821c <__aeabi_dmul>:
   d821c:	b570      	push	{r4, r5, r6, lr}
   d821e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d8222:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d8226:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d822a:	bf1d      	ittte	ne
   d822c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d8230:	ea94 0f0c 	teqne	r4, ip
   d8234:	ea95 0f0c 	teqne	r5, ip
   d8238:	f000 f8de 	bleq	d83f8 <__aeabi_dmul+0x1dc>
   d823c:	442c      	add	r4, r5
   d823e:	ea81 0603 	eor.w	r6, r1, r3
   d8242:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d8246:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d824a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d824e:	bf18      	it	ne
   d8250:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d8254:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8258:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d825c:	d038      	beq.n	d82d0 <__aeabi_dmul+0xb4>
   d825e:	fba0 ce02 	umull	ip, lr, r0, r2
   d8262:	f04f 0500 	mov.w	r5, #0
   d8266:	fbe1 e502 	umlal	lr, r5, r1, r2
   d826a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d826e:	fbe0 e503 	umlal	lr, r5, r0, r3
   d8272:	f04f 0600 	mov.w	r6, #0
   d8276:	fbe1 5603 	umlal	r5, r6, r1, r3
   d827a:	f09c 0f00 	teq	ip, #0
   d827e:	bf18      	it	ne
   d8280:	f04e 0e01 	orrne.w	lr, lr, #1
   d8284:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d8288:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d828c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d8290:	d204      	bcs.n	d829c <__aeabi_dmul+0x80>
   d8292:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d8296:	416d      	adcs	r5, r5
   d8298:	eb46 0606 	adc.w	r6, r6, r6
   d829c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d82a0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d82a4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d82a8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d82ac:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d82b0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d82b4:	bf88      	it	hi
   d82b6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d82ba:	d81e      	bhi.n	d82fa <__aeabi_dmul+0xde>
   d82bc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d82c0:	bf08      	it	eq
   d82c2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d82c6:	f150 0000 	adcs.w	r0, r0, #0
   d82ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d82ce:	bd70      	pop	{r4, r5, r6, pc}
   d82d0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d82d4:	ea46 0101 	orr.w	r1, r6, r1
   d82d8:	ea40 0002 	orr.w	r0, r0, r2
   d82dc:	ea81 0103 	eor.w	r1, r1, r3
   d82e0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d82e4:	bfc2      	ittt	gt
   d82e6:	ebd4 050c 	rsbsgt	r5, r4, ip
   d82ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d82ee:	bd70      	popgt	{r4, r5, r6, pc}
   d82f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d82f4:	f04f 0e00 	mov.w	lr, #0
   d82f8:	3c01      	subs	r4, #1
   d82fa:	f300 80ab 	bgt.w	d8454 <__aeabi_dmul+0x238>
   d82fe:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d8302:	bfde      	ittt	le
   d8304:	2000      	movle	r0, #0
   d8306:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d830a:	bd70      	pople	{r4, r5, r6, pc}
   d830c:	f1c4 0400 	rsb	r4, r4, #0
   d8310:	3c20      	subs	r4, #32
   d8312:	da35      	bge.n	d8380 <__aeabi_dmul+0x164>
   d8314:	340c      	adds	r4, #12
   d8316:	dc1b      	bgt.n	d8350 <__aeabi_dmul+0x134>
   d8318:	f104 0414 	add.w	r4, r4, #20
   d831c:	f1c4 0520 	rsb	r5, r4, #32
   d8320:	fa00 f305 	lsl.w	r3, r0, r5
   d8324:	fa20 f004 	lsr.w	r0, r0, r4
   d8328:	fa01 f205 	lsl.w	r2, r1, r5
   d832c:	ea40 0002 	orr.w	r0, r0, r2
   d8330:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d8334:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d8338:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d833c:	fa21 f604 	lsr.w	r6, r1, r4
   d8340:	eb42 0106 	adc.w	r1, r2, r6
   d8344:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8348:	bf08      	it	eq
   d834a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d834e:	bd70      	pop	{r4, r5, r6, pc}
   d8350:	f1c4 040c 	rsb	r4, r4, #12
   d8354:	f1c4 0520 	rsb	r5, r4, #32
   d8358:	fa00 f304 	lsl.w	r3, r0, r4
   d835c:	fa20 f005 	lsr.w	r0, r0, r5
   d8360:	fa01 f204 	lsl.w	r2, r1, r4
   d8364:	ea40 0002 	orr.w	r0, r0, r2
   d8368:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d836c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d8370:	f141 0100 	adc.w	r1, r1, #0
   d8374:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8378:	bf08      	it	eq
   d837a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d837e:	bd70      	pop	{r4, r5, r6, pc}
   d8380:	f1c4 0520 	rsb	r5, r4, #32
   d8384:	fa00 f205 	lsl.w	r2, r0, r5
   d8388:	ea4e 0e02 	orr.w	lr, lr, r2
   d838c:	fa20 f304 	lsr.w	r3, r0, r4
   d8390:	fa01 f205 	lsl.w	r2, r1, r5
   d8394:	ea43 0302 	orr.w	r3, r3, r2
   d8398:	fa21 f004 	lsr.w	r0, r1, r4
   d839c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d83a0:	fa21 f204 	lsr.w	r2, r1, r4
   d83a4:	ea20 0002 	bic.w	r0, r0, r2
   d83a8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d83ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d83b0:	bf08      	it	eq
   d83b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d83b6:	bd70      	pop	{r4, r5, r6, pc}
   d83b8:	f094 0f00 	teq	r4, #0
   d83bc:	d10f      	bne.n	d83de <__aeabi_dmul+0x1c2>
   d83be:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d83c2:	0040      	lsls	r0, r0, #1
   d83c4:	eb41 0101 	adc.w	r1, r1, r1
   d83c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d83cc:	bf08      	it	eq
   d83ce:	3c01      	subeq	r4, #1
   d83d0:	d0f7      	beq.n	d83c2 <__aeabi_dmul+0x1a6>
   d83d2:	ea41 0106 	orr.w	r1, r1, r6
   d83d6:	f095 0f00 	teq	r5, #0
   d83da:	bf18      	it	ne
   d83dc:	4770      	bxne	lr
   d83de:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d83e2:	0052      	lsls	r2, r2, #1
   d83e4:	eb43 0303 	adc.w	r3, r3, r3
   d83e8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d83ec:	bf08      	it	eq
   d83ee:	3d01      	subeq	r5, #1
   d83f0:	d0f7      	beq.n	d83e2 <__aeabi_dmul+0x1c6>
   d83f2:	ea43 0306 	orr.w	r3, r3, r6
   d83f6:	4770      	bx	lr
   d83f8:	ea94 0f0c 	teq	r4, ip
   d83fc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d8400:	bf18      	it	ne
   d8402:	ea95 0f0c 	teqne	r5, ip
   d8406:	d00c      	beq.n	d8422 <__aeabi_dmul+0x206>
   d8408:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d840c:	bf18      	it	ne
   d840e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8412:	d1d1      	bne.n	d83b8 <__aeabi_dmul+0x19c>
   d8414:	ea81 0103 	eor.w	r1, r1, r3
   d8418:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d841c:	f04f 0000 	mov.w	r0, #0
   d8420:	bd70      	pop	{r4, r5, r6, pc}
   d8422:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8426:	bf06      	itte	eq
   d8428:	4610      	moveq	r0, r2
   d842a:	4619      	moveq	r1, r3
   d842c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8430:	d019      	beq.n	d8466 <__aeabi_dmul+0x24a>
   d8432:	ea94 0f0c 	teq	r4, ip
   d8436:	d102      	bne.n	d843e <__aeabi_dmul+0x222>
   d8438:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d843c:	d113      	bne.n	d8466 <__aeabi_dmul+0x24a>
   d843e:	ea95 0f0c 	teq	r5, ip
   d8442:	d105      	bne.n	d8450 <__aeabi_dmul+0x234>
   d8444:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d8448:	bf1c      	itt	ne
   d844a:	4610      	movne	r0, r2
   d844c:	4619      	movne	r1, r3
   d844e:	d10a      	bne.n	d8466 <__aeabi_dmul+0x24a>
   d8450:	ea81 0103 	eor.w	r1, r1, r3
   d8454:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8458:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d845c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d8460:	f04f 0000 	mov.w	r0, #0
   d8464:	bd70      	pop	{r4, r5, r6, pc}
   d8466:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d846a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d846e:	bd70      	pop	{r4, r5, r6, pc}

000d8470 <__aeabi_ddiv>:
   d8470:	b570      	push	{r4, r5, r6, lr}
   d8472:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d8476:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d847a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d847e:	bf1d      	ittte	ne
   d8480:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d8484:	ea94 0f0c 	teqne	r4, ip
   d8488:	ea95 0f0c 	teqne	r5, ip
   d848c:	f000 f8a7 	bleq	d85de <__aeabi_ddiv+0x16e>
   d8490:	eba4 0405 	sub.w	r4, r4, r5
   d8494:	ea81 0e03 	eor.w	lr, r1, r3
   d8498:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d849c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d84a0:	f000 8088 	beq.w	d85b4 <__aeabi_ddiv+0x144>
   d84a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d84a8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d84ac:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d84b0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d84b4:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d84b8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d84bc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d84c0:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d84c4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d84c8:	429d      	cmp	r5, r3
   d84ca:	bf08      	it	eq
   d84cc:	4296      	cmpeq	r6, r2
   d84ce:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d84d2:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d84d6:	d202      	bcs.n	d84de <__aeabi_ddiv+0x6e>
   d84d8:	085b      	lsrs	r3, r3, #1
   d84da:	ea4f 0232 	mov.w	r2, r2, rrx
   d84de:	1ab6      	subs	r6, r6, r2
   d84e0:	eb65 0503 	sbc.w	r5, r5, r3
   d84e4:	085b      	lsrs	r3, r3, #1
   d84e6:	ea4f 0232 	mov.w	r2, r2, rrx
   d84ea:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d84ee:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d84f2:	ebb6 0e02 	subs.w	lr, r6, r2
   d84f6:	eb75 0e03 	sbcs.w	lr, r5, r3
   d84fa:	bf22      	ittt	cs
   d84fc:	1ab6      	subcs	r6, r6, r2
   d84fe:	4675      	movcs	r5, lr
   d8500:	ea40 000c 	orrcs.w	r0, r0, ip
   d8504:	085b      	lsrs	r3, r3, #1
   d8506:	ea4f 0232 	mov.w	r2, r2, rrx
   d850a:	ebb6 0e02 	subs.w	lr, r6, r2
   d850e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8512:	bf22      	ittt	cs
   d8514:	1ab6      	subcs	r6, r6, r2
   d8516:	4675      	movcs	r5, lr
   d8518:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d851c:	085b      	lsrs	r3, r3, #1
   d851e:	ea4f 0232 	mov.w	r2, r2, rrx
   d8522:	ebb6 0e02 	subs.w	lr, r6, r2
   d8526:	eb75 0e03 	sbcs.w	lr, r5, r3
   d852a:	bf22      	ittt	cs
   d852c:	1ab6      	subcs	r6, r6, r2
   d852e:	4675      	movcs	r5, lr
   d8530:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d8534:	085b      	lsrs	r3, r3, #1
   d8536:	ea4f 0232 	mov.w	r2, r2, rrx
   d853a:	ebb6 0e02 	subs.w	lr, r6, r2
   d853e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8542:	bf22      	ittt	cs
   d8544:	1ab6      	subcs	r6, r6, r2
   d8546:	4675      	movcs	r5, lr
   d8548:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d854c:	ea55 0e06 	orrs.w	lr, r5, r6
   d8550:	d018      	beq.n	d8584 <__aeabi_ddiv+0x114>
   d8552:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d8556:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d855a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d855e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d8562:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d8566:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d856a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d856e:	d1c0      	bne.n	d84f2 <__aeabi_ddiv+0x82>
   d8570:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8574:	d10b      	bne.n	d858e <__aeabi_ddiv+0x11e>
   d8576:	ea41 0100 	orr.w	r1, r1, r0
   d857a:	f04f 0000 	mov.w	r0, #0
   d857e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d8582:	e7b6      	b.n	d84f2 <__aeabi_ddiv+0x82>
   d8584:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8588:	bf04      	itt	eq
   d858a:	4301      	orreq	r1, r0
   d858c:	2000      	moveq	r0, #0
   d858e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d8592:	bf88      	it	hi
   d8594:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d8598:	f63f aeaf 	bhi.w	d82fa <__aeabi_dmul+0xde>
   d859c:	ebb5 0c03 	subs.w	ip, r5, r3
   d85a0:	bf04      	itt	eq
   d85a2:	ebb6 0c02 	subseq.w	ip, r6, r2
   d85a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d85aa:	f150 0000 	adcs.w	r0, r0, #0
   d85ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d85b2:	bd70      	pop	{r4, r5, r6, pc}
   d85b4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d85b8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d85bc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d85c0:	bfc2      	ittt	gt
   d85c2:	ebd4 050c 	rsbsgt	r5, r4, ip
   d85c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d85ca:	bd70      	popgt	{r4, r5, r6, pc}
   d85cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d85d0:	f04f 0e00 	mov.w	lr, #0
   d85d4:	3c01      	subs	r4, #1
   d85d6:	e690      	b.n	d82fa <__aeabi_dmul+0xde>
   d85d8:	ea45 0e06 	orr.w	lr, r5, r6
   d85dc:	e68d      	b.n	d82fa <__aeabi_dmul+0xde>
   d85de:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d85e2:	ea94 0f0c 	teq	r4, ip
   d85e6:	bf08      	it	eq
   d85e8:	ea95 0f0c 	teqeq	r5, ip
   d85ec:	f43f af3b 	beq.w	d8466 <__aeabi_dmul+0x24a>
   d85f0:	ea94 0f0c 	teq	r4, ip
   d85f4:	d10a      	bne.n	d860c <__aeabi_ddiv+0x19c>
   d85f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d85fa:	f47f af34 	bne.w	d8466 <__aeabi_dmul+0x24a>
   d85fe:	ea95 0f0c 	teq	r5, ip
   d8602:	f47f af25 	bne.w	d8450 <__aeabi_dmul+0x234>
   d8606:	4610      	mov	r0, r2
   d8608:	4619      	mov	r1, r3
   d860a:	e72c      	b.n	d8466 <__aeabi_dmul+0x24a>
   d860c:	ea95 0f0c 	teq	r5, ip
   d8610:	d106      	bne.n	d8620 <__aeabi_ddiv+0x1b0>
   d8612:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d8616:	f43f aefd 	beq.w	d8414 <__aeabi_dmul+0x1f8>
   d861a:	4610      	mov	r0, r2
   d861c:	4619      	mov	r1, r3
   d861e:	e722      	b.n	d8466 <__aeabi_dmul+0x24a>
   d8620:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8624:	bf18      	it	ne
   d8626:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d862a:	f47f aec5 	bne.w	d83b8 <__aeabi_dmul+0x19c>
   d862e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d8632:	f47f af0d 	bne.w	d8450 <__aeabi_dmul+0x234>
   d8636:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d863a:	f47f aeeb 	bne.w	d8414 <__aeabi_dmul+0x1f8>
   d863e:	e712      	b.n	d8466 <__aeabi_dmul+0x24a>

000d8640 <__gedf2>:
   d8640:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d8644:	e006      	b.n	d8654 <__cmpdf2+0x4>
   d8646:	bf00      	nop

000d8648 <__ledf2>:
   d8648:	f04f 0c01 	mov.w	ip, #1
   d864c:	e002      	b.n	d8654 <__cmpdf2+0x4>
   d864e:	bf00      	nop

000d8650 <__cmpdf2>:
   d8650:	f04f 0c01 	mov.w	ip, #1
   d8654:	f84d cd04 	str.w	ip, [sp, #-4]!
   d8658:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d865c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8660:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d8664:	bf18      	it	ne
   d8666:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d866a:	d01b      	beq.n	d86a4 <__cmpdf2+0x54>
   d866c:	b001      	add	sp, #4
   d866e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d8672:	bf0c      	ite	eq
   d8674:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d8678:	ea91 0f03 	teqne	r1, r3
   d867c:	bf02      	ittt	eq
   d867e:	ea90 0f02 	teqeq	r0, r2
   d8682:	2000      	moveq	r0, #0
   d8684:	4770      	bxeq	lr
   d8686:	f110 0f00 	cmn.w	r0, #0
   d868a:	ea91 0f03 	teq	r1, r3
   d868e:	bf58      	it	pl
   d8690:	4299      	cmppl	r1, r3
   d8692:	bf08      	it	eq
   d8694:	4290      	cmpeq	r0, r2
   d8696:	bf2c      	ite	cs
   d8698:	17d8      	asrcs	r0, r3, #31
   d869a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d869e:	f040 0001 	orr.w	r0, r0, #1
   d86a2:	4770      	bx	lr
   d86a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d86a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d86ac:	d102      	bne.n	d86b4 <__cmpdf2+0x64>
   d86ae:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d86b2:	d107      	bne.n	d86c4 <__cmpdf2+0x74>
   d86b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d86b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d86bc:	d1d6      	bne.n	d866c <__cmpdf2+0x1c>
   d86be:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d86c2:	d0d3      	beq.n	d866c <__cmpdf2+0x1c>
   d86c4:	f85d 0b04 	ldr.w	r0, [sp], #4
   d86c8:	4770      	bx	lr
   d86ca:	bf00      	nop

000d86cc <__aeabi_cdrcmple>:
   d86cc:	4684      	mov	ip, r0
   d86ce:	4610      	mov	r0, r2
   d86d0:	4662      	mov	r2, ip
   d86d2:	468c      	mov	ip, r1
   d86d4:	4619      	mov	r1, r3
   d86d6:	4663      	mov	r3, ip
   d86d8:	e000      	b.n	d86dc <__aeabi_cdcmpeq>
   d86da:	bf00      	nop

000d86dc <__aeabi_cdcmpeq>:
   d86dc:	b501      	push	{r0, lr}
   d86de:	f7ff ffb7 	bl	d8650 <__cmpdf2>
   d86e2:	2800      	cmp	r0, #0
   d86e4:	bf48      	it	mi
   d86e6:	f110 0f00 	cmnmi.w	r0, #0
   d86ea:	bd01      	pop	{r0, pc}

000d86ec <__aeabi_dcmpeq>:
   d86ec:	f84d ed08 	str.w	lr, [sp, #-8]!
   d86f0:	f7ff fff4 	bl	d86dc <__aeabi_cdcmpeq>
   d86f4:	bf0c      	ite	eq
   d86f6:	2001      	moveq	r0, #1
   d86f8:	2000      	movne	r0, #0
   d86fa:	f85d fb08 	ldr.w	pc, [sp], #8
   d86fe:	bf00      	nop

000d8700 <__aeabi_dcmplt>:
   d8700:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8704:	f7ff ffea 	bl	d86dc <__aeabi_cdcmpeq>
   d8708:	bf34      	ite	cc
   d870a:	2001      	movcc	r0, #1
   d870c:	2000      	movcs	r0, #0
   d870e:	f85d fb08 	ldr.w	pc, [sp], #8
   d8712:	bf00      	nop

000d8714 <__aeabi_dcmple>:
   d8714:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8718:	f7ff ffe0 	bl	d86dc <__aeabi_cdcmpeq>
   d871c:	bf94      	ite	ls
   d871e:	2001      	movls	r0, #1
   d8720:	2000      	movhi	r0, #0
   d8722:	f85d fb08 	ldr.w	pc, [sp], #8
   d8726:	bf00      	nop

000d8728 <__aeabi_dcmpge>:
   d8728:	f84d ed08 	str.w	lr, [sp, #-8]!
   d872c:	f7ff ffce 	bl	d86cc <__aeabi_cdrcmple>
   d8730:	bf94      	ite	ls
   d8732:	2001      	movls	r0, #1
   d8734:	2000      	movhi	r0, #0
   d8736:	f85d fb08 	ldr.w	pc, [sp], #8
   d873a:	bf00      	nop

000d873c <__aeabi_dcmpgt>:
   d873c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8740:	f7ff ffc4 	bl	d86cc <__aeabi_cdrcmple>
   d8744:	bf34      	ite	cc
   d8746:	2001      	movcc	r0, #1
   d8748:	2000      	movcs	r0, #0
   d874a:	f85d fb08 	ldr.w	pc, [sp], #8
   d874e:	bf00      	nop

000d8750 <__aeabi_dcmpun>:
   d8750:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d8754:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8758:	d102      	bne.n	d8760 <__aeabi_dcmpun+0x10>
   d875a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d875e:	d10a      	bne.n	d8776 <__aeabi_dcmpun+0x26>
   d8760:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d8764:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8768:	d102      	bne.n	d8770 <__aeabi_dcmpun+0x20>
   d876a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d876e:	d102      	bne.n	d8776 <__aeabi_dcmpun+0x26>
   d8770:	f04f 0000 	mov.w	r0, #0
   d8774:	4770      	bx	lr
   d8776:	f04f 0001 	mov.w	r0, #1
   d877a:	4770      	bx	lr

000d877c <__aeabi_d2f>:
   d877c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d8780:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d8784:	bf24      	itt	cs
   d8786:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d878a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d878e:	d90d      	bls.n	d87ac <__aeabi_d2f+0x30>
   d8790:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d8794:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d8798:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d879c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d87a0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d87a4:	bf08      	it	eq
   d87a6:	f020 0001 	biceq.w	r0, r0, #1
   d87aa:	4770      	bx	lr
   d87ac:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d87b0:	d121      	bne.n	d87f6 <__aeabi_d2f+0x7a>
   d87b2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d87b6:	bfbc      	itt	lt
   d87b8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d87bc:	4770      	bxlt	lr
   d87be:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d87c2:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d87c6:	f1c2 0218 	rsb	r2, r2, #24
   d87ca:	f1c2 0c20 	rsb	ip, r2, #32
   d87ce:	fa10 f30c 	lsls.w	r3, r0, ip
   d87d2:	fa20 f002 	lsr.w	r0, r0, r2
   d87d6:	bf18      	it	ne
   d87d8:	f040 0001 	orrne.w	r0, r0, #1
   d87dc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d87e0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d87e4:	fa03 fc0c 	lsl.w	ip, r3, ip
   d87e8:	ea40 000c 	orr.w	r0, r0, ip
   d87ec:	fa23 f302 	lsr.w	r3, r3, r2
   d87f0:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d87f4:	e7cc      	b.n	d8790 <__aeabi_d2f+0x14>
   d87f6:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d87fa:	d107      	bne.n	d880c <__aeabi_d2f+0x90>
   d87fc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d8800:	bf1e      	ittt	ne
   d8802:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d8806:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d880a:	4770      	bxne	lr
   d880c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d8810:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d8814:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d8818:	4770      	bx	lr
   d881a:	bf00      	nop

000d881c <__aeabi_frsub>:
   d881c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   d8820:	e002      	b.n	d8828 <__addsf3>
   d8822:	bf00      	nop

000d8824 <__aeabi_fsub>:
   d8824:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000d8828 <__addsf3>:
   d8828:	0042      	lsls	r2, r0, #1
   d882a:	bf1f      	itttt	ne
   d882c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   d8830:	ea92 0f03 	teqne	r2, r3
   d8834:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   d8838:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   d883c:	d06a      	beq.n	d8914 <__addsf3+0xec>
   d883e:	ea4f 6212 	mov.w	r2, r2, lsr #24
   d8842:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   d8846:	bfc1      	itttt	gt
   d8848:	18d2      	addgt	r2, r2, r3
   d884a:	4041      	eorgt	r1, r0
   d884c:	4048      	eorgt	r0, r1
   d884e:	4041      	eorgt	r1, r0
   d8850:	bfb8      	it	lt
   d8852:	425b      	neglt	r3, r3
   d8854:	2b19      	cmp	r3, #25
   d8856:	bf88      	it	hi
   d8858:	4770      	bxhi	lr
   d885a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   d885e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d8862:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   d8866:	bf18      	it	ne
   d8868:	4240      	negne	r0, r0
   d886a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d886e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   d8872:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   d8876:	bf18      	it	ne
   d8878:	4249      	negne	r1, r1
   d887a:	ea92 0f03 	teq	r2, r3
   d887e:	d03f      	beq.n	d8900 <__addsf3+0xd8>
   d8880:	f1a2 0201 	sub.w	r2, r2, #1
   d8884:	fa41 fc03 	asr.w	ip, r1, r3
   d8888:	eb10 000c 	adds.w	r0, r0, ip
   d888c:	f1c3 0320 	rsb	r3, r3, #32
   d8890:	fa01 f103 	lsl.w	r1, r1, r3
   d8894:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   d8898:	d502      	bpl.n	d88a0 <__addsf3+0x78>
   d889a:	4249      	negs	r1, r1
   d889c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   d88a0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   d88a4:	d313      	bcc.n	d88ce <__addsf3+0xa6>
   d88a6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   d88aa:	d306      	bcc.n	d88ba <__addsf3+0x92>
   d88ac:	0840      	lsrs	r0, r0, #1
   d88ae:	ea4f 0131 	mov.w	r1, r1, rrx
   d88b2:	f102 0201 	add.w	r2, r2, #1
   d88b6:	2afe      	cmp	r2, #254	; 0xfe
   d88b8:	d251      	bcs.n	d895e <__addsf3+0x136>
   d88ba:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   d88be:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   d88c2:	bf08      	it	eq
   d88c4:	f020 0001 	biceq.w	r0, r0, #1
   d88c8:	ea40 0003 	orr.w	r0, r0, r3
   d88cc:	4770      	bx	lr
   d88ce:	0049      	lsls	r1, r1, #1
   d88d0:	eb40 0000 	adc.w	r0, r0, r0
   d88d4:	3a01      	subs	r2, #1
   d88d6:	bf28      	it	cs
   d88d8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
   d88dc:	d2ed      	bcs.n	d88ba <__addsf3+0x92>
   d88de:	fab0 fc80 	clz	ip, r0
   d88e2:	f1ac 0c08 	sub.w	ip, ip, #8
   d88e6:	ebb2 020c 	subs.w	r2, r2, ip
   d88ea:	fa00 f00c 	lsl.w	r0, r0, ip
   d88ee:	bfaa      	itet	ge
   d88f0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   d88f4:	4252      	neglt	r2, r2
   d88f6:	4318      	orrge	r0, r3
   d88f8:	bfbc      	itt	lt
   d88fa:	40d0      	lsrlt	r0, r2
   d88fc:	4318      	orrlt	r0, r3
   d88fe:	4770      	bx	lr
   d8900:	f092 0f00 	teq	r2, #0
   d8904:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   d8908:	bf06      	itte	eq
   d890a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   d890e:	3201      	addeq	r2, #1
   d8910:	3b01      	subne	r3, #1
   d8912:	e7b5      	b.n	d8880 <__addsf3+0x58>
   d8914:	ea4f 0341 	mov.w	r3, r1, lsl #1
   d8918:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   d891c:	bf18      	it	ne
   d891e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   d8922:	d021      	beq.n	d8968 <__addsf3+0x140>
   d8924:	ea92 0f03 	teq	r2, r3
   d8928:	d004      	beq.n	d8934 <__addsf3+0x10c>
   d892a:	f092 0f00 	teq	r2, #0
   d892e:	bf08      	it	eq
   d8930:	4608      	moveq	r0, r1
   d8932:	4770      	bx	lr
   d8934:	ea90 0f01 	teq	r0, r1
   d8938:	bf1c      	itt	ne
   d893a:	2000      	movne	r0, #0
   d893c:	4770      	bxne	lr
   d893e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   d8942:	d104      	bne.n	d894e <__addsf3+0x126>
   d8944:	0040      	lsls	r0, r0, #1
   d8946:	bf28      	it	cs
   d8948:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   d894c:	4770      	bx	lr
   d894e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   d8952:	bf3c      	itt	cc
   d8954:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   d8958:	4770      	bxcc	lr
   d895a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   d895e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   d8962:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d8966:	4770      	bx	lr
   d8968:	ea7f 6222 	mvns.w	r2, r2, asr #24
   d896c:	bf16      	itet	ne
   d896e:	4608      	movne	r0, r1
   d8970:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   d8974:	4601      	movne	r1, r0
   d8976:	0242      	lsls	r2, r0, #9
   d8978:	bf06      	itte	eq
   d897a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   d897e:	ea90 0f01 	teqeq	r0, r1
   d8982:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   d8986:	4770      	bx	lr

000d8988 <__aeabi_ui2f>:
   d8988:	f04f 0300 	mov.w	r3, #0
   d898c:	e004      	b.n	d8998 <__aeabi_i2f+0x8>
   d898e:	bf00      	nop

000d8990 <__aeabi_i2f>:
   d8990:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   d8994:	bf48      	it	mi
   d8996:	4240      	negmi	r0, r0
   d8998:	ea5f 0c00 	movs.w	ip, r0
   d899c:	bf08      	it	eq
   d899e:	4770      	bxeq	lr
   d89a0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   d89a4:	4601      	mov	r1, r0
   d89a6:	f04f 0000 	mov.w	r0, #0
   d89aa:	e01c      	b.n	d89e6 <__aeabi_l2f+0x2a>

000d89ac <__aeabi_ul2f>:
   d89ac:	ea50 0201 	orrs.w	r2, r0, r1
   d89b0:	bf08      	it	eq
   d89b2:	4770      	bxeq	lr
   d89b4:	f04f 0300 	mov.w	r3, #0
   d89b8:	e00a      	b.n	d89d0 <__aeabi_l2f+0x14>
   d89ba:	bf00      	nop

000d89bc <__aeabi_l2f>:
   d89bc:	ea50 0201 	orrs.w	r2, r0, r1
   d89c0:	bf08      	it	eq
   d89c2:	4770      	bxeq	lr
   d89c4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   d89c8:	d502      	bpl.n	d89d0 <__aeabi_l2f+0x14>
   d89ca:	4240      	negs	r0, r0
   d89cc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d89d0:	ea5f 0c01 	movs.w	ip, r1
   d89d4:	bf02      	ittt	eq
   d89d6:	4684      	moveq	ip, r0
   d89d8:	4601      	moveq	r1, r0
   d89da:	2000      	moveq	r0, #0
   d89dc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   d89e0:	bf08      	it	eq
   d89e2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   d89e6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   d89ea:	fabc f28c 	clz	r2, ip
   d89ee:	3a08      	subs	r2, #8
   d89f0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   d89f4:	db10      	blt.n	d8a18 <__aeabi_l2f+0x5c>
   d89f6:	fa01 fc02 	lsl.w	ip, r1, r2
   d89fa:	4463      	add	r3, ip
   d89fc:	fa00 fc02 	lsl.w	ip, r0, r2
   d8a00:	f1c2 0220 	rsb	r2, r2, #32
   d8a04:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d8a08:	fa20 f202 	lsr.w	r2, r0, r2
   d8a0c:	eb43 0002 	adc.w	r0, r3, r2
   d8a10:	bf08      	it	eq
   d8a12:	f020 0001 	biceq.w	r0, r0, #1
   d8a16:	4770      	bx	lr
   d8a18:	f102 0220 	add.w	r2, r2, #32
   d8a1c:	fa01 fc02 	lsl.w	ip, r1, r2
   d8a20:	f1c2 0220 	rsb	r2, r2, #32
   d8a24:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   d8a28:	fa21 f202 	lsr.w	r2, r1, r2
   d8a2c:	eb43 0002 	adc.w	r0, r3, r2
   d8a30:	bf08      	it	eq
   d8a32:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   d8a36:	4770      	bx	lr

000d8a38 <__aeabi_ldivmod>:
   d8a38:	b97b      	cbnz	r3, d8a5a <__aeabi_ldivmod+0x22>
   d8a3a:	b972      	cbnz	r2, d8a5a <__aeabi_ldivmod+0x22>
   d8a3c:	2900      	cmp	r1, #0
   d8a3e:	bfbe      	ittt	lt
   d8a40:	2000      	movlt	r0, #0
   d8a42:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   d8a46:	e006      	blt.n	d8a56 <__aeabi_ldivmod+0x1e>
   d8a48:	bf08      	it	eq
   d8a4a:	2800      	cmpeq	r0, #0
   d8a4c:	bf1c      	itt	ne
   d8a4e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   d8a52:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   d8a56:	f000 b9a1 	b.w	d8d9c <__aeabi_idiv0>
   d8a5a:	f1ad 0c08 	sub.w	ip, sp, #8
   d8a5e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   d8a62:	2900      	cmp	r1, #0
   d8a64:	db09      	blt.n	d8a7a <__aeabi_ldivmod+0x42>
   d8a66:	2b00      	cmp	r3, #0
   d8a68:	db1a      	blt.n	d8aa0 <__aeabi_ldivmod+0x68>
   d8a6a:	f000 f835 	bl	d8ad8 <__udivmoddi4>
   d8a6e:	f8dd e004 	ldr.w	lr, [sp, #4]
   d8a72:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d8a76:	b004      	add	sp, #16
   d8a78:	4770      	bx	lr
   d8a7a:	4240      	negs	r0, r0
   d8a7c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d8a80:	2b00      	cmp	r3, #0
   d8a82:	db1b      	blt.n	d8abc <__aeabi_ldivmod+0x84>
   d8a84:	f000 f828 	bl	d8ad8 <__udivmoddi4>
   d8a88:	f8dd e004 	ldr.w	lr, [sp, #4]
   d8a8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d8a90:	b004      	add	sp, #16
   d8a92:	4240      	negs	r0, r0
   d8a94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d8a98:	4252      	negs	r2, r2
   d8a9a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d8a9e:	4770      	bx	lr
   d8aa0:	4252      	negs	r2, r2
   d8aa2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d8aa6:	f000 f817 	bl	d8ad8 <__udivmoddi4>
   d8aaa:	f8dd e004 	ldr.w	lr, [sp, #4]
   d8aae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d8ab2:	b004      	add	sp, #16
   d8ab4:	4240      	negs	r0, r0
   d8ab6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d8aba:	4770      	bx	lr
   d8abc:	4252      	negs	r2, r2
   d8abe:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d8ac2:	f000 f809 	bl	d8ad8 <__udivmoddi4>
   d8ac6:	f8dd e004 	ldr.w	lr, [sp, #4]
   d8aca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d8ace:	b004      	add	sp, #16
   d8ad0:	4252      	negs	r2, r2
   d8ad2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d8ad6:	4770      	bx	lr

000d8ad8 <__udivmoddi4>:
   d8ad8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d8adc:	9d08      	ldr	r5, [sp, #32]
   d8ade:	4604      	mov	r4, r0
   d8ae0:	468c      	mov	ip, r1
   d8ae2:	2b00      	cmp	r3, #0
   d8ae4:	f040 8083 	bne.w	d8bee <__udivmoddi4+0x116>
   d8ae8:	428a      	cmp	r2, r1
   d8aea:	4617      	mov	r7, r2
   d8aec:	d947      	bls.n	d8b7e <__udivmoddi4+0xa6>
   d8aee:	fab2 f282 	clz	r2, r2
   d8af2:	b142      	cbz	r2, d8b06 <__udivmoddi4+0x2e>
   d8af4:	f1c2 0020 	rsb	r0, r2, #32
   d8af8:	fa24 f000 	lsr.w	r0, r4, r0
   d8afc:	4091      	lsls	r1, r2
   d8afe:	4097      	lsls	r7, r2
   d8b00:	ea40 0c01 	orr.w	ip, r0, r1
   d8b04:	4094      	lsls	r4, r2
   d8b06:	ea4f 4817 	mov.w	r8, r7, lsr #16
   d8b0a:	0c23      	lsrs	r3, r4, #16
   d8b0c:	fbbc f6f8 	udiv	r6, ip, r8
   d8b10:	fa1f fe87 	uxth.w	lr, r7
   d8b14:	fb08 c116 	mls	r1, r8, r6, ip
   d8b18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   d8b1c:	fb06 f10e 	mul.w	r1, r6, lr
   d8b20:	4299      	cmp	r1, r3
   d8b22:	d909      	bls.n	d8b38 <__udivmoddi4+0x60>
   d8b24:	18fb      	adds	r3, r7, r3
   d8b26:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
   d8b2a:	f080 8119 	bcs.w	d8d60 <__udivmoddi4+0x288>
   d8b2e:	4299      	cmp	r1, r3
   d8b30:	f240 8116 	bls.w	d8d60 <__udivmoddi4+0x288>
   d8b34:	3e02      	subs	r6, #2
   d8b36:	443b      	add	r3, r7
   d8b38:	1a5b      	subs	r3, r3, r1
   d8b3a:	b2a4      	uxth	r4, r4
   d8b3c:	fbb3 f0f8 	udiv	r0, r3, r8
   d8b40:	fb08 3310 	mls	r3, r8, r0, r3
   d8b44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   d8b48:	fb00 fe0e 	mul.w	lr, r0, lr
   d8b4c:	45a6      	cmp	lr, r4
   d8b4e:	d909      	bls.n	d8b64 <__udivmoddi4+0x8c>
   d8b50:	193c      	adds	r4, r7, r4
   d8b52:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   d8b56:	f080 8105 	bcs.w	d8d64 <__udivmoddi4+0x28c>
   d8b5a:	45a6      	cmp	lr, r4
   d8b5c:	f240 8102 	bls.w	d8d64 <__udivmoddi4+0x28c>
   d8b60:	3802      	subs	r0, #2
   d8b62:	443c      	add	r4, r7
   d8b64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   d8b68:	eba4 040e 	sub.w	r4, r4, lr
   d8b6c:	2600      	movs	r6, #0
   d8b6e:	b11d      	cbz	r5, d8b78 <__udivmoddi4+0xa0>
   d8b70:	40d4      	lsrs	r4, r2
   d8b72:	2300      	movs	r3, #0
   d8b74:	e9c5 4300 	strd	r4, r3, [r5]
   d8b78:	4631      	mov	r1, r6
   d8b7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8b7e:	b902      	cbnz	r2, d8b82 <__udivmoddi4+0xaa>
   d8b80:	deff      	udf	#255	; 0xff
   d8b82:	fab2 f282 	clz	r2, r2
   d8b86:	2a00      	cmp	r2, #0
   d8b88:	d150      	bne.n	d8c2c <__udivmoddi4+0x154>
   d8b8a:	1bcb      	subs	r3, r1, r7
   d8b8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   d8b90:	fa1f f887 	uxth.w	r8, r7
   d8b94:	2601      	movs	r6, #1
   d8b96:	fbb3 fcfe 	udiv	ip, r3, lr
   d8b9a:	0c21      	lsrs	r1, r4, #16
   d8b9c:	fb0e 331c 	mls	r3, lr, ip, r3
   d8ba0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   d8ba4:	fb08 f30c 	mul.w	r3, r8, ip
   d8ba8:	428b      	cmp	r3, r1
   d8baa:	d907      	bls.n	d8bbc <__udivmoddi4+0xe4>
   d8bac:	1879      	adds	r1, r7, r1
   d8bae:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
   d8bb2:	d202      	bcs.n	d8bba <__udivmoddi4+0xe2>
   d8bb4:	428b      	cmp	r3, r1
   d8bb6:	f200 80e9 	bhi.w	d8d8c <__udivmoddi4+0x2b4>
   d8bba:	4684      	mov	ip, r0
   d8bbc:	1ac9      	subs	r1, r1, r3
   d8bbe:	b2a3      	uxth	r3, r4
   d8bc0:	fbb1 f0fe 	udiv	r0, r1, lr
   d8bc4:	fb0e 1110 	mls	r1, lr, r0, r1
   d8bc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
   d8bcc:	fb08 f800 	mul.w	r8, r8, r0
   d8bd0:	45a0      	cmp	r8, r4
   d8bd2:	d907      	bls.n	d8be4 <__udivmoddi4+0x10c>
   d8bd4:	193c      	adds	r4, r7, r4
   d8bd6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   d8bda:	d202      	bcs.n	d8be2 <__udivmoddi4+0x10a>
   d8bdc:	45a0      	cmp	r8, r4
   d8bde:	f200 80d9 	bhi.w	d8d94 <__udivmoddi4+0x2bc>
   d8be2:	4618      	mov	r0, r3
   d8be4:	eba4 0408 	sub.w	r4, r4, r8
   d8be8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   d8bec:	e7bf      	b.n	d8b6e <__udivmoddi4+0x96>
   d8bee:	428b      	cmp	r3, r1
   d8bf0:	d909      	bls.n	d8c06 <__udivmoddi4+0x12e>
   d8bf2:	2d00      	cmp	r5, #0
   d8bf4:	f000 80b1 	beq.w	d8d5a <__udivmoddi4+0x282>
   d8bf8:	2600      	movs	r6, #0
   d8bfa:	e9c5 0100 	strd	r0, r1, [r5]
   d8bfe:	4630      	mov	r0, r6
   d8c00:	4631      	mov	r1, r6
   d8c02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8c06:	fab3 f683 	clz	r6, r3
   d8c0a:	2e00      	cmp	r6, #0
   d8c0c:	d14a      	bne.n	d8ca4 <__udivmoddi4+0x1cc>
   d8c0e:	428b      	cmp	r3, r1
   d8c10:	d302      	bcc.n	d8c18 <__udivmoddi4+0x140>
   d8c12:	4282      	cmp	r2, r0
   d8c14:	f200 80b8 	bhi.w	d8d88 <__udivmoddi4+0x2b0>
   d8c18:	1a84      	subs	r4, r0, r2
   d8c1a:	eb61 0103 	sbc.w	r1, r1, r3
   d8c1e:	2001      	movs	r0, #1
   d8c20:	468c      	mov	ip, r1
   d8c22:	2d00      	cmp	r5, #0
   d8c24:	d0a8      	beq.n	d8b78 <__udivmoddi4+0xa0>
   d8c26:	e9c5 4c00 	strd	r4, ip, [r5]
   d8c2a:	e7a5      	b.n	d8b78 <__udivmoddi4+0xa0>
   d8c2c:	f1c2 0320 	rsb	r3, r2, #32
   d8c30:	fa20 f603 	lsr.w	r6, r0, r3
   d8c34:	4097      	lsls	r7, r2
   d8c36:	fa01 f002 	lsl.w	r0, r1, r2
   d8c3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   d8c3e:	40d9      	lsrs	r1, r3
   d8c40:	4330      	orrs	r0, r6
   d8c42:	0c03      	lsrs	r3, r0, #16
   d8c44:	fbb1 f6fe 	udiv	r6, r1, lr
   d8c48:	fa1f f887 	uxth.w	r8, r7
   d8c4c:	fb0e 1116 	mls	r1, lr, r6, r1
   d8c50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   d8c54:	fb06 f108 	mul.w	r1, r6, r8
   d8c58:	4299      	cmp	r1, r3
   d8c5a:	fa04 f402 	lsl.w	r4, r4, r2
   d8c5e:	d909      	bls.n	d8c74 <__udivmoddi4+0x19c>
   d8c60:	18fb      	adds	r3, r7, r3
   d8c62:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
   d8c66:	f080 808d 	bcs.w	d8d84 <__udivmoddi4+0x2ac>
   d8c6a:	4299      	cmp	r1, r3
   d8c6c:	f240 808a 	bls.w	d8d84 <__udivmoddi4+0x2ac>
   d8c70:	3e02      	subs	r6, #2
   d8c72:	443b      	add	r3, r7
   d8c74:	1a5b      	subs	r3, r3, r1
   d8c76:	b281      	uxth	r1, r0
   d8c78:	fbb3 f0fe 	udiv	r0, r3, lr
   d8c7c:	fb0e 3310 	mls	r3, lr, r0, r3
   d8c80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   d8c84:	fb00 f308 	mul.w	r3, r0, r8
   d8c88:	428b      	cmp	r3, r1
   d8c8a:	d907      	bls.n	d8c9c <__udivmoddi4+0x1c4>
   d8c8c:	1879      	adds	r1, r7, r1
   d8c8e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
   d8c92:	d273      	bcs.n	d8d7c <__udivmoddi4+0x2a4>
   d8c94:	428b      	cmp	r3, r1
   d8c96:	d971      	bls.n	d8d7c <__udivmoddi4+0x2a4>
   d8c98:	3802      	subs	r0, #2
   d8c9a:	4439      	add	r1, r7
   d8c9c:	1acb      	subs	r3, r1, r3
   d8c9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
   d8ca2:	e778      	b.n	d8b96 <__udivmoddi4+0xbe>
   d8ca4:	f1c6 0c20 	rsb	ip, r6, #32
   d8ca8:	fa03 f406 	lsl.w	r4, r3, r6
   d8cac:	fa22 f30c 	lsr.w	r3, r2, ip
   d8cb0:	431c      	orrs	r4, r3
   d8cb2:	fa20 f70c 	lsr.w	r7, r0, ip
   d8cb6:	fa01 f306 	lsl.w	r3, r1, r6
   d8cba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
   d8cbe:	fa21 f10c 	lsr.w	r1, r1, ip
   d8cc2:	431f      	orrs	r7, r3
   d8cc4:	0c3b      	lsrs	r3, r7, #16
   d8cc6:	fbb1 f9fe 	udiv	r9, r1, lr
   d8cca:	fa1f f884 	uxth.w	r8, r4
   d8cce:	fb0e 1119 	mls	r1, lr, r9, r1
   d8cd2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   d8cd6:	fb09 fa08 	mul.w	sl, r9, r8
   d8cda:	458a      	cmp	sl, r1
   d8cdc:	fa02 f206 	lsl.w	r2, r2, r6
   d8ce0:	fa00 f306 	lsl.w	r3, r0, r6
   d8ce4:	d908      	bls.n	d8cf8 <__udivmoddi4+0x220>
   d8ce6:	1861      	adds	r1, r4, r1
   d8ce8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
   d8cec:	d248      	bcs.n	d8d80 <__udivmoddi4+0x2a8>
   d8cee:	458a      	cmp	sl, r1
   d8cf0:	d946      	bls.n	d8d80 <__udivmoddi4+0x2a8>
   d8cf2:	f1a9 0902 	sub.w	r9, r9, #2
   d8cf6:	4421      	add	r1, r4
   d8cf8:	eba1 010a 	sub.w	r1, r1, sl
   d8cfc:	b2bf      	uxth	r7, r7
   d8cfe:	fbb1 f0fe 	udiv	r0, r1, lr
   d8d02:	fb0e 1110 	mls	r1, lr, r0, r1
   d8d06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
   d8d0a:	fb00 f808 	mul.w	r8, r0, r8
   d8d0e:	45b8      	cmp	r8, r7
   d8d10:	d907      	bls.n	d8d22 <__udivmoddi4+0x24a>
   d8d12:	19e7      	adds	r7, r4, r7
   d8d14:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
   d8d18:	d22e      	bcs.n	d8d78 <__udivmoddi4+0x2a0>
   d8d1a:	45b8      	cmp	r8, r7
   d8d1c:	d92c      	bls.n	d8d78 <__udivmoddi4+0x2a0>
   d8d1e:	3802      	subs	r0, #2
   d8d20:	4427      	add	r7, r4
   d8d22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   d8d26:	eba7 0708 	sub.w	r7, r7, r8
   d8d2a:	fba0 8902 	umull	r8, r9, r0, r2
   d8d2e:	454f      	cmp	r7, r9
   d8d30:	46c6      	mov	lr, r8
   d8d32:	4649      	mov	r1, r9
   d8d34:	d31a      	bcc.n	d8d6c <__udivmoddi4+0x294>
   d8d36:	d017      	beq.n	d8d68 <__udivmoddi4+0x290>
   d8d38:	b15d      	cbz	r5, d8d52 <__udivmoddi4+0x27a>
   d8d3a:	ebb3 020e 	subs.w	r2, r3, lr
   d8d3e:	eb67 0701 	sbc.w	r7, r7, r1
   d8d42:	fa07 fc0c 	lsl.w	ip, r7, ip
   d8d46:	40f2      	lsrs	r2, r6
   d8d48:	ea4c 0202 	orr.w	r2, ip, r2
   d8d4c:	40f7      	lsrs	r7, r6
   d8d4e:	e9c5 2700 	strd	r2, r7, [r5]
   d8d52:	2600      	movs	r6, #0
   d8d54:	4631      	mov	r1, r6
   d8d56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8d5a:	462e      	mov	r6, r5
   d8d5c:	4628      	mov	r0, r5
   d8d5e:	e70b      	b.n	d8b78 <__udivmoddi4+0xa0>
   d8d60:	4606      	mov	r6, r0
   d8d62:	e6e9      	b.n	d8b38 <__udivmoddi4+0x60>
   d8d64:	4618      	mov	r0, r3
   d8d66:	e6fd      	b.n	d8b64 <__udivmoddi4+0x8c>
   d8d68:	4543      	cmp	r3, r8
   d8d6a:	d2e5      	bcs.n	d8d38 <__udivmoddi4+0x260>
   d8d6c:	ebb8 0e02 	subs.w	lr, r8, r2
   d8d70:	eb69 0104 	sbc.w	r1, r9, r4
   d8d74:	3801      	subs	r0, #1
   d8d76:	e7df      	b.n	d8d38 <__udivmoddi4+0x260>
   d8d78:	4608      	mov	r0, r1
   d8d7a:	e7d2      	b.n	d8d22 <__udivmoddi4+0x24a>
   d8d7c:	4660      	mov	r0, ip
   d8d7e:	e78d      	b.n	d8c9c <__udivmoddi4+0x1c4>
   d8d80:	4681      	mov	r9, r0
   d8d82:	e7b9      	b.n	d8cf8 <__udivmoddi4+0x220>
   d8d84:	4666      	mov	r6, ip
   d8d86:	e775      	b.n	d8c74 <__udivmoddi4+0x19c>
   d8d88:	4630      	mov	r0, r6
   d8d8a:	e74a      	b.n	d8c22 <__udivmoddi4+0x14a>
   d8d8c:	f1ac 0c02 	sub.w	ip, ip, #2
   d8d90:	4439      	add	r1, r7
   d8d92:	e713      	b.n	d8bbc <__udivmoddi4+0xe4>
   d8d94:	3802      	subs	r0, #2
   d8d96:	443c      	add	r4, r7
   d8d98:	e724      	b.n	d8be4 <__udivmoddi4+0x10c>
   d8d9a:	bf00      	nop

000d8d9c <__aeabi_idiv0>:
   d8d9c:	4770      	bx	lr
   d8d9e:	bf00      	nop

000d8da0 <__cxa_atexit>:
   d8da0:	b510      	push	{r4, lr}
   d8da2:	4c05      	ldr	r4, [pc, #20]	; (d8db8 <__cxa_atexit+0x18>)
   d8da4:	4613      	mov	r3, r2
   d8da6:	b12c      	cbz	r4, d8db4 <__cxa_atexit+0x14>
   d8da8:	460a      	mov	r2, r1
   d8daa:	4601      	mov	r1, r0
   d8dac:	2002      	movs	r0, #2
   d8dae:	f3af 8000 	nop.w
   d8db2:	bd10      	pop	{r4, pc}
   d8db4:	4620      	mov	r0, r4
   d8db6:	e7fc      	b.n	d8db2 <__cxa_atexit+0x12>
   d8db8:	00000000 	.word	0x00000000

000d8dbc <memcpy>:
   d8dbc:	440a      	add	r2, r1
   d8dbe:	4291      	cmp	r1, r2
   d8dc0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   d8dc4:	d100      	bne.n	d8dc8 <memcpy+0xc>
   d8dc6:	4770      	bx	lr
   d8dc8:	b510      	push	{r4, lr}
   d8dca:	f811 4b01 	ldrb.w	r4, [r1], #1
   d8dce:	f803 4f01 	strb.w	r4, [r3, #1]!
   d8dd2:	4291      	cmp	r1, r2
   d8dd4:	d1f9      	bne.n	d8dca <memcpy+0xe>
   d8dd6:	bd10      	pop	{r4, pc}

000d8dd8 <memset>:
   d8dd8:	4402      	add	r2, r0
   d8dda:	4603      	mov	r3, r0
   d8ddc:	4293      	cmp	r3, r2
   d8dde:	d100      	bne.n	d8de2 <memset+0xa>
   d8de0:	4770      	bx	lr
   d8de2:	f803 1b01 	strb.w	r1, [r3], #1
   d8de6:	e7f9      	b.n	d8ddc <memset+0x4>

000d8de8 <srand>:
   d8de8:	b538      	push	{r3, r4, r5, lr}
   d8dea:	4b0d      	ldr	r3, [pc, #52]	; (d8e20 <srand+0x38>)
   d8dec:	681d      	ldr	r5, [r3, #0]
   d8dee:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d8df0:	4604      	mov	r4, r0
   d8df2:	b97b      	cbnz	r3, d8e14 <srand+0x2c>
   d8df4:	2018      	movs	r0, #24
   d8df6:	f7fc fcbd 	bl	d5774 <malloc>
   d8dfa:	4a0a      	ldr	r2, [pc, #40]	; (d8e24 <srand+0x3c>)
   d8dfc:	4b0a      	ldr	r3, [pc, #40]	; (d8e28 <srand+0x40>)
   d8dfe:	63a8      	str	r0, [r5, #56]	; 0x38
   d8e00:	e9c0 2300 	strd	r2, r3, [r0]
   d8e04:	4b09      	ldr	r3, [pc, #36]	; (d8e2c <srand+0x44>)
   d8e06:	6083      	str	r3, [r0, #8]
   d8e08:	230b      	movs	r3, #11
   d8e0a:	8183      	strh	r3, [r0, #12]
   d8e0c:	2201      	movs	r2, #1
   d8e0e:	2300      	movs	r3, #0
   d8e10:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d8e14:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d8e16:	2200      	movs	r2, #0
   d8e18:	611c      	str	r4, [r3, #16]
   d8e1a:	615a      	str	r2, [r3, #20]
   d8e1c:	bd38      	pop	{r3, r4, r5, pc}
   d8e1e:	bf00      	nop
   d8e20:	2003e440 	.word	0x2003e440
   d8e24:	abcd330e 	.word	0xabcd330e
   d8e28:	e66d1234 	.word	0xe66d1234
   d8e2c:	0005deec 	.word	0x0005deec

000d8e30 <strdup>:
   d8e30:	4b02      	ldr	r3, [pc, #8]	; (d8e3c <strdup+0xc>)
   d8e32:	4601      	mov	r1, r0
   d8e34:	6818      	ldr	r0, [r3, #0]
   d8e36:	f000 b803 	b.w	d8e40 <_strdup_r>
   d8e3a:	bf00      	nop
   d8e3c:	2003e440 	.word	0x2003e440

000d8e40 <_strdup_r>:
   d8e40:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d8e42:	4604      	mov	r4, r0
   d8e44:	4608      	mov	r0, r1
   d8e46:	460d      	mov	r5, r1
   d8e48:	f000 f80f 	bl	d8e6a <strlen>
   d8e4c:	1c42      	adds	r2, r0, #1
   d8e4e:	4611      	mov	r1, r2
   d8e50:	4620      	mov	r0, r4
   d8e52:	9201      	str	r2, [sp, #4]
   d8e54:	f7fc fcbe 	bl	d57d4 <_malloc_r>
   d8e58:	4604      	mov	r4, r0
   d8e5a:	b118      	cbz	r0, d8e64 <_strdup_r+0x24>
   d8e5c:	9a01      	ldr	r2, [sp, #4]
   d8e5e:	4629      	mov	r1, r5
   d8e60:	f7ff ffac 	bl	d8dbc <memcpy>
   d8e64:	4620      	mov	r0, r4
   d8e66:	b003      	add	sp, #12
   d8e68:	bd30      	pop	{r4, r5, pc}

000d8e6a <strlen>:
   d8e6a:	4603      	mov	r3, r0
   d8e6c:	f813 2b01 	ldrb.w	r2, [r3], #1
   d8e70:	2a00      	cmp	r2, #0
   d8e72:	d1fb      	bne.n	d8e6c <strlen+0x2>
   d8e74:	1a18      	subs	r0, r3, r0
   d8e76:	3801      	subs	r0, #1
   d8e78:	4770      	bx	lr

000d8e7a <link_code_end>:
	...

000d8e7c <dynalib_user>:
   d8e7c:	4021 000d 405d 000d 4085 000d 4089 000d     !@..]@...@...@..
   d8e8c:	0000 0000 6941 2072 7551 6c61 7469 2079     ....Air Quality 
   d8e9c:	6553 736e 726f 7220 6165 7964 002e 6941     Sensor ready..Ai
   d8eac:	2072 7551 6c61 7469 2079 6553 736e 726f     r Quality Sensor
   d8ebc:	4520 5252 524f 0021 4e46 3452 3839 5300      ERROR!.FNR498.S
   d8ecc:	6e65 6f73 7372 4900 696e 6974 6c61 7a69     ensors.Initializ
   d8edc:	6e69 0067 4d42 3245 3038 5320 6e65 6f73     ing.BME280 Senso
   d8eec:	2072 6572 6461 2e79 4200 454d 3832 2030     r ready..BME280 
   d8efc:	6553 736e 726f 4520 5252 524f 0021 6157     Sensor ERROR!.Wa
   d8f0c:	6d72 552d 0070 6f4e 656e 4400 6e61 6567     rm-Up.None.Dange
   d8f1c:	0072 6948 6867 5020 6c6f 756c 6974 6e6f     r.High Pollution
   d8f2c:	4c00 776f 5020 6c6f 756c 6974 6e6f 4600     .Low Pollution.F
   d8f3c:	6572 6873 4120 7269 4c00 4f50 203a 6425     resh Air.LPO: %d
   d8f4c:	5200 7461 6f69 203a 6625 2525 4300 6e6f     .Ratio: %f%%.Con
   d8f5c:	6563 746e 6172 6974 6e6f 203a 6625 7020     centration: %f p
   d8f6c:	7363 4c2f 5600 434f 4c20 7665 6c65 3a73     cs/L.VOC Levels:
   d8f7c:	0020 6554 706d 203a 4300 4800 6d75 6469      .Temp: .C.Humid
   d8f8c:	7469 3a79 0020 7250 7365 3a73 0020 6820     ity: .Press: . h
   d8f9c:	6150 4400 7375 3a74 0020 6941 2072 7551     Pa.Dust: .Air Qu
   d8fac:	6c61 7469 3a79 2520 0073 6554 706d 203a     ality: %s.Temp: 
   d8fbc:	6425 5000 6572 7373 7275 3a65 2520 0064     %d.Pressure: %d.
   d8fcc:	7548 696d 6964 7974 203a 6425 7b00 7422     Humidity: %d.{"t
   d8fdc:	6d65 2270 223a 2e25 6632 2c22 2220 7270     emp":"%.2f", "pr
   d8fec:	7365 7573 6572 3a22 2522 312e 2266 202c     essure":"%.1f", 
   d8ffc:	6822 6d75 6469 7469 2279 223a 2e25 6632     "humidity":"%.2f
   d900c:	2c22 2220 7161 735f 6f6c 6570 3a22 2522     ", "aq_slope":"%
   d901c:	322e 2266 202c 7622 636f 6c5f 7665 6c65     .2f", "voc_level
   d902c:	3a22 2522 332e 2266 202c 6c22 776f 7570     ":"%.3f", "lowpu
   d903c:	736c 6f65 6363 7075 6e61 7963 3a22 2522     lseoccupancy":"%
   d904c:	322e 2266 202c 6422 7375 2274 223a 2e25     .2f", "dust":"%.
   d905c:	6631 2c22 2220 6564 6976 6563 6469 3a22     1f", "deviceid":
   d906c:	2522 2273 007d 6f53 7475 2068 614f 6c6b     "%s"}.South Oakl
   d907c:	6e61 4c20 6661 7961 7465 6574 4920 004e     an Lafayette IN.
   d908c:	6e65 2d76 6176 736c 0000 0000               env-vals....

000d9098 <_ZN16AirQualitySensor12FORCE_SIGNALE>:
   d9098:	0000 0000                                   ....

000d909c <_ZN16AirQualitySensor13LOW_POLLUTIONE>:
   d909c:	0002 0000                                   ....

000d90a0 <_ZN16AirQualitySensor14HIGH_POLLUTIONE>:
   d90a0:	0001 0000                                   ....

000d90a4 <_ZN16AirQualitySensor9FRESH_AIRE>:
   d90a4:	0003 0000                                   ....

000d90a8 <_ZL9BasicFont>:
	...
   d90b0:	0000 005f 0000 0000 0000 0007 0007 0000     .._.............
   d90c0:	1400 147f 147f 0000 2400 7f2a 122a 0000     .........$*.*...
   d90d0:	2300 0813 6264 0000 3600 5549 5022 0000     .#..db...6IU"P..
   d90e0:	0000 0305 0000 0000 1c00 4122 0000 0000     .........."A....
   d90f0:	4100 1c22 0000 0000 0800 1c2a 082a 0000     .A".......*.*...
   d9100:	0800 3e08 0808 0000 a000 0060 0000 0000     ...>......`.....
   d9110:	0800 0808 0808 0000 6000 0060 0000 0000     .........``.....
   d9120:	2000 0810 0204 0000 3e00 4951 3e45 0000     . .......>QIE>..
   d9130:	0000 7f42 0040 0000 6200 4951 4649 0000     ..B.@....bQIIF..
   d9140:	2200 4941 3649 0000 1800 1214 107f 0000     ."AII6..........
   d9150:	2700 4545 3945 0000 3c00 494a 3049 0000     .'EEE9...<JII0..
   d9160:	0100 0971 0305 0000 3600 4949 3649 0000     ..q......6III6..
   d9170:	0600 4949 1e29 0000 0000 3636 0000 0000     ..II).....66....
   d9180:	0000 6cac 0000 0000 0800 2214 0041 0000     ...l......."A...
   d9190:	1400 1414 1414 0000 4100 1422 0008 0000     .........A".....
   d91a0:	0200 5101 0609 0000 3200 7949 3e41 0000     ...Q.....2IyA>..
   d91b0:	7e00 0909 7e09 0000 7f00 4949 3649 0000     .~...~....III6..
   d91c0:	3e00 4141 2241 0000 7f00 4141 1c22 0000     .>AAA"....AA"...
   d91d0:	7f00 4949 4149 0000 7f00 0909 0109 0000     ..IIIA..........
   d91e0:	3e00 4141 7251 0000 7f00 0808 7f08 0000     .>AAQr..........
   d91f0:	4100 417f 0000 0000 2000 4140 013f 0000     .A.A..... @A?...
   d9200:	7f00 1408 4122 0000 7f00 4040 4040 0000     ...."A....@@@@..
   d9210:	7f00 0c02 7f02 0000 7f00 0804 7f10 0000     ................
   d9220:	3e00 4141 3e41 0000 7f00 0909 0609 0000     .>AAA>..........
   d9230:	3e00 5141 5e21 0000 7f00 1909 4629 0000     .>AQ!^......)F..
   d9240:	2600 4949 3249 0000 0100 7f01 0101 0000     .&III2..........
   d9250:	3f00 4040 3f40 0000 1f00 4020 1f20 0000     .?@@@?.... @ ...
   d9260:	3f00 3840 3f40 0000 6300 0814 6314 0000     .?@8@?...c...c..
   d9270:	0300 7804 0304 0000 6100 4951 4345 0000     ...x.....aQIEC..
   d9280:	7f00 4141 0000 0000 0200 0804 2010 0000     ..AA......... ..
   d9290:	4100 7f41 0000 0000 0400 0102 0402 0000     .AA.............
   d92a0:	8000 8080 8080 0000 0100 0402 0000 0000     ................
   d92b0:	2000 5454 7854 0000 7f00 4448 3844 0000     . TTTx....HDD8..
   d92c0:	3800 4444 0028 0000 3800 4444 7f48 0000     .8DD(....8DDH...
   d92d0:	3800 5454 1854 0000 0800 097e 0002 0000     .8TTT.....~.....
   d92e0:	1800 a4a4 7ca4 0000 7f00 0408 7804 0000     .....|.......x..
   d92f0:	0000 007d 0000 0000 8000 7d84 0000 0000     ..}........}....
   d9300:	7f00 2810 0044 0000 4100 407f 0000 0000     ...(D....A.@....
   d9310:	7c00 1804 7804 0000 7c00 0408 007c 0000     .|...x...|..|...
   d9320:	3800 4444 0038 0000 fc00 2424 0018 0000     .8DD8.....$$....
   d9330:	1800 2424 00fc 0000 0000 087c 0004 0000     ..$$......|.....
   d9340:	4800 5454 0024 0000 0400 447f 0000 0000     .HTT$......D....
   d9350:	3c00 4040 007c 0000 1c00 4020 1c20 0000     .<@@|..... @ ...
   d9360:	3c00 3040 3c40 0000 4400 1028 4428 0000     .<@0@<...D(.(D..
   d9370:	1c00 a0a0 007c 0000 4400 5464 444c 0000     ....|....DdTLD..
   d9380:	0800 4136 0000 0000 0000 007f 0000 0000     ..6A............
   d9390:	4100 0836 0000 0000 0200 0101 0102 0000     .A6.............
   d93a0:	0200 0505 0002 0000 6564 6166 6c75 2074     ........default 
   d93b0:	4d00 4253 4c00 4253 3c00 5053 5349 7465     .MSB.LSB.<SPISet
   d93c0:	6974 676e 2073 6564 6166 6c75 3e74 3c00     tings default>.<
   d93d0:	5053 5349 7465 6974 676e 2073 7325 7525     SPISettings %s%u
   d93e0:	2520 2073 4f4d 4544 7525 003e                %s MODE%u>.

000d93ec <_ZTVN8particle11SPISettingsE>:
	...
   d93f4:	4a25 000d 49f9 000d 49fb 000d               %J...I...I..

000d9400 <_ZTVN5spark12NetworkClassE>:
	...
   d9408:	5817 000d 5821 000d 582b 000d 5835 000d     .X..!X..+X..5X..
   d9418:	583f 000d 584b 000d 5857 000d 5863 000d     ?X..KX..WX..cX..
   d9428:	586b 000d 5875 000d 587f 000d               kX..uX...X..

000d9434 <_ZTVN5spark9WiFiClassE>:
	...
   d943c:	59c3 000d 59b9 000d 59af 000d 5965 000d     .Y...Y...Y..eY..
   d944c:	59a3 000d 5997 000d 598b 000d 5983 000d     .Y...Y...Y...Y..
   d945c:	5979 000d 596f 000d 587f 000d               yY..oY...X..

000d9468 <_ZTV7TwoWire>:
	...
   d9470:	59e1 000d 5a2b 000d 5a03 000d 59e3 000d     .Y..+Z...Z...Y..
   d9480:	5a0b 000d 5a13 000d 5a1b 000d 5a23 000d     .Z...Z...Z..#Z..

000d9490 <_ZTV11USARTSerial>:
	...
   d9498:	5b05 000d 5b71 000d 5b49 000d 6501 000d     .[..q[..I[...e..
   d94a8:	5b19 000d 5b35 000d 5b27 000d 5b43 000d     .[..5[..'[..C[..
   d94b8:	5b07 000d 5b0b 000d                         .[...[..

000d94c0 <_ZTV9USBSerial>:
	...
   d94c8:	5c3f 000d 5ca7 000d 5c7d 000d 6501 000d     ?\...\..}\...e..
   d94d8:	5c6f 000d 5c41 000d 5c51 000d 5ca1 000d     o\..A\..Q\...\..
   d94e8:	5c61 000d 5c3b 000d                         a\..;\..

000d94f0 <_ZTV9IPAddress>:
	...
   d94f8:	5d59 000d 5d49 000d 5d4b 000d               Y]..I]..K]..

000d9504 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d950c:	5e2b 000d 5e31 000d 5e6f 000d 5e3f 000d     +^..1^..o^..?^..
   d951c:	5e2d 000d 5925 252d 2d6d 6425 2554 3a48     -^..%Y-%m-%dT%H:
   d952c:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.
   d953c:	7061 0070                                   app.

000d9540 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   d9540:	0800 1810 2820 3830                         .... (08

000d9548 <_ZTVN5spark13EthernetClassE>:
	...
   d9550:	698b 000d 6981 000d 6977 000d 696d 000d     .i...i..wi..mi..
   d9560:	6961 000d 6955 000d 6949 000d 6941 000d     ai..Ui..Ii..Ai..
   d9570:	6937 000d 692d 000d 587f 000d               7i..-i...X..

000d957c <_ZSt7nothrow>:
   d957c:	0000 0000 6f70 0077 0000 0000               ....pow.....

000d9588 <TWO52>:
   d9588:	0000 0000 0000 4330 0000 0000 0000 c330     ......0C......0.

000d9598 <link_const_variable_data_end>:
   d9598:	000d4731 	.word	0x000d4731
   d959c:	000d5951 	.word	0x000d5951
   d95a0:	000d59cd 	.word	0x000d59cd
   d95a4:	000d64b9 	.word	0x000d64b9
   d95a8:	000d64dd 	.word	0x000d64dd
   d95ac:	000d64f1 	.word	0x000d64f1
   d95b0:	000d6639 	.word	0x000d6639
   d95b4:	000d6795 	.word	0x000d6795
   d95b8:	000d6995 	.word	0x000d6995

000d95bc <link_constructors_end>:
   d95bc:	00000000 	.word	0x00000000
