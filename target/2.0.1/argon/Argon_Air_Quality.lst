
/home/jhosen/p2/Argon_Air_Quality/target/2.0.1/argon/Argon_Air_Quality.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00005530  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  000d9550  000d9550  00009550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000d9558  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000074  2003e430  000d955c  0001e430  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000034c  2003e4a4  2003e4a4  0002e4a4  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000d95d0  000d95d0  000295d0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000d95f8  000d95f8  000295f8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0017f1d5  00000000  00000000  000295fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000195ae  00000000  00000000  001a87d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002928  00000000  00000000  001c1d7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0003bf7f  00000000  00000000  001c46a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0003eeed  00000000  00000000  00200626  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00116835  00000000  00000000  0023f513  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0002ea77  00000000  00000000  00355d48  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00007c68  00000000  00000000  003847bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  000075e4  00000000  00000000  0038c428  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f004 feb3 	bl	d8d9c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f004 febb 	bl	d8db8 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e430 	.word	0x2003e430
   d404c:	000d955c 	.word	0x000d955c
   d4050:	2003e4a4 	.word	0x2003e4a4
   d4054:	2003e4a4 	.word	0x2003e4a4
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f002 f9e1 	bl	d6428 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000d9528 	.word	0x000d9528
   d4080:	000d954c 	.word	0x000d954c

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b824 	b.w	d40d0 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 fa2b 	bl	d44e4 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f002 b98b 	b.w	d63ac <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f001 bb5d 	b.w	d5754 <malloc>

000d409a <_Znaj>:
   d409a:	f001 bb5b 	b.w	d5754 <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f001 bb61 	b.w	d5764 <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr

000d40b2 <_ZN5Print8printlnfEPKcz>:
        auto r = this->vprintf(false, format, args);
        va_end(args);
        return r;
    }

    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d40b2:	b40e      	push	{r1, r2, r3}
   d40b4:	b503      	push	{r0, r1, lr}
   d40b6:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(true, format, args);
   d40b8:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d40ba:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   d40be:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   d40c0:	f002 fa71 	bl	d65a6 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   d40c4:	b002      	add	sp, #8
   d40c6:	f85d eb04 	ldr.w	lr, [sp], #4
   d40ca:	b003      	add	sp, #12
   d40cc:	4770      	bx	lr
	...

000d40d0 <setup>:
String getAirQuality();
void createEventPayload(int temp, int humidity, int pressure, String airQuality);
void updateDisplay(int temp, int humidity, int pressure, String airQuality);

void setup()
{
   d40d0:	b508      	push	{r3, lr}
  Serial.begin(9600);
   d40d2:	f001 fdff 	bl	d5cd4 <_Z16_fetch_usbserialv>
   d40d6:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d40da:	f001 fdef 	bl	d5cbc <_ZN9USBSerial5beginEl>
  delay(50);
   d40de:	2032      	movs	r0, #50	; 0x32
   d40e0:	f002 f9e8 	bl	d64b4 <delay>

  // Configure the dust sensor pin as an input
  pinMode(DUST_SENSOR_PIN, INPUT);
   d40e4:	2004      	movs	r0, #4
   d40e6:	2100      	movs	r1, #0
   d40e8:	f002 fccc 	bl	d6a84 <pinMode>

  if (aqSensor.init())
   d40ec:	4825      	ldr	r0, [pc, #148]	; (d4184 <setup+0xb4>)
   d40ee:	f000 fb30 	bl	d4752 <_ZN16AirQualitySensor4initEv>
   d40f2:	2800      	cmp	r0, #0
   d40f4:	d03d      	beq.n	d4172 <setup+0xa2>
  {
    Serial.println("Air Quality Sensor ready.");
   d40f6:	f001 fded 	bl	d5cd4 <_Z16_fetch_usbserialv>
   d40fa:	4923      	ldr	r1, [pc, #140]	; (d4188 <setup+0xb8>)
  }
  else
  {
    Serial.println("Air Quality Sensor ERROR!");
   d40fc:	f002 fa2b 	bl	d6556 <_ZN5Print7printlnEPKc>
  }

  Wire.begin();
   d4100:	f002 fc5a 	bl	d69b8 <_Z19__fetch_global_Wirev>
   d4104:	f001 fc9a 	bl	d5a3c <_ZN7TwoWire5beginEv>
  SeeedOled.init();
   d4108:	4820      	ldr	r0, [pc, #128]	; (d418c <setup+0xbc>)
   d410a:	f000 fb9b 	bl	d4844 <_ZN9SeeedOLED4initEv>

  SeeedOled.clearDisplay();
   d410e:	481f      	ldr	r0, [pc, #124]	; (d418c <setup+0xbc>)
   d4110:	f000 fbfa 	bl	d4908 <_ZN9SeeedOLED12clearDisplayEv>
  SeeedOled.setNormalDisplay();
   d4114:	481d      	ldr	r0, [pc, #116]	; (d418c <setup+0xbc>)
   d4116:	f000 fc5c 	bl	d49d2 <_ZN9SeeedOLED16setNormalDisplayEv>
  SeeedOled.setPageMode();
   d411a:	481c      	ldr	r0, [pc, #112]	; (d418c <setup+0xbc>)
   d411c:	f000 fba4 	bl	d4868 <_ZN9SeeedOLED11setPageModeEv>

  SeeedOled.setTextXY(2, 0);
   d4120:	2200      	movs	r2, #0
   d4122:	481a      	ldr	r0, [pc, #104]	; (d418c <setup+0xbc>)
   d4124:	2102      	movs	r1, #2
   d4126:	f000 fbaa 	bl	d487e <_ZN9SeeedOLED9setTextXYEhh>
  SeeedOled.putString("FNR498");
   d412a:	4919      	ldr	r1, [pc, #100]	; (d4190 <setup+0xc0>)
   d412c:	4817      	ldr	r0, [pc, #92]	; (d418c <setup+0xbc>)
   d412e:	f000 fc0c 	bl	d494a <_ZN9SeeedOLED9putStringEPKc>
  SeeedOled.setTextXY(3, 0);
   d4132:	2200      	movs	r2, #0
   d4134:	4815      	ldr	r0, [pc, #84]	; (d418c <setup+0xbc>)
   d4136:	2103      	movs	r1, #3
   d4138:	f000 fba1 	bl	d487e <_ZN9SeeedOLED9setTextXYEhh>
  SeeedOled.putString("Sensor");
   d413c:	4915      	ldr	r1, [pc, #84]	; (d4194 <setup+0xc4>)
   d413e:	4813      	ldr	r0, [pc, #76]	; (d418c <setup+0xbc>)
   d4140:	f000 fc03 	bl	d494a <_ZN9SeeedOLED9putStringEPKc>
  SeeedOled.setTextXY(4, 0);
   d4144:	4811      	ldr	r0, [pc, #68]	; (d418c <setup+0xbc>)
   d4146:	2200      	movs	r2, #0
   d4148:	2104      	movs	r1, #4
   d414a:	f000 fb98 	bl	d487e <_ZN9SeeedOLED9setTextXYEhh>
  SeeedOled.putString("Initializing");
   d414e:	480f      	ldr	r0, [pc, #60]	; (d418c <setup+0xbc>)
   d4150:	4911      	ldr	r1, [pc, #68]	; (d4198 <setup+0xc8>)
   d4152:	f000 fbfa 	bl	d494a <_ZN9SeeedOLED9putStringEPKc>

  if (bme.begin())
   d4156:	4811      	ldr	r0, [pc, #68]	; (d419c <setup+0xcc>)
   d4158:	f001 f8c5 	bl	d52e6 <_ZN15Adafruit_BME2805beginEv>
   d415c:	b168      	cbz	r0, d417a <setup+0xaa>
  {
    Serial.println("BME280 Sensor ready.");
   d415e:	f001 fdb9 	bl	d5cd4 <_Z16_fetch_usbserialv>
   d4162:	490f      	ldr	r1, [pc, #60]	; (d41a0 <setup+0xd0>)
  }
  else
  {
    Serial.println("BME280 Sensor ERROR!");
   d4164:	f002 f9f7 	bl	d6556 <_ZN5Print7printlnEPKc>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4168:	f001 fa00 	bl	d556c <HAL_Timer_Get_Milli_Seconds>
  }

  lastInterval = millis();
   d416c:	4b0d      	ldr	r3, [pc, #52]	; (d41a4 <setup+0xd4>)
   d416e:	6018      	str	r0, [r3, #0]
}
   d4170:	bd08      	pop	{r3, pc}
    Serial.println("Air Quality Sensor ERROR!");
   d4172:	f001 fdaf 	bl	d5cd4 <_Z16_fetch_usbserialv>
   d4176:	490c      	ldr	r1, [pc, #48]	; (d41a8 <setup+0xd8>)
   d4178:	e7c0      	b.n	d40fc <setup+0x2c>
    Serial.println("BME280 Sensor ERROR!");
   d417a:	f001 fdab 	bl	d5cd4 <_Z16_fetch_usbserialv>
   d417e:	490b      	ldr	r1, [pc, #44]	; (d41ac <setup+0xdc>)
   d4180:	e7f0      	b.n	d4164 <setup+0x94>
   d4182:	bf00      	nop
   d4184:	2003e4ac 	.word	0x2003e4ac
   d4188:	000d8e70 	.word	0x000d8e70
   d418c:	2003e640 	.word	0x2003e640
   d4190:	000d8ea4 	.word	0x000d8ea4
   d4194:	000d8eab 	.word	0x000d8eab
   d4198:	000d8eb2 	.word	0x000d8eb2
   d419c:	2003e4c8 	.word	0x2003e4c8
   d41a0:	000d8ebf 	.word	0x000d8ebf
   d41a4:	2003e530 	.word	0x2003e530
   d41a8:	000d8e8a 	.word	0x000d8e8a
   d41ac:	000d8ed4 	.word	0x000d8ed4

000d41b0 <_Z16getAirQualityNumv>:



int getAirQualityNum()
{
  int qual_int = aqSensor.slope();
   d41b0:	4801      	ldr	r0, [pc, #4]	; (d41b8 <_Z16getAirQualityNumv+0x8>)
   d41b2:	f000 bafd 	b.w	d47b0 <_ZN16AirQualitySensor5slopeEv>
   d41b6:	bf00      	nop
   d41b8:	2003e4ac 	.word	0x2003e4ac

000d41bc <_Z13getAirQualityv>:
  return qual_int;
}

String getAirQuality()
{
   d41bc:	b538      	push	{r3, r4, r5, lr}
   d41be:	4604      	mov	r4, r0
  int quality = aqSensor.slope();
   d41c0:	4811      	ldr	r0, [pc, #68]	; (d4208 <_Z13getAirQualityv+0x4c>)
   d41c2:	f000 faf5 	bl	d47b0 <_ZN16AirQualitySensor5slopeEv>
  String qual = "None";
   d41c6:	4911      	ldr	r1, [pc, #68]	; (d420c <_Z13getAirQualityv+0x50>)
  int quality = aqSensor.slope();
   d41c8:	4605      	mov	r5, r0
  String qual = "None";
   d41ca:	4620      	mov	r0, r4
   d41cc:	f002 fa83 	bl	d66d6 <_ZN6StringC1EPKc>

  if (quality == AirQualitySensor::FORCE_SIGNAL)
   d41d0:	4b0f      	ldr	r3, [pc, #60]	; (d4210 <_Z13getAirQualityv+0x54>)
   d41d2:	681b      	ldr	r3, [r3, #0]
   d41d4:	42ab      	cmp	r3, r5
   d41d6:	d105      	bne.n	d41e4 <_Z13getAirQualityv+0x28>
  {
    qual = "Danger";
   d41d8:	490e      	ldr	r1, [pc, #56]	; (d4214 <_Z13getAirQualityv+0x58>)
  {
    qual = "Low Pollution";
  }
  else if (quality == AirQualitySensor::FRESH_AIR)
  {
    qual = "Fresh Air";
   d41da:	4620      	mov	r0, r4
   d41dc:	f002 faa9 	bl	d6732 <_ZN6StringaSEPKc>
  }

  return qual;
}
   d41e0:	4620      	mov	r0, r4
   d41e2:	bd38      	pop	{r3, r4, r5, pc}
  else if (quality == AirQualitySensor::HIGH_POLLUTION)
   d41e4:	4b0c      	ldr	r3, [pc, #48]	; (d4218 <_Z13getAirQualityv+0x5c>)
   d41e6:	681b      	ldr	r3, [r3, #0]
   d41e8:	42ab      	cmp	r3, r5
   d41ea:	d101      	bne.n	d41f0 <_Z13getAirQualityv+0x34>
    qual = "High Pollution";
   d41ec:	490b      	ldr	r1, [pc, #44]	; (d421c <_Z13getAirQualityv+0x60>)
   d41ee:	e7f4      	b.n	d41da <_Z13getAirQualityv+0x1e>
  else if (quality == AirQualitySensor::LOW_POLLUTION)
   d41f0:	4b0b      	ldr	r3, [pc, #44]	; (d4220 <_Z13getAirQualityv+0x64>)
   d41f2:	681b      	ldr	r3, [r3, #0]
   d41f4:	42ab      	cmp	r3, r5
   d41f6:	d101      	bne.n	d41fc <_Z13getAirQualityv+0x40>
    qual = "Low Pollution";
   d41f8:	490a      	ldr	r1, [pc, #40]	; (d4224 <_Z13getAirQualityv+0x68>)
   d41fa:	e7ee      	b.n	d41da <_Z13getAirQualityv+0x1e>
  else if (quality == AirQualitySensor::FRESH_AIR)
   d41fc:	4b0a      	ldr	r3, [pc, #40]	; (d4228 <_Z13getAirQualityv+0x6c>)
   d41fe:	681b      	ldr	r3, [r3, #0]
   d4200:	42ab      	cmp	r3, r5
   d4202:	d1ed      	bne.n	d41e0 <_Z13getAirQualityv+0x24>
    qual = "Fresh Air";
   d4204:	4909      	ldr	r1, [pc, #36]	; (d422c <_Z13getAirQualityv+0x70>)
   d4206:	e7e8      	b.n	d41da <_Z13getAirQualityv+0x1e>
   d4208:	2003e4ac 	.word	0x2003e4ac
   d420c:	000d8ee9 	.word	0x000d8ee9
   d4210:	000d9028 	.word	0x000d9028
   d4214:	000d8eee 	.word	0x000d8eee
   d4218:	000d9030 	.word	0x000d9030
   d421c:	000d8ef5 	.word	0x000d8ef5
   d4220:	000d902c 	.word	0x000d902c
   d4224:	000d8f04 	.word	0x000d8f04
   d4228:	000d9034 	.word	0x000d9034
   d422c:	000d8f12 	.word	0x000d8f12

000d4230 <_Z12getBMEValuesRiS_S_>:

int getBMEValues(int &temp, int &pressure, int &humidity)
{
   d4230:	b570      	push	{r4, r5, r6, lr}
   d4232:	4606      	mov	r6, r0
  temp = (int)bme.readTemperature();
   d4234:	480e      	ldr	r0, [pc, #56]	; (d4270 <_Z12getBMEValuesRiS_S_+0x40>)
{
   d4236:	460d      	mov	r5, r1
   d4238:	4614      	mov	r4, r2
  temp = (int)bme.readTemperature();
   d423a:	f000 fcdf 	bl	d4bfc <_ZN15Adafruit_BME28015readTemperatureEv>
   d423e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
  pressure = (int)(bme.readPressure() / 100.0F);
   d4242:	480b      	ldr	r0, [pc, #44]	; (d4270 <_Z12getBMEValuesRiS_S_+0x40>)
  temp = (int)bme.readTemperature();
   d4244:	ed86 0a00 	vstr	s0, [r6]
  pressure = (int)(bme.readPressure() / 100.0F);
   d4248:	f000 fd06 	bl	d4c58 <_ZN15Adafruit_BME28012readPressureEv>
   d424c:	ed9f 7a09 	vldr	s14, [pc, #36]	; d4274 <_Z12getBMEValuesRiS_S_+0x44>
  humidity = (int)bme.readHumidity();
   d4250:	4807      	ldr	r0, [pc, #28]	; (d4270 <_Z12getBMEValuesRiS_S_+0x40>)
  pressure = (int)(bme.readPressure() / 100.0F);
   d4252:	eec0 7a07 	vdiv.f32	s15, s0, s14
   d4256:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   d425a:	edc5 7a00 	vstr	s15, [r5]
  humidity = (int)bme.readHumidity();
   d425e:	f000 fe3d 	bl	d4edc <_ZN15Adafruit_BME28012readHumidityEv>
   d4262:	eebd 0ac0 	vcvt.s32.f32	s0, s0

  return 1;
}
   d4266:	2001      	movs	r0, #1
  humidity = (int)bme.readHumidity();
   d4268:	ed84 0a00 	vstr	s0, [r4]
}
   d426c:	bd70      	pop	{r4, r5, r6, pc}
   d426e:	bf00      	nop
   d4270:	2003e4c8 	.word	0x2003e4c8
   d4274:	42c80000 	.word	0x42c80000

000d4278 <_Z21getDustSensorReadingsv>:

void getDustSensorReadings()
{
   d4278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d427c:	ed2d 8b02 	vpush	{d8}
  // This particular dust sensor returns 0s often, so let's filter them out by making sure we only
  // capture and use non-zero LPO values for our calculations once we get a good reading.
  if (lowpulseoccupancy == 0)
   d4280:	4c49      	ldr	r4, [pc, #292]	; (d43a8 <_Z21getDustSensorReadingsv+0x130>)
   d4282:	4b4a      	ldr	r3, [pc, #296]	; (d43ac <_Z21getDustSensorReadingsv+0x134>)
   d4284:	6822      	ldr	r2, [r4, #0]
   d4286:	2a00      	cmp	r2, #0
   d4288:	d177      	bne.n	d437a <_Z21getDustSensorReadingsv+0x102>
  {
    lowpulseoccupancy = last_lpo;
   d428a:	681b      	ldr	r3, [r3, #0]
   d428c:	6023      	str	r3, [r4, #0]
  else
  {
    last_lpo = lowpulseoccupancy;
  }

  ratio = lowpulseoccupancy / (SENSOR_READING_INTERVAL * 10.0);                   // Integer percentage 0=>100
   d428e:	6820      	ldr	r0, [r4, #0]
   d4290:	4d47      	ldr	r5, [pc, #284]	; (d43b0 <_Z21getDustSensorReadingsv+0x138>)
  concentration = 1.1 * pow(ratio, 3) - 3.8 * pow(ratio, 2) + 520 * ratio + 0.62; // using spec sheet curve
   d4292:	f8df a130 	ldr.w	sl, [pc, #304]	; d43c4 <_Z21getDustSensorReadingsv+0x14c>
  ratio = lowpulseoccupancy / (SENSOR_READING_INTERVAL * 10.0);                   // Integer percentage 0=>100
   d4296:	f003 ff37 	bl	d8108 <__aeabi_ui2d>
   d429a:	a339      	add	r3, pc, #228	; (adr r3, d4380 <_Z21getDustSensorReadingsv+0x108>)
   d429c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d42a0:	f004 f8d6 	bl	d8450 <__aeabi_ddiv>
   d42a4:	f004 fa5a 	bl	d875c <__aeabi_d2f>
   d42a8:	6028      	str	r0, [r5, #0]
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
   d42aa:	f003 ff4f 	bl	d814c <__aeabi_f2d>
   d42ae:	ed9f 1b36 	vldr	d1, [pc, #216]	; d4388 <_Z21getDustSensorReadingsv+0x110>
   d42b2:	ec41 0b10 	vmov	d0, r0, r1
   d42b6:	f002 fc47 	bl	d6b48 <pow>
  concentration = 1.1 * pow(ratio, 3) - 3.8 * pow(ratio, 2) + 520 * ratio + 0.62; // using spec sheet curve
   d42ba:	ed95 8a00 	vldr	s16, [r5]
   d42be:	ee18 0a10 	vmov	r0, s16
   d42c2:	ec57 6b10 	vmov	r6, r7, d0
   d42c6:	f003 ff41 	bl	d814c <__aeabi_f2d>
   d42ca:	a331      	add	r3, pc, #196	; (adr r3, d4390 <_Z21getDustSensorReadingsv+0x118>)
   d42cc:	e9d3 2300 	ldrd	r2, r3, [r3]
   d42d0:	4680      	mov	r8, r0
   d42d2:	4689      	mov	r9, r1
   d42d4:	4630      	mov	r0, r6
   d42d6:	4639      	mov	r1, r7
   d42d8:	f003 ff90 	bl	d81fc <__aeabi_dmul>
   d42dc:	4642      	mov	r2, r8
   d42de:	4606      	mov	r6, r0
   d42e0:	460f      	mov	r7, r1
   d42e2:	464b      	mov	r3, r9
   d42e4:	4640      	mov	r0, r8
   d42e6:	4649      	mov	r1, r9
   d42e8:	f003 ff88 	bl	d81fc <__aeabi_dmul>
   d42ec:	a32a      	add	r3, pc, #168	; (adr r3, d4398 <_Z21getDustSensorReadingsv+0x120>)
   d42ee:	e9d3 2300 	ldrd	r2, r3, [r3]
   d42f2:	f003 ff83 	bl	d81fc <__aeabi_dmul>
   d42f6:	4602      	mov	r2, r0
   d42f8:	460b      	mov	r3, r1
   d42fa:	4630      	mov	r0, r6
   d42fc:	4639      	mov	r1, r7
   d42fe:	f003 fdc5 	bl	d7e8c <__aeabi_dsub>
   d4302:	eddf 7a2c 	vldr	s15, [pc, #176]	; d43b4 <_Z21getDustSensorReadingsv+0x13c>
   d4306:	ee68 7a27 	vmul.f32	s15, s16, s15
   d430a:	4606      	mov	r6, r0
   d430c:	ee17 0a90 	vmov	r0, s15
   d4310:	460f      	mov	r7, r1
   d4312:	f003 ff1b 	bl	d814c <__aeabi_f2d>
   d4316:	4602      	mov	r2, r0
   d4318:	460b      	mov	r3, r1
   d431a:	4630      	mov	r0, r6
   d431c:	4639      	mov	r1, r7
   d431e:	f003 fdb7 	bl	d7e90 <__adddf3>
   d4322:	a31f      	add	r3, pc, #124	; (adr r3, d43a0 <_Z21getDustSensorReadingsv+0x128>)
   d4324:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4328:	f003 fdb2 	bl	d7e90 <__adddf3>
   d432c:	f004 fa16 	bl	d875c <__aeabi_d2f>
   d4330:	f8ca 0000 	str.w	r0, [sl]

  Serial.printlnf("LPO: %d", lowpulseoccupancy);
   d4334:	f001 fcce 	bl	d5cd4 <_Z16_fetch_usbserialv>
   d4338:	6822      	ldr	r2, [r4, #0]
   d433a:	491f      	ldr	r1, [pc, #124]	; (d43b8 <_Z21getDustSensorReadingsv+0x140>)
   d433c:	f7ff feb9 	bl	d40b2 <_ZN5Print8printlnfEPKcz>
  Serial.printlnf("Ratio: %f%%", ratio);
   d4340:	f001 fcc8 	bl	d5cd4 <_Z16_fetch_usbserialv>
   d4344:	4604      	mov	r4, r0
   d4346:	6828      	ldr	r0, [r5, #0]
   d4348:	f003 ff00 	bl	d814c <__aeabi_f2d>
   d434c:	4602      	mov	r2, r0
   d434e:	460b      	mov	r3, r1
   d4350:	4620      	mov	r0, r4
   d4352:	491a      	ldr	r1, [pc, #104]	; (d43bc <_Z21getDustSensorReadingsv+0x144>)
   d4354:	f7ff fead 	bl	d40b2 <_ZN5Print8printlnfEPKcz>
  Serial.printlnf("Concentration: %f pcs/L", concentration);
   d4358:	f001 fcbc 	bl	d5cd4 <_Z16_fetch_usbserialv>
   d435c:	4604      	mov	r4, r0
   d435e:	f8da 0000 	ldr.w	r0, [sl]
   d4362:	f003 fef3 	bl	d814c <__aeabi_f2d>
   d4366:	4602      	mov	r2, r0
   d4368:	460b      	mov	r3, r1
   d436a:	4620      	mov	r0, r4
   d436c:	4914      	ldr	r1, [pc, #80]	; (d43c0 <_Z21getDustSensorReadingsv+0x148>)
   d436e:	f7ff fea0 	bl	d40b2 <_ZN5Print8printlnfEPKcz>
}
   d4372:	ecbd 8b02 	vpop	{d8}
   d4376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    last_lpo = lowpulseoccupancy;
   d437a:	601a      	str	r2, [r3, #0]
   d437c:	e787      	b.n	d428e <_Z21getDustSensorReadingsv+0x16>
   d437e:	bf00      	nop
   d4380:	00000000 	.word	0x00000000
   d4384:	41612a88 	.word	0x41612a88
   d4388:	00000000 	.word	0x00000000
   d438c:	40080000 	.word	0x40080000
   d4390:	9999999a 	.word	0x9999999a
   d4394:	3ff19999 	.word	0x3ff19999
   d4398:	66666666 	.word	0x66666666
   d439c:	400e6666 	.word	0x400e6666
   d43a0:	3d70a3d7 	.word	0x3d70a3d7
   d43a4:	3fe3d70a 	.word	0x3fe3d70a
   d43a8:	2003e538 	.word	0x2003e538
   d43ac:	2003e534 	.word	0x2003e534
   d43b0:	2003e63c 	.word	0x2003e63c
   d43b4:	44020000 	.word	0x44020000
   d43b8:	000d8f1c 	.word	0x000d8f1c
   d43bc:	000d8f24 	.word	0x000d8f24
   d43c0:	000d8f30 	.word	0x000d8f30
   d43c4:	2003e50c 	.word	0x2003e50c

000d43c8 <_Z13updateDisplayiii6Stringi>:




void updateDisplay(int temp, int humidity, int pressure, String airQuality, int qual_int)
{
   d43c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d43cc:	461f      	mov	r7, r3
   d43ce:	4606      	mov	r6, r0
  SeeedOled.clearDisplay();
   d43d0:	4839      	ldr	r0, [pc, #228]	; (d44b8 <_Z13updateDisplayiii6Stringi+0xf0>)
{
   d43d2:	f8dd 8018 	ldr.w	r8, [sp, #24]
   d43d6:	4614      	mov	r4, r2
   d43d8:	460d      	mov	r5, r1
  SeeedOled.clearDisplay();
   d43da:	f000 fa95 	bl	d4908 <_ZN9SeeedOLED12clearDisplayEv>

  SeeedOled.setTextXY(0, 3);
   d43de:	2203      	movs	r2, #3
   d43e0:	4835      	ldr	r0, [pc, #212]	; (d44b8 <_Z13updateDisplayiii6Stringi+0xf0>)
   d43e2:	2100      	movs	r1, #0
   d43e4:	f000 fa4b 	bl	d487e <_ZN9SeeedOLED9setTextXYEhh>
  SeeedOled.putString(airQuality);
   d43e8:	6839      	ldr	r1, [r7, #0]
   d43ea:	4833      	ldr	r0, [pc, #204]	; (d44b8 <_Z13updateDisplayiii6Stringi+0xf0>)
   d43ec:	f000 faad 	bl	d494a <_ZN9SeeedOLED9putStringEPKc>

  SeeedOled.setTextXY(1, 0);
   d43f0:	2200      	movs	r2, #0
   d43f2:	4831      	ldr	r0, [pc, #196]	; (d44b8 <_Z13updateDisplayiii6Stringi+0xf0>)
   d43f4:	2101      	movs	r1, #1
   d43f6:	f000 fa42 	bl	d487e <_ZN9SeeedOLED9setTextXYEhh>
  SeeedOled.putString("VOC Levels: ");
   d43fa:	4930      	ldr	r1, [pc, #192]	; (d44bc <_Z13updateDisplayiii6Stringi+0xf4>)
   d43fc:	482e      	ldr	r0, [pc, #184]	; (d44b8 <_Z13updateDisplayiii6Stringi+0xf0>)
   d43fe:	f000 faa4 	bl	d494a <_ZN9SeeedOLED9putStringEPKc>
  SeeedOled.putNumber(qual_int);
   d4402:	4641      	mov	r1, r8
   d4404:	482c      	ldr	r0, [pc, #176]	; (d44b8 <_Z13updateDisplayiii6Stringi+0xf0>)
   d4406:	f000 faad 	bl	d4964 <_ZN9SeeedOLED9putNumberEl>


  SeeedOled.setTextXY(2, 0);
   d440a:	2200      	movs	r2, #0
   d440c:	482a      	ldr	r0, [pc, #168]	; (d44b8 <_Z13updateDisplayiii6Stringi+0xf0>)
   d440e:	2102      	movs	r1, #2
   d4410:	f000 fa35 	bl	d487e <_ZN9SeeedOLED9setTextXYEhh>
  SeeedOled.putString("Temp: ");
   d4414:	492a      	ldr	r1, [pc, #168]	; (d44c0 <_Z13updateDisplayiii6Stringi+0xf8>)
   d4416:	4828      	ldr	r0, [pc, #160]	; (d44b8 <_Z13updateDisplayiii6Stringi+0xf0>)
   d4418:	f000 fa97 	bl	d494a <_ZN9SeeedOLED9putStringEPKc>
  SeeedOled.putNumber(temp);
   d441c:	4631      	mov	r1, r6
   d441e:	4826      	ldr	r0, [pc, #152]	; (d44b8 <_Z13updateDisplayiii6Stringi+0xf0>)
   d4420:	f000 faa0 	bl	d4964 <_ZN9SeeedOLED9putNumberEl>
  SeeedOled.putString("C");
   d4424:	4927      	ldr	r1, [pc, #156]	; (d44c4 <_Z13updateDisplayiii6Stringi+0xfc>)
   d4426:	4824      	ldr	r0, [pc, #144]	; (d44b8 <_Z13updateDisplayiii6Stringi+0xf0>)
   d4428:	f000 fa8f 	bl	d494a <_ZN9SeeedOLED9putStringEPKc>

  SeeedOled.setTextXY(3, 0);
   d442c:	2200      	movs	r2, #0
   d442e:	4822      	ldr	r0, [pc, #136]	; (d44b8 <_Z13updateDisplayiii6Stringi+0xf0>)
   d4430:	2103      	movs	r1, #3
   d4432:	f000 fa24 	bl	d487e <_ZN9SeeedOLED9setTextXYEhh>
  SeeedOled.putString("Humidity: ");
   d4436:	4924      	ldr	r1, [pc, #144]	; (d44c8 <_Z13updateDisplayiii6Stringi+0x100>)
   d4438:	481f      	ldr	r0, [pc, #124]	; (d44b8 <_Z13updateDisplayiii6Stringi+0xf0>)
   d443a:	f000 fa86 	bl	d494a <_ZN9SeeedOLED9putStringEPKc>
  SeeedOled.putNumber(humidity);
   d443e:	4629      	mov	r1, r5
   d4440:	481d      	ldr	r0, [pc, #116]	; (d44b8 <_Z13updateDisplayiii6Stringi+0xf0>)
   d4442:	f000 fa8f 	bl	d4964 <_ZN9SeeedOLED9putNumberEl>
  SeeedOled.putString("%");
   d4446:	4921      	ldr	r1, [pc, #132]	; (d44cc <_Z13updateDisplayiii6Stringi+0x104>)
   d4448:	481b      	ldr	r0, [pc, #108]	; (d44b8 <_Z13updateDisplayiii6Stringi+0xf0>)
   d444a:	f000 fa7e 	bl	d494a <_ZN9SeeedOLED9putStringEPKc>

  SeeedOled.setTextXY(4, 0);
   d444e:	2200      	movs	r2, #0
   d4450:	4819      	ldr	r0, [pc, #100]	; (d44b8 <_Z13updateDisplayiii6Stringi+0xf0>)
   d4452:	2104      	movs	r1, #4
   d4454:	f000 fa13 	bl	d487e <_ZN9SeeedOLED9setTextXYEhh>
  SeeedOled.putString("Press: ");
   d4458:	491d      	ldr	r1, [pc, #116]	; (d44d0 <_Z13updateDisplayiii6Stringi+0x108>)
   d445a:	4817      	ldr	r0, [pc, #92]	; (d44b8 <_Z13updateDisplayiii6Stringi+0xf0>)
   d445c:	f000 fa75 	bl	d494a <_ZN9SeeedOLED9putStringEPKc>
  SeeedOled.putNumber(pressure);
   d4460:	4621      	mov	r1, r4
   d4462:	4815      	ldr	r0, [pc, #84]	; (d44b8 <_Z13updateDisplayiii6Stringi+0xf0>)
  SeeedOled.putString(" hPa");

  if (concentration > 1)
   d4464:	4c1b      	ldr	r4, [pc, #108]	; (d44d4 <_Z13updateDisplayiii6Stringi+0x10c>)
  SeeedOled.putNumber(pressure);
   d4466:	f000 fa7d 	bl	d4964 <_ZN9SeeedOLED9putNumberEl>
  SeeedOled.putString(" hPa");
   d446a:	491b      	ldr	r1, [pc, #108]	; (d44d8 <_Z13updateDisplayiii6Stringi+0x110>)
   d446c:	4812      	ldr	r0, [pc, #72]	; (d44b8 <_Z13updateDisplayiii6Stringi+0xf0>)
   d446e:	f000 fa6c 	bl	d494a <_ZN9SeeedOLED9putStringEPKc>
  if (concentration > 1)
   d4472:	ed94 7a00 	vldr	s14, [r4]
   d4476:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   d447a:	eeb4 7ae7 	vcmpe.f32	s14, s15
   d447e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4482:	dd17      	ble.n	d44b4 <_Z13updateDisplayiii6Stringi+0xec>
  {
    SeeedOled.setTextXY(5, 0);
   d4484:	2200      	movs	r2, #0
   d4486:	480c      	ldr	r0, [pc, #48]	; (d44b8 <_Z13updateDisplayiii6Stringi+0xf0>)
   d4488:	2105      	movs	r1, #5
   d448a:	f000 f9f8 	bl	d487e <_ZN9SeeedOLED9setTextXYEhh>
    SeeedOled.putString("Dust: ");
   d448e:	4913      	ldr	r1, [pc, #76]	; (d44dc <_Z13updateDisplayiii6Stringi+0x114>)
   d4490:	4809      	ldr	r0, [pc, #36]	; (d44b8 <_Z13updateDisplayiii6Stringi+0xf0>)
   d4492:	f000 fa5a 	bl	d494a <_ZN9SeeedOLED9putStringEPKc>
    SeeedOled.putNumber(concentration); // Will cast our float to an int to make it more compact
   d4496:	edd4 7a00 	vldr	s15, [r4]
   d449a:	4807      	ldr	r0, [pc, #28]	; (d44b8 <_Z13updateDisplayiii6Stringi+0xf0>)
   d449c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   d44a0:	ee17 1a90 	vmov	r1, s15
   d44a4:	f000 fa5e 	bl	d4964 <_ZN9SeeedOLED9putNumberEl>
    SeeedOled.putString(" pcs/L");
  }
   d44a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    SeeedOled.putString(" pcs/L");
   d44ac:	490c      	ldr	r1, [pc, #48]	; (d44e0 <_Z13updateDisplayiii6Stringi+0x118>)
   d44ae:	4802      	ldr	r0, [pc, #8]	; (d44b8 <_Z13updateDisplayiii6Stringi+0xf0>)
   d44b0:	f000 ba4b 	b.w	d494a <_ZN9SeeedOLED9putStringEPKc>
   d44b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d44b8:	2003e640 	.word	0x2003e640
   d44bc:	000d8f48 	.word	0x000d8f48
   d44c0:	000d8f55 	.word	0x000d8f55
   d44c4:	000d8f5c 	.word	0x000d8f5c
   d44c8:	000d8f5e 	.word	0x000d8f5e
   d44cc:	000d8f2e 	.word	0x000d8f2e
   d44d0:	000d8f69 	.word	0x000d8f69
   d44d4:	2003e50c 	.word	0x2003e50c
   d44d8:	000d8f71 	.word	0x000d8f71
   d44dc:	000d8f76 	.word	0x000d8f76
   d44e0:	000d8f41 	.word	0x000d8f41

000d44e4 <loop>:
{
   d44e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d44e8:	ed2d 8b02 	vpush	{d8}
  duration = pulseIn(DUST_SENSOR_PIN, LOW);
   d44ec:	2100      	movs	r1, #0
{
   d44ee:	b09e      	sub	sp, #120	; 0x78
  duration = pulseIn(DUST_SENSOR_PIN, LOW);
   d44f0:	2004      	movs	r0, #4
   d44f2:	f002 fb1b 	bl	d6b2c <pulseIn>
  lowpulseoccupancy = lowpulseoccupancy + duration;
   d44f6:	4d6f      	ldr	r5, [pc, #444]	; (d46b4 <loop+0x1d0>)
  duration = pulseIn(DUST_SENSOR_PIN, LOW);
   d44f8:	4b6f      	ldr	r3, [pc, #444]	; (d46b8 <loop+0x1d4>)
  if ((millis() - lastInterval) > SENSOR_READING_INTERVAL)
   d44fa:	4e70      	ldr	r6, [pc, #448]	; (d46bc <loop+0x1d8>)
  duration = pulseIn(DUST_SENSOR_PIN, LOW);
   d44fc:	6018      	str	r0, [r3, #0]
  lowpulseoccupancy = lowpulseoccupancy + duration;
   d44fe:	682b      	ldr	r3, [r5, #0]
   d4500:	4418      	add	r0, r3
   d4502:	6028      	str	r0, [r5, #0]
   d4504:	f001 f832 	bl	d556c <HAL_Timer_Get_Milli_Seconds>
  if ((millis() - lastInterval) > SENSOR_READING_INTERVAL)
   d4508:	6833      	ldr	r3, [r6, #0]
   d450a:	1ac0      	subs	r0, r0, r3
   d450c:	4b6c      	ldr	r3, [pc, #432]	; (d46c0 <loop+0x1dc>)
   d450e:	4298      	cmp	r0, r3
   d4510:	f240 80cb 	bls.w	d46aa <loop+0x1c6>
    String quality = getAirQuality();
   d4514:	a816      	add	r0, sp, #88	; 0x58
   d4516:	f7ff fe51 	bl	d41bc <_Z13getAirQualityv>
    int qual_int = getAirQualityNum();
   d451a:	f7ff fe49 	bl	d41b0 <_Z16getAirQualityNumv>
   d451e:	4604      	mov	r4, r0
    Serial.printlnf("Air Quality: %s", quality.c_str());
   d4520:	f001 fbd8 	bl	d5cd4 <_Z16_fetch_usbserialv>
   d4524:	9a16      	ldr	r2, [sp, #88]	; 0x58
   d4526:	4967      	ldr	r1, [pc, #412]	; (d46c4 <loop+0x1e0>)
    field3 = humidity;
   d4528:	f8df a1d8 	ldr.w	sl, [pc, #472]	; d4704 <loop+0x220>
    Serial.printlnf("Air Quality: %s", quality.c_str());
   d452c:	f7ff fdc1 	bl	d40b2 <_ZN5Print8printlnfEPKcz>
    getBMEValues(temp, pressure, humidity);
   d4530:	aa15      	add	r2, sp, #84	; 0x54
   d4532:	a914      	add	r1, sp, #80	; 0x50
   d4534:	a813      	add	r0, sp, #76	; 0x4c
   d4536:	f7ff fe7b 	bl	d4230 <_Z12getBMEValuesRiS_S_>
    Serial.printlnf("Temp: %d", temp);
   d453a:	f001 fbcb 	bl	d5cd4 <_Z16_fetch_usbserialv>
   d453e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   d4540:	4961      	ldr	r1, [pc, #388]	; (d46c8 <loop+0x1e4>)
   d4542:	f7ff fdb6 	bl	d40b2 <_ZN5Print8printlnfEPKcz>
    Serial.printlnf("Pressure: %d", pressure);
   d4546:	f001 fbc5 	bl	d5cd4 <_Z16_fetch_usbserialv>
   d454a:	9a14      	ldr	r2, [sp, #80]	; 0x50
   d454c:	495f      	ldr	r1, [pc, #380]	; (d46cc <loop+0x1e8>)
   d454e:	f7ff fdb0 	bl	d40b2 <_ZN5Print8printlnfEPKcz>
    Serial.printlnf("Humidity: %d", humidity);
   d4552:	f001 fbbf 	bl	d5cd4 <_Z16_fetch_usbserialv>
   d4556:	9a15      	ldr	r2, [sp, #84]	; 0x54
   d4558:	495d      	ldr	r1, [pc, #372]	; (d46d0 <loop+0x1ec>)
   d455a:	f7ff fdaa 	bl	d40b2 <_ZN5Print8printlnfEPKcz>
    getDustSensorReadings();
   d455e:	f7ff fe8b 	bl	d4278 <_Z21getDustSensorReadingsv>
    updateDisplay(temp, humidity, pressure, quality, qual_int);
   d4562:	e9dd 2814 	ldrd	r2, r8, [sp, #80]	; 0x50
   d4566:	9f13      	ldr	r7, [sp, #76]	; 0x4c
   d4568:	9211      	str	r2, [sp, #68]	; 0x44
   d456a:	a916      	add	r1, sp, #88	; 0x58
   d456c:	a81a      	add	r0, sp, #104	; 0x68
   d456e:	f002 f8d5 	bl	d671c <_ZN6StringC1ERKS_>
   d4572:	9a11      	ldr	r2, [sp, #68]	; 0x44
   d4574:	9400      	str	r4, [sp, #0]
   d4576:	ab1a      	add	r3, sp, #104	; 0x68
   d4578:	4641      	mov	r1, r8
   d457a:	4638      	mov	r0, r7
   d457c:	f7ff ff24 	bl	d43c8 <_Z13updateDisplayiii6Stringi>
   d4580:	a81a      	add	r0, sp, #104	; 0x68
   d4582:	f002 f85d 	bl	d6640 <_ZN6StringD1Ev>
    field1 = temp;
   d4586:	eddd 7a13 	vldr	s15, [sp, #76]	; 0x4c
   d458a:	4c52      	ldr	r4, [pc, #328]	; (d46d4 <loop+0x1f0>)
    field2 = pressure;
   d458c:	4f52      	ldr	r7, [pc, #328]	; (d46d8 <loop+0x1f4>)
    field4 = aqSensor.slope();
   d458e:	4853      	ldr	r0, [pc, #332]	; (d46dc <loop+0x1f8>)
   d4590:	f8df 8174 	ldr.w	r8, [pc, #372]	; d4708 <loop+0x224>
    field1 = temp;
   d4594:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d4598:	46c1      	mov	r9, r8
   d459a:	edc4 7a00 	vstr	s15, [r4]
    field2 = pressure;
   d459e:	eddd 7a14 	vldr	s15, [sp, #80]	; 0x50
   d45a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d45a6:	edc7 7a00 	vstr	s15, [r7]
    field3 = humidity;
   d45aa:	eddd 7a15 	vldr	s15, [sp, #84]	; 0x54
   d45ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d45b2:	edca 7a00 	vstr	s15, [sl]
    field4 = aqSensor.slope();
   d45b6:	f000 f8fb 	bl	d47b0 <_ZN16AirQualitySensor5slopeEv>
   d45ba:	ee07 0a90 	vmov	s15, r0
   d45be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    field5 = aqSensor.getValue();
   d45c2:	4846      	ldr	r0, [pc, #280]	; (d46dc <loop+0x1f8>)
    field4 = aqSensor.slope();
   d45c4:	edc8 7a00 	vstr	s15, [r8]
    field5 = aqSensor.getValue();
   d45c8:	f000 f8d8 	bl	d477c <_ZN16AirQualitySensor8getValueEv>
   d45cc:	ee07 0a90 	vmov	s15, r0
   d45d0:	4b43      	ldr	r3, [pc, #268]	; (d46e0 <loop+0x1fc>)
   d45d2:	f8df 8138 	ldr.w	r8, [pc, #312]	; d470c <loop+0x228>
   d45d6:	4a43      	ldr	r2, [pc, #268]	; (d46e4 <loop+0x200>)
   d45d8:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
   d45dc:	ed83 8a00 	vstr	s16, [r3]
      if (lowpulseoccupancy > 0)
   d45e0:	682b      	ldr	r3, [r5, #0]
   d45e2:	b143      	cbz	r3, d45f6 <loop+0x112>
    field6 = lowpulseoccupancy;
   d45e4:	ee07 3a90 	vmov	s15, r3
    field7 = ratio;
   d45e8:	4b3f      	ldr	r3, [pc, #252]	; (d46e8 <loop+0x204>)
    field6 = lowpulseoccupancy;
   d45ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
    field7 = ratio;
   d45ee:	681b      	ldr	r3, [r3, #0]
    field6 = lowpulseoccupancy;
   d45f0:	edc8 7a00 	vstr	s15, [r8]
    field7 = ratio;
   d45f4:	6013      	str	r3, [r2, #0]
    lowpulseoccupancy = 0;
   d45f6:	2300      	movs	r3, #0
   d45f8:	602b      	str	r3, [r5, #0]
    snprintf(msg, sizeof(msg),"{\"1\":\"%.2f\", \"2\":\"%.1f\", \"3\":\"%.2f\", \"4\":\"%.2f\", \"5\":\"%.3f\", \"6\":\"%.2f\", \"7\":\"%.1f\", \"k\":\"%s\"}", field1, field2, field3, field4, field5, field6, field7, MySiteID);
   d45fa:	4b3c      	ldr	r3, [pc, #240]	; (d46ec <loop+0x208>)
   d45fc:	681b      	ldr	r3, [r3, #0]
   d45fe:	930e      	str	r3, [sp, #56]	; 0x38
   d4600:	6810      	ldr	r0, [r2, #0]
   d4602:	f003 fda3 	bl	d814c <__aeabi_f2d>
   d4606:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   d460a:	f8d8 0000 	ldr.w	r0, [r8]
   d460e:	f003 fd9d 	bl	d814c <__aeabi_f2d>
   d4612:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   d4616:	ee18 0a10 	vmov	r0, s16
   d461a:	f003 fd97 	bl	d814c <__aeabi_f2d>
   d461e:	e9cd 0108 	strd	r0, r1, [sp, #32]
   d4622:	f8d9 0000 	ldr.w	r0, [r9]
   d4626:	f003 fd91 	bl	d814c <__aeabi_f2d>
   d462a:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d462e:	f8da 0000 	ldr.w	r0, [sl]
   d4632:	f003 fd8b 	bl	d814c <__aeabi_f2d>
   d4636:	e9cd 0104 	strd	r0, r1, [sp, #16]
   d463a:	6838      	ldr	r0, [r7, #0]
   d463c:	f003 fd86 	bl	d814c <__aeabi_f2d>
   d4640:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d4644:	6820      	ldr	r0, [r4, #0]
   d4646:	f003 fd81 	bl	d814c <__aeabi_f2d>
   d464a:	4a29      	ldr	r2, [pc, #164]	; (d46f0 <loop+0x20c>)
   d464c:	e9cd 0100 	strd	r0, r1, [sp]
   d4650:	f44f 7180 	mov.w	r1, #256	; 0x100
   d4654:	4827      	ldr	r0, [pc, #156]	; (d46f4 <loop+0x210>)
   d4656:	f001 f895 	bl	d5784 <snprintf>
        val_(val) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT> particle::Flags<TagT, ValueT>::operator|(Flags<TagT, ValueT> flags) const {
    return Flags<TagT, ValueT>(val_ | flags.val_);
   d465a:	4b27      	ldr	r3, [pc, #156]	; (d46f8 <loop+0x214>)
   d465c:	4a27      	ldr	r2, [pc, #156]	; (d46fc <loop+0x218>)
   d465e:	781b      	ldrb	r3, [r3, #0]
   d4660:	7812      	ldrb	r2, [r2, #0]
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4662:	4927      	ldr	r1, [pc, #156]	; (d4700 <loop+0x21c>)
   d4664:	4313      	orrs	r3, r2
   d4666:	f88d 3000 	strb.w	r3, [sp]
   d466a:	4a22      	ldr	r2, [pc, #136]	; (d46f4 <loop+0x210>)
   d466c:	6809      	ldr	r1, [r1, #0]
   d466e:	233c      	movs	r3, #60	; 0x3c
   d4670:	a81a      	add	r0, sp, #104	; 0x68
   d4672:	f001 fd03 	bl	d607c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d4676:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
   d4678:	b17c      	cbz	r4, d469a <loop+0x1b6>
      if (--_M_use_count == 0)
   d467a:	6863      	ldr	r3, [r4, #4]
   d467c:	3b01      	subs	r3, #1
   d467e:	6063      	str	r3, [r4, #4]
   d4680:	b95b      	cbnz	r3, d469a <loop+0x1b6>
          _M_dispose();
   d4682:	6823      	ldr	r3, [r4, #0]
   d4684:	4620      	mov	r0, r4
   d4686:	689b      	ldr	r3, [r3, #8]
   d4688:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d468a:	68a3      	ldr	r3, [r4, #8]
   d468c:	3b01      	subs	r3, #1
   d468e:	60a3      	str	r3, [r4, #8]
   d4690:	b91b      	cbnz	r3, d469a <loop+0x1b6>
            _M_destroy();
   d4692:	6823      	ldr	r3, [r4, #0]
   d4694:	4620      	mov	r0, r4
   d4696:	68db      	ldr	r3, [r3, #12]
   d4698:	4798      	blx	r3
    lowpulseoccupancy = 0;
   d469a:	2300      	movs	r3, #0
   d469c:	602b      	str	r3, [r5, #0]
   d469e:	f000 ff65 	bl	d556c <HAL_Timer_Get_Milli_Seconds>
    lastInterval = millis();
   d46a2:	6030      	str	r0, [r6, #0]
    String quality = getAirQuality();
   d46a4:	a816      	add	r0, sp, #88	; 0x58
   d46a6:	f001 ffcb 	bl	d6640 <_ZN6StringD1Ev>
}
   d46aa:	b01e      	add	sp, #120	; 0x78
   d46ac:	ecbd 8b02 	vpop	{d8}
   d46b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d46b4:	2003e538 	.word	0x2003e538
   d46b8:	2003e510 	.word	0x2003e510
   d46bc:	2003e530 	.word	0x2003e530
   d46c0:	000dbba0 	.word	0x000dbba0
   d46c4:	000d8f7d 	.word	0x000d8f7d
   d46c8:	000d8f8d 	.word	0x000d8f8d
   d46cc:	000d8f96 	.word	0x000d8f96
   d46d0:	000d8fa3 	.word	0x000d8fa3
   d46d4:	2003e514 	.word	0x2003e514
   d46d8:	2003e518 	.word	0x2003e518
   d46dc:	2003e4ac 	.word	0x2003e4ac
   d46e0:	2003e524 	.word	0x2003e524
   d46e4:	2003e52c 	.word	0x2003e52c
   d46e8:	2003e63c 	.word	0x2003e63c
   d46ec:	2003e430 	.word	0x2003e430
   d46f0:	000d8fb0 	.word	0x000d8fb0
   d46f4:	2003e53c 	.word	0x2003e53c
   d46f8:	2003e4a8 	.word	0x2003e4a8
   d46fc:	2003e4a9 	.word	0x2003e4a9
   d4700:	2003e434 	.word	0x2003e434
   d4704:	2003e51c 	.word	0x2003e51c
   d4708:	2003e520 	.word	0x2003e520
   d470c:	2003e528 	.word	0x2003e528

000d4710 <_GLOBAL__sub_I_aqSensor>:
   d4710:	b508      	push	{r3, lr}
        val_(val) {
   d4712:	4b09      	ldr	r3, [pc, #36]	; (d4738 <_GLOBAL__sub_I_aqSensor+0x28>)
   d4714:	2001      	movs	r0, #1
   d4716:	7018      	strb	r0, [r3, #0]
   d4718:	4b08      	ldr	r3, [pc, #32]	; (d473c <_GLOBAL__sub_I_aqSensor+0x2c>)
   d471a:	2202      	movs	r2, #2
   d471c:	701a      	strb	r2, [r3, #0]
SYSTEM_THREAD(ENABLED);
   d471e:	2100      	movs	r1, #0
   d4720:	f000 ffec 	bl	d56fc <system_thread_set_state>
AirQualitySensor aqSensor(AQS_PIN);
   d4724:	4806      	ldr	r0, [pc, #24]	; (d4740 <_GLOBAL__sub_I_aqSensor+0x30>)
   d4726:	2111      	movs	r1, #17
   d4728:	f000 f80e 	bl	d4748 <_ZN16AirQualitySensorC1Ei>
   d472c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
Adafruit_BME280 bme;
   d4730:	4804      	ldr	r0, [pc, #16]	; (d4744 <_GLOBAL__sub_I_aqSensor+0x34>)
   d4732:	f000 b991 	b.w	d4a58 <_ZN15Adafruit_BME280C1Ev>
   d4736:	bf00      	nop
   d4738:	2003e4a9 	.word	0x2003e4a9
   d473c:	2003e4a8 	.word	0x2003e4a8
   d4740:	2003e4ac 	.word	0x2003e4ac
   d4744:	2003e4c8 	.word	0x2003e4c8

000d4748 <_ZN16AirQualitySensorC1Ei>:
const int AirQualitySensor::HIGH_POLLUTION = 1;
const int AirQualitySensor::LOW_POLLUTION  = 2;
const int AirQualitySensor::FRESH_AIR      = 3;

AirQualitySensor::AirQualitySensor(int pin) 
: _pin(pin), _voltageSum(0), _volSumCount(0) {
   d4748:	2200      	movs	r2, #0
   d474a:	e9c0 2204 	strd	r2, r2, [r0, #16]
   d474e:	6001      	str	r1, [r0, #0]
    // do nothing
}
   d4750:	4770      	bx	lr

000d4752 <_ZN16AirQualitySensor4initEv>:

bool AirQualitySensor::init(void) {
   d4752:	b510      	push	{r4, lr}
   d4754:	4604      	mov	r4, r0
    int initVoltage = analogRead(_pin);
   d4756:	8800      	ldrh	r0, [r0, #0]
   d4758:	f002 f9d1 	bl	d6afe <analogRead>

    if (10 < initVoltage && initVoltage < 798) {
   d475c:	f240 3312 	movw	r3, #786	; 0x312
   d4760:	f1a0 020b 	sub.w	r2, r0, #11
   d4764:	429a      	cmp	r2, r3
   d4766:	d807      	bhi.n	d4778 <_ZN16AirQualitySensor4initEv+0x26>
        _currentVoltage = initVoltage;
        _lastVoltage = _currentVoltage;
   d4768:	e9c4 0001 	strd	r0, r0, [r4, #4]

        _standardVoltage = initVoltage;
   d476c:	60e0      	str	r0, [r4, #12]
   d476e:	f000 fefd 	bl	d556c <HAL_Timer_Get_Milli_Seconds>
        _lastStdVolUpdated = millis();
   d4772:	61a0      	str	r0, [r4, #24]

        return true;
   d4774:	2001      	movs	r0, #1
    }
    else {
        return false;
    }
}
   d4776:	bd10      	pop	{r4, pc}
        return false;
   d4778:	2000      	movs	r0, #0
   d477a:	e7fc      	b.n	d4776 <_ZN16AirQualitySensor4initEv+0x24>

000d477c <_ZN16AirQualitySensor8getValueEv>:
    return -1;
}

int AirQualitySensor::getValue(void) {
    return _currentVoltage;
}
   d477c:	6880      	ldr	r0, [r0, #8]
   d477e:	4770      	bx	lr

000d4780 <_ZN16AirQualitySensor21updateStandardVoltageEv>:

void AirQualitySensor::updateStandardVoltage(void) {
   d4780:	b510      	push	{r4, lr}
   d4782:	4604      	mov	r4, r0
   d4784:	f000 fef2 	bl	d556c <HAL_Timer_Get_Milli_Seconds>
    if (millis() - _lastStdVolUpdated > 500000) {
   d4788:	69a3      	ldr	r3, [r4, #24]
   d478a:	1ac0      	subs	r0, r0, r3
   d478c:	4b07      	ldr	r3, [pc, #28]	; (d47ac <_ZN16AirQualitySensor21updateStandardVoltageEv+0x2c>)
   d478e:	4298      	cmp	r0, r3
   d4790:	d90a      	bls.n	d47a8 <_ZN16AirQualitySensor21updateStandardVoltageEv+0x28>
        _standardVoltage = _voltageSum / _volSumCount;
   d4792:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   d4796:	fb93 f3f2 	sdiv	r3, r3, r2
   d479a:	60e3      	str	r3, [r4, #12]
   d479c:	f000 fee6 	bl	d556c <HAL_Timer_Get_Milli_Seconds>
        _lastStdVolUpdated = millis();

        _voltageSum = 0;
   d47a0:	2300      	movs	r3, #0
        _volSumCount = 0;
   d47a2:	e9c4 3304 	strd	r3, r3, [r4, #16]
        _lastStdVolUpdated = millis();
   d47a6:	61a0      	str	r0, [r4, #24]
    }
}
   d47a8:	bd10      	pop	{r4, pc}
   d47aa:	bf00      	nop
   d47ac:	0007a120 	.word	0x0007a120

000d47b0 <_ZN16AirQualitySensor5slopeEv>:
int AirQualitySensor::slope(void) {
   d47b0:	b510      	push	{r4, lr}
    _lastVoltage = _currentVoltage;
   d47b2:	6883      	ldr	r3, [r0, #8]
   d47b4:	6043      	str	r3, [r0, #4]
int AirQualitySensor::slope(void) {
   d47b6:	4604      	mov	r4, r0
    _currentVoltage = analogRead(_pin);
   d47b8:	8800      	ldrh	r0, [r0, #0]
   d47ba:	f002 f9a0 	bl	d6afe <analogRead>
    _voltageSum += _currentVoltage;
   d47be:	6923      	ldr	r3, [r4, #16]
    _currentVoltage = analogRead(_pin);
   d47c0:	60a0      	str	r0, [r4, #8]
    _voltageSum += _currentVoltage;
   d47c2:	4418      	add	r0, r3
    _volSumCount += 1;
   d47c4:	6963      	ldr	r3, [r4, #20]
    _voltageSum += _currentVoltage;
   d47c6:	6120      	str	r0, [r4, #16]
    _volSumCount += 1;
   d47c8:	3301      	adds	r3, #1
   d47ca:	6163      	str	r3, [r4, #20]
    updateStandardVoltage();
   d47cc:	4620      	mov	r0, r4
   d47ce:	f7ff ffd7 	bl	d4780 <_ZN16AirQualitySensor21updateStandardVoltageEv>
    if (_currentVoltage - _lastVoltage > 400 || _currentVoltage > 700) {
   d47d2:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   d47d6:	1a51      	subs	r1, r2, r1
   d47d8:	f5b1 7fc8 	cmp.w	r1, #400	; 0x190
   d47dc:	dc10      	bgt.n	d4800 <_ZN16AirQualitySensor5slopeEv+0x50>
   d47de:	f5b2 7f2f 	cmp.w	r2, #700	; 0x2bc
   d47e2:	dc0d      	bgt.n	d4800 <_ZN16AirQualitySensor5slopeEv+0x50>
             || _currentVoltage - _standardVoltage > 150) {
   d47e4:	68e3      	ldr	r3, [r4, #12]
   d47e6:	1ad3      	subs	r3, r2, r3
   d47e8:	2b96      	cmp	r3, #150	; 0x96
   d47ea:	dc0b      	bgt.n	d4804 <_ZN16AirQualitySensor5slopeEv+0x54>
    else if ((_currentVoltage - _lastVoltage > 200 && _currentVoltage < 700)
   d47ec:	29c8      	cmp	r1, #200	; 0xc8
   d47ee:	dd02      	ble.n	d47f6 <_ZN16AirQualitySensor5slopeEv+0x46>
   d47f0:	f5b2 7f2f 	cmp.w	r2, #700	; 0x2bc
   d47f4:	d108      	bne.n	d4808 <_ZN16AirQualitySensor5slopeEv+0x58>
        return AirQualitySensor::FRESH_AIR;
   d47f6:	2b32      	cmp	r3, #50	; 0x32
   d47f8:	bfcc      	ite	gt
   d47fa:	2002      	movgt	r0, #2
   d47fc:	2003      	movle	r0, #3
}
   d47fe:	bd10      	pop	{r4, pc}
        return AirQualitySensor::FORCE_SIGNAL;
   d4800:	2000      	movs	r0, #0
   d4802:	e7fc      	b.n	d47fe <_ZN16AirQualitySensor5slopeEv+0x4e>
        return AirQualitySensor::HIGH_POLLUTION;
   d4804:	2001      	movs	r0, #1
   d4806:	e7fa      	b.n	d47fe <_ZN16AirQualitySensor5slopeEv+0x4e>
        return AirQualitySensor::LOW_POLLUTION;
   d4808:	2002      	movs	r0, #2
   d480a:	e7f8      	b.n	d47fe <_ZN16AirQualitySensor5slopeEv+0x4e>

000d480c <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d480c:	6803      	ldr	r3, [r0, #0]
   d480e:	b2c9      	uxtb	r1, r1
   d4810:	689b      	ldr	r3, [r3, #8]
   d4812:	4718      	bx	r3

000d4814 <_ZN9SeeedOLED11sendCommandEh.constprop.0>:
  sendCommand(SeeedOLED_Display_On_Cmd); //display on
  delay(5);
  sendCommand(SeeedOLED_Normal_Display_Cmd); //Set Normal Display (default)
}

void SeeedOLED::sendCommand(unsigned char command)
   d4814:	b510      	push	{r4, lr}
   d4816:	4604      	mov	r4, r0
{
  Wire.beginTransmission(SeeedOLED_Address); // begin I2C communication
   d4818:	f002 f8ce 	bl	d69b8 <_Z19__fetch_global_Wirev>
   d481c:	213c      	movs	r1, #60	; 0x3c
   d481e:	f001 f943 	bl	d5aa8 <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(SeeedOLED_Command_Mode);        // Set OLED Command mode
   d4822:	f002 f8c9 	bl	d69b8 <_Z19__fetch_global_Wirev>
   d4826:	2180      	movs	r1, #128	; 0x80
   d4828:	f7ff fff0 	bl	d480c <_ZN7TwoWire5writeEi>
  Wire.write(command);
   d482c:	f002 f8c4 	bl	d69b8 <_Z19__fetch_global_Wirev>
   d4830:	6803      	ldr	r3, [r0, #0]
   d4832:	4621      	mov	r1, r4
   d4834:	689b      	ldr	r3, [r3, #8]
   d4836:	4798      	blx	r3
  Wire.endTransmission(); // End I2C communication
   d4838:	f002 f8be 	bl	d69b8 <_Z19__fetch_global_Wirev>
}
   d483c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  Wire.endTransmission(); // End I2C communication
   d4840:	f001 b939 	b.w	d5ab6 <_ZN7TwoWire15endTransmissionEv>

000d4844 <_ZN9SeeedOLED4initEv>:
{
   d4844:	b508      	push	{r3, lr}
  sendCommand(SeeedOLED_Display_Off_Cmd); //display off
   d4846:	20ae      	movs	r0, #174	; 0xae
   d4848:	f7ff ffe4 	bl	d4814 <_ZN9SeeedOLED11sendCommandEh.constprop.0>
  delay(5);
   d484c:	2005      	movs	r0, #5
   d484e:	f001 fe31 	bl	d64b4 <delay>
  sendCommand(SeeedOLED_Display_On_Cmd); //display on
   d4852:	20af      	movs	r0, #175	; 0xaf
   d4854:	f7ff ffde 	bl	d4814 <_ZN9SeeedOLED11sendCommandEh.constprop.0>
  delay(5);
   d4858:	2005      	movs	r0, #5
   d485a:	f001 fe2b 	bl	d64b4 <delay>
}
   d485e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sendCommand(SeeedOLED_Normal_Display_Cmd); //Set Normal Display (default)
   d4862:	20a6      	movs	r0, #166	; 0xa6
   d4864:	f7ff bfd6 	b.w	d4814 <_ZN9SeeedOLED11sendCommandEh.constprop.0>

000d4868 <_ZN9SeeedOLED11setPageModeEv>:
  sendCommand(0x20); //set addressing mode
  sendCommand(0x00); //set horizontal addressing mode
}

void SeeedOLED::setPageMode()
{
   d4868:	b508      	push	{r3, lr}
  addressingMode = PAGE_MODE;
   d486a:	2301      	movs	r3, #1
   d486c:	7003      	strb	r3, [r0, #0]
  sendCommand(0x20); //set addressing mode
   d486e:	2020      	movs	r0, #32
   d4870:	f7ff ffd0 	bl	d4814 <_ZN9SeeedOLED11sendCommandEh.constprop.0>
  sendCommand(0x02); //set page addressing mode
}
   d4874:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sendCommand(0x02); //set page addressing mode
   d4878:	2002      	movs	r0, #2
   d487a:	f7ff bfcb 	b.w	d4814 <_ZN9SeeedOLED11sendCommandEh.constprop.0>

000d487e <_ZN9SeeedOLED9setTextXYEhh>:

void SeeedOLED::setTextXY(unsigned char Row, unsigned char Column)
{
   d487e:	b510      	push	{r4, lr}
  sendCommand(0xB0 + Row);                        //set page address
   d4880:	3950      	subs	r1, #80	; 0x50
{
   d4882:	4614      	mov	r4, r2
  sendCommand(0xB0 + Row);                        //set page address
   d4884:	b2c8      	uxtb	r0, r1
   d4886:	f7ff ffc5 	bl	d4814 <_ZN9SeeedOLED11sendCommandEh.constprop.0>
  sendCommand(0x00 + (8 * Column & 0x0F));        //set column lower address
   d488a:	00e0      	lsls	r0, r4, #3
   d488c:	f000 0008 	and.w	r0, r0, #8
   d4890:	f7ff ffc0 	bl	d4814 <_ZN9SeeedOLED11sendCommandEh.constprop.0>
  sendCommand(0x10 + ((8 * Column >> 4) & 0x0F)); //set column higher address
   d4894:	f3c4 0043 	ubfx	r0, r4, #1, #4
   d4898:	3010      	adds	r0, #16
}
   d489a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  sendCommand(0x10 + ((8 * Column >> 4) & 0x0F)); //set column higher address
   d489e:	f7ff bfb9 	b.w	d4814 <_ZN9SeeedOLED11sendCommandEh.constprop.0>

000d48a2 <_ZN9SeeedOLED8sendDataEh>:
  sendCommand(SeeedOLED_Display_On_Cmd); //display on
  setTextXY(0, 0);
}

void SeeedOLED::sendData(unsigned char Data)
{
   d48a2:	b510      	push	{r4, lr}
   d48a4:	460c      	mov	r4, r1
  Wire.beginTransmission(SeeedOLED_Address); // begin I2C transmission
   d48a6:	f002 f887 	bl	d69b8 <_Z19__fetch_global_Wirev>
   d48aa:	213c      	movs	r1, #60	; 0x3c
   d48ac:	f001 f8fc 	bl	d5aa8 <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(SeeedOLED_Data_Mode);           // data mode
   d48b0:	f002 f882 	bl	d69b8 <_Z19__fetch_global_Wirev>
   d48b4:	2140      	movs	r1, #64	; 0x40
   d48b6:	f7ff ffa9 	bl	d480c <_ZN7TwoWire5writeEi>
  Wire.write(Data);
   d48ba:	f002 f87d 	bl	d69b8 <_Z19__fetch_global_Wirev>
   d48be:	6803      	ldr	r3, [r0, #0]
   d48c0:	4621      	mov	r1, r4
   d48c2:	689b      	ldr	r3, [r3, #8]
   d48c4:	4798      	blx	r3
  Wire.endTransmission(); // stop I2C transmission
   d48c6:	f002 f877 	bl	d69b8 <_Z19__fetch_global_Wirev>
}
   d48ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  Wire.endTransmission(); // stop I2C transmission
   d48ce:	f001 b8f2 	b.w	d5ab6 <_ZN7TwoWire15endTransmissionEv>
	...

000d48d4 <_ZN9SeeedOLED7putCharEh>:

void SeeedOLED::putChar(unsigned char C)
{
  if (C < 32 || C > 127) //Ignore non-printable ASCII characters. This can be modified for multilingual font.
   d48d4:	f1a1 0320 	sub.w	r3, r1, #32
  {
    C = ' '; //Space
   d48d8:	2b5f      	cmp	r3, #95	; 0x5f
   d48da:	bf88      	it	hi
   d48dc:	2120      	movhi	r1, #32
{
   d48de:	b570      	push	{r4, r5, r6, lr}
   d48e0:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
   d48e4:	4d07      	ldr	r5, [pc, #28]	; (d4904 <_ZN9SeeedOLED7putCharEh+0x30>)
   d48e6:	3920      	subs	r1, #32
   d48e8:	4606      	mov	r6, r0
  }
  unsigned char i = 0;
  for (i = 0; i < 8; i++)
   d48ea:	eb05 05c1 	add.w	r5, r5, r1, lsl #3
    C = ' '; //Space
   d48ee:	2408      	movs	r4, #8
  {
    //read bytes from code memory
    sendData(pgm_read_byte(&BasicFont[C - 32][i])); //font array starts at 0, ASCII starts at 32. Hence the translation
   d48f0:	f815 1b01 	ldrb.w	r1, [r5], #1
   d48f4:	4630      	mov	r0, r6
   d48f6:	3c01      	subs	r4, #1
   d48f8:	f7ff ffd3 	bl	d48a2 <_ZN9SeeedOLED8sendDataEh>
  for (i = 0; i < 8; i++)
   d48fc:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   d4900:	d1f6      	bne.n	d48f0 <_ZN9SeeedOLED7putCharEh+0x1c>
  }
}
   d4902:	bd70      	pop	{r4, r5, r6, pc}
   d4904:	000d9038 	.word	0x000d9038

000d4908 <_ZN9SeeedOLED12clearDisplayEv>:
{
   d4908:	b570      	push	{r4, r5, r6, lr}
   d490a:	4605      	mov	r5, r0
  sendCommand(SeeedOLED_Display_Off_Cmd); //display off
   d490c:	20ae      	movs	r0, #174	; 0xae
   d490e:	f7ff ff81 	bl	d4814 <_ZN9SeeedOLED11sendCommandEh.constprop.0>
   d4912:	2600      	movs	r6, #0
    setTextXY(j, 0);
   d4914:	2200      	movs	r2, #0
   d4916:	b2f1      	uxtb	r1, r6
   d4918:	4628      	mov	r0, r5
   d491a:	f7ff ffb0 	bl	d487e <_ZN9SeeedOLED9setTextXYEhh>
   d491e:	2410      	movs	r4, #16
        putChar(' ');
   d4920:	2120      	movs	r1, #32
   d4922:	4628      	mov	r0, r5
   d4924:	3c01      	subs	r4, #1
   d4926:	f7ff ffd5 	bl	d48d4 <_ZN9SeeedOLED7putCharEh>
      for (i = 0; i < 16; i++) //clear all columns
   d492a:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   d492e:	d1f7      	bne.n	d4920 <_ZN9SeeedOLED12clearDisplayEv+0x18>
  for (j = 0; j < 8; j++)
   d4930:	3601      	adds	r6, #1
   d4932:	2e08      	cmp	r6, #8
   d4934:	d1ee      	bne.n	d4914 <_ZN9SeeedOLED12clearDisplayEv+0xc>
  sendCommand(SeeedOLED_Display_On_Cmd); //display on
   d4936:	20af      	movs	r0, #175	; 0xaf
   d4938:	f7ff ff6c 	bl	d4814 <_ZN9SeeedOLED11sendCommandEh.constprop.0>
  setTextXY(0, 0);
   d493c:	4622      	mov	r2, r4
   d493e:	4621      	mov	r1, r4
   d4940:	4628      	mov	r0, r5
}
   d4942:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  setTextXY(0, 0);
   d4946:	f7ff bf9a 	b.w	d487e <_ZN9SeeedOLED9setTextXYEhh>

000d494a <_ZN9SeeedOLED9putStringEPKc>:

void SeeedOLED::putString(const char *String)
{
   d494a:	b570      	push	{r4, r5, r6, lr}
   d494c:	4606      	mov	r6, r0
   d494e:	460d      	mov	r5, r1
   d4950:	2400      	movs	r4, #0
  unsigned char i = 0;
  while (String[i])
   d4952:	b2e3      	uxtb	r3, r4
   d4954:	3401      	adds	r4, #1
   d4956:	5ce9      	ldrb	r1, [r5, r3]
   d4958:	b119      	cbz	r1, d4962 <_ZN9SeeedOLED9putStringEPKc+0x18>
  {
    putChar(String[i]);
   d495a:	4630      	mov	r0, r6
   d495c:	f7ff ffba 	bl	d48d4 <_ZN9SeeedOLED7putCharEh>
  while (String[i])
   d4960:	e7f7      	b.n	d4952 <_ZN9SeeedOLED9putStringEPKc+0x8>
    i++;
  }
}
   d4962:	bd70      	pop	{r4, r5, r6, pc}

000d4964 <_ZN9SeeedOLED9putNumberEl>:

unsigned char SeeedOLED::putNumber(long long_num)
{
   d4964:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4966:	b085      	sub	sp, #20
  unsigned char char_buffer[10] = "";
   d4968:	2300      	movs	r3, #0
  unsigned char i = 0;
  unsigned char f = 0;

  if (long_num < 0)
   d496a:	1e0c      	subs	r4, r1, #0
  unsigned char char_buffer[10] = "";
   d496c:	e9cd 3301 	strd	r3, r3, [sp, #4]
{
   d4970:	4606      	mov	r6, r0
  unsigned char char_buffer[10] = "";
   d4972:	f8ad 300c 	strh.w	r3, [sp, #12]
  if (long_num < 0)
   d4976:	da24      	bge.n	d49c2 <_ZN9SeeedOLED9putNumberEl+0x5e>
  {
    f = 1;
    putChar('-');
   d4978:	212d      	movs	r1, #45	; 0x2d
   d497a:	f7ff ffab 	bl	d48d4 <_ZN9SeeedOLED7putCharEh>
    long_num = -long_num;
   d497e:	4264      	negs	r4, r4
    f = 1;
   d4980:	2301      	movs	r3, #1
  unsigned char f = 0;
   d4982:	2500      	movs	r5, #0
    return f;
  }

  while (long_num > 0)
  {
    char_buffer[i++] = long_num % 10;
   d4984:	200a      	movs	r0, #10
   d4986:	462a      	mov	r2, r5
   d4988:	a904      	add	r1, sp, #16
   d498a:	440a      	add	r2, r1
   d498c:	3501      	adds	r5, #1
   d498e:	fbb4 f1f0 	udiv	r1, r4, r0
   d4992:	fb00 4411 	mls	r4, r0, r1, r4
   d4996:	f802 4c0c 	strb.w	r4, [r2, #-12]
   d499a:	b2ed      	uxtb	r5, r5
  while (long_num > 0)
   d499c:	460c      	mov	r4, r1
   d499e:	2900      	cmp	r1, #0
   d49a0:	d1f1      	bne.n	d4986 <_ZN9SeeedOLED9putNumberEl+0x22>
    long_num /= 10;
  }

  f = f + i;
   d49a2:	442b      	add	r3, r5
   d49a4:	b2dc      	uxtb	r4, r3
   d49a6:	ab04      	add	r3, sp, #16
   d49a8:	195f      	adds	r7, r3, r5
   d49aa:	3f0d      	subs	r7, #13
  for (; i > 0; i--)
   d49ac:	b175      	cbz	r5, d49cc <_ZN9SeeedOLED9putNumberEl+0x68>
  {
    putChar('0' + char_buffer[i - 1]);
   d49ae:	f817 1901 	ldrb.w	r1, [r7], #-1
   d49b2:	3130      	adds	r1, #48	; 0x30
   d49b4:	b2c9      	uxtb	r1, r1
   d49b6:	4630      	mov	r0, r6
  for (; i > 0; i--)
   d49b8:	3d01      	subs	r5, #1
    putChar('0' + char_buffer[i - 1]);
   d49ba:	f7ff ff8b 	bl	d48d4 <_ZN9SeeedOLED7putCharEh>
  for (; i > 0; i--)
   d49be:	b2ed      	uxtb	r5, r5
   d49c0:	e7f4      	b.n	d49ac <_ZN9SeeedOLED9putNumberEl+0x48>
  else if (long_num == 0)
   d49c2:	d1de      	bne.n	d4982 <_ZN9SeeedOLED9putNumberEl+0x1e>
    putChar('0');
   d49c4:	2130      	movs	r1, #48	; 0x30
   d49c6:	f7ff ff85 	bl	d48d4 <_ZN9SeeedOLED7putCharEh>
    return f;
   d49ca:	2401      	movs	r4, #1
  }
  return f;
}
   d49cc:	4620      	mov	r0, r4
   d49ce:	b005      	add	sp, #20
   d49d0:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d49d2 <_ZN9SeeedOLED16setNormalDisplayEv>:
  sendCommand(SeeedOLED_Dectivate_Scroll_Cmd);
}

void SeeedOLED::setNormalDisplay()
{
  sendCommand(SeeedOLED_Normal_Display_Cmd);
   d49d2:	20a6      	movs	r0, #166	; 0xa6
   d49d4:	f7ff bf1e 	b.w	d4814 <_ZN9SeeedOLED11sendCommandEh.constprop.0>

000d49d8 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   d49d8:	4770      	bx	lr

000d49da <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   d49da:	b510      	push	{r4, lr}
  }
   d49dc:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   d49de:	4604      	mov	r4, r0
  }
   d49e0:	f002 f8ab 	bl	d6b3a <_ZdlPvj>
   d49e4:	4620      	mov	r0, r4
   d49e6:	bd10      	pop	{r4, pc}

000d49e8 <_ZN5Print6printfEPKcz>:
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d49e8:	b40e      	push	{r1, r2, r3}
   d49ea:	b503      	push	{r0, r1, lr}
   d49ec:	ab03      	add	r3, sp, #12
        auto r = this->vprintf(false, format, args);
   d49ee:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d49f0:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   d49f4:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   d49f6:	f001 fdd6 	bl	d65a6 <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
   d49fa:	b002      	add	sp, #8
   d49fc:	f85d eb04 	ldr.w	lr, [sp], #4
   d4a00:	b003      	add	sp, #12
   d4a02:	4770      	bx	lr

000d4a04 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d4a04:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d4a06:	4604      	mov	r4, r0
   d4a08:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d4a0a:	7922      	ldrb	r2, [r4, #4]
   d4a0c:	68a3      	ldr	r3, [r4, #8]
   d4a0e:	b132      	cbz	r2, d4a1e <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   d4a10:	b9a3      	cbnz	r3, d4a3c <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   d4a12:	490b      	ldr	r1, [pc, #44]	; (d4a40 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   d4a14:	b002      	add	sp, #8
   d4a16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   d4a1a:	f001 bd89 	b.w	d6530 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d4a1e:	4a09      	ldr	r2, [pc, #36]	; (d4a44 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   d4a20:	7b26      	ldrb	r6, [r4, #12]
   d4a22:	4d09      	ldr	r5, [pc, #36]	; (d4a48 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   d4a24:	4909      	ldr	r1, [pc, #36]	; (d4a4c <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   d4a26:	7b64      	ldrb	r4, [r4, #13]
   d4a28:	2e01      	cmp	r6, #1
   d4a2a:	bf18      	it	ne
   d4a2c:	4629      	movne	r1, r5
   d4a2e:	e9cd 1400 	strd	r1, r4, [sp]
   d4a32:	4907      	ldr	r1, [pc, #28]	; (d4a50 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   d4a34:	f7ff ffd8 	bl	d49e8 <_ZN5Print6printfEPKcz>
  }
   d4a38:	b002      	add	sp, #8
   d4a3a:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d4a3c:	4a05      	ldr	r2, [pc, #20]	; (d4a54 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   d4a3e:	e7ef      	b.n	d4a20 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   d4a40:	000d9349 	.word	0x000d9349
   d4a44:	000d8f5b 	.word	0x000d8f5b
   d4a48:	000d9345 	.word	0x000d9345
   d4a4c:	000d9341 	.word	0x000d9341
   d4a50:	000d935f 	.word	0x000d935f
   d4a54:	000d9338 	.word	0x000d9338

000d4a58 <_ZN15Adafruit_BME280C1Ev>:
/*! 
    @brief  class constructor
*/
/**************************************************************************/
Adafruit_BME280::Adafruit_BME280()
    : _cs(-1), _mosi(-1), _miso(-1), _sck(-1)
   d4a58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d4a5c:	6103      	str	r3, [r0, #16]
{ }
   d4a5e:	4770      	bx	lr

000d4a60 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   d4a60:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   d4a62:	4c0b      	ldr	r4, [pc, #44]	; (d4a90 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   d4a64:	7821      	ldrb	r1, [r4, #0]
   d4a66:	f3bf 8f5b 	dmb	ish
   d4a6a:	f011 0101 	ands.w	r1, r1, #1
   d4a6e:	d10b      	bne.n	d4a88 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   d4a70:	4620      	mov	r0, r4
   d4a72:	9101      	str	r1, [sp, #4]
   d4a74:	f7ff fb15 	bl	d40a2 <__cxa_guard_acquire>
   d4a78:	9901      	ldr	r1, [sp, #4]
   d4a7a:	b128      	cbz	r0, d4a88 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   d4a7c:	4805      	ldr	r0, [pc, #20]	; (d4a94 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   d4a7e:	f001 fe9d 	bl	d67bc <_ZN8SPIClassC1E19hal_spi_interface_t>
   d4a82:	4620      	mov	r0, r4
   d4a84:	f7ff fb12 	bl	d40ac <__cxa_guard_release>
        return instance;
    }
   d4a88:	4802      	ldr	r0, [pc, #8]	; (d4a94 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   d4a8a:	b002      	add	sp, #8
   d4a8c:	bd10      	pop	{r4, pc}
   d4a8e:	bf00      	nop
   d4a90:	2003e644 	.word	0x2003e644
   d4a94:	2003e648 	.word	0x2003e648

000d4a98 <_ZN15Adafruit_BME2807spixferEh>:
    @brief  Encapsulate hardware and software SPI transfer into one function
    @param x the data byte to transfer
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   d4a98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    // hardware SPI
    if (_sck == -1)
   d4a9c:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d4aa0:	3301      	adds	r3, #1
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   d4aa2:	4605      	mov	r5, r0
   d4aa4:	460f      	mov	r7, r1
    if (_sck == -1)
   d4aa6:	d106      	bne.n	d4ab6 <_ZN15Adafruit_BME2807spixferEh+0x1e>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d4aa8:	f7ff ffda 	bl	d4a60 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d4aac:	4639      	mov	r1, r7
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
            reply |= 1;
        }
    return reply;
}
   d4aae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d4ab2:	f001 bf25 	b.w	d6900 <_ZN8SPIClass8transferEh>
    uint8_t reply = 0;
   d4ab6:	2400      	movs	r4, #0
    for (int i=7; i>=0; i--) {
   d4ab8:	2607      	movs	r6, #7
        digitalWrite(_mosi, x & (1<<i));
   d4aba:	f04f 0801 	mov.w	r8, #1
        digitalWrite(_sck, LOW);
   d4abe:	f995 0013 	ldrsb.w	r0, [r5, #19]
   d4ac2:	2100      	movs	r1, #0
   d4ac4:	b280      	uxth	r0, r0
   d4ac6:	f001 ffee 	bl	d6aa6 <digitalWrite>
        digitalWrite(_mosi, x & (1<<i));
   d4aca:	f995 0011 	ldrsb.w	r0, [r5, #17]
   d4ace:	fa08 f106 	lsl.w	r1, r8, r6
   d4ad2:	4039      	ands	r1, r7
   d4ad4:	b280      	uxth	r0, r0
   d4ad6:	f001 ffe6 	bl	d6aa6 <digitalWrite>
        digitalWrite(_sck, HIGH);
   d4ada:	f995 0013 	ldrsb.w	r0, [r5, #19]
   d4ade:	2101      	movs	r1, #1
   d4ae0:	b280      	uxth	r0, r0
   d4ae2:	f001 ffe0 	bl	d6aa6 <digitalWrite>
        if (digitalRead(_miso))
   d4ae6:	f995 0012 	ldrsb.w	r0, [r5, #18]
        reply <<= 1;
   d4aea:	0064      	lsls	r4, r4, #1
        if (digitalRead(_miso))
   d4aec:	b280      	uxth	r0, r0
        reply <<= 1;
   d4aee:	b2e4      	uxtb	r4, r4
        if (digitalRead(_miso))
   d4af0:	f001 fff2 	bl	d6ad8 <digitalRead>
   d4af4:	b108      	cbz	r0, d4afa <_ZN15Adafruit_BME2807spixferEh+0x62>
            reply |= 1;
   d4af6:	f044 0401 	orr.w	r4, r4, #1
    for (int i=7; i>=0; i--) {
   d4afa:	3e01      	subs	r6, #1
   d4afc:	d2df      	bcs.n	d4abe <_ZN15Adafruit_BME2807spixferEh+0x26>
}
   d4afe:	4620      	mov	r0, r4
   d4b00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d4b04 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>:
    void endTransaction() {
   d4b04:	b508      	push	{r3, lr}
        instance().endTransaction();
   d4b06:	f7ff ffab 	bl	d4a60 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    }
   d4b0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        instance().endTransaction();
   d4b0e:	f001 be70 	b.w	d67f2 <_ZN8SPIClass14endTransactionEv>

000d4b12 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0.constprop.0>:
    int32_t beginTransaction(const particle::SPISettings& settings) {
   d4b12:	b507      	push	{r0, r1, r2, lr}
   d4b14:	9001      	str	r0, [sp, #4]
        return instance().beginTransaction(settings);
   d4b16:	f7ff ffa3 	bl	d4a60 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d4b1a:	9901      	ldr	r1, [sp, #4]
    }
   d4b1c:	b003      	add	sp, #12
   d4b1e:	f85d eb04 	ldr.w	lr, [sp], #4
        return instance().beginTransaction(settings);
   d4b22:	f001 be7f 	b.w	d6824 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
	...

000d4b28 <_ZN15Adafruit_BME2806read24Eh>:
    @param reg the register address to read from
    @returns the 24 bit data value read from the device
*/
/**************************************************************************/
uint32_t Adafruit_BME280::read24(byte reg)
{
   d4b28:	b530      	push	{r4, r5, lr}
    uint32_t value;

    if (_cs == -1) {
   d4b2a:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d4b2e:	3301      	adds	r3, #1
{
   d4b30:	b085      	sub	sp, #20
   d4b32:	4604      	mov	r4, r0
   d4b34:	460d      	mov	r5, r1
    if (_cs == -1) {
   d4b36:	d123      	bne.n	d4b80 <_ZN15Adafruit_BME2806read24Eh+0x58>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d4b38:	7901      	ldrb	r1, [r0, #4]
   d4b3a:	6800      	ldr	r0, [r0, #0]
   d4b3c:	f000 ffb0 	bl	d5aa0 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d4b40:	6820      	ldr	r0, [r4, #0]
   d4b42:	6803      	ldr	r3, [r0, #0]
   d4b44:	4629      	mov	r1, r5
   d4b46:	689b      	ldr	r3, [r3, #8]
   d4b48:	4798      	blx	r3
        _wire -> endTransmission();
   d4b4a:	6820      	ldr	r0, [r4, #0]
   d4b4c:	f000 ffb3 	bl	d5ab6 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)3);
   d4b50:	7921      	ldrb	r1, [r4, #4]
   d4b52:	6820      	ldr	r0, [r4, #0]
   d4b54:	2203      	movs	r2, #3
   d4b56:	f000 ffa0 	bl	d5a9a <_ZN7TwoWire11requestFromEhj>

        value = _wire -> read();
   d4b5a:	6820      	ldr	r0, [r4, #0]
   d4b5c:	6803      	ldr	r3, [r0, #0]
   d4b5e:	695b      	ldr	r3, [r3, #20]
   d4b60:	4798      	blx	r3
        value <<= 8;
   d4b62:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
   d4b64:	6820      	ldr	r0, [r4, #0]
   d4b66:	6803      	ldr	r3, [r0, #0]
   d4b68:	695b      	ldr	r3, [r3, #20]
   d4b6a:	4798      	blx	r3
   d4b6c:	4328      	orrs	r0, r5
        value <<= 8;
   d4b6e:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
   d4b70:	6820      	ldr	r0, [r4, #0]
   d4b72:	6803      	ldr	r3, [r0, #0]
   d4b74:	695b      	ldr	r3, [r3, #20]
   d4b76:	4798      	blx	r3
   d4b78:	4305      	orrs	r5, r0
        if (_sck == -1)
            SPI.endTransaction(); // release the SPI bus
    }

    return value;
}
   d4b7a:	4628      	mov	r0, r5
   d4b7c:	b005      	add	sp, #20
   d4b7e:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   d4b80:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d4b84:	3301      	adds	r3, #1
   d4b86:	d10c      	bne.n	d4ba2 <_ZN15Adafruit_BME2806read24Eh+0x7a>
      dataMode_{dataMode}
   d4b88:	4b1a      	ldr	r3, [pc, #104]	; (d4bf4 <_ZN15Adafruit_BME2806read24Eh+0xcc>)
   d4b8a:	9300      	str	r3, [sp, #0]
   d4b8c:	2300      	movs	r3, #0
   d4b8e:	f88d 3004 	strb.w	r3, [sp, #4]
   d4b92:	4b19      	ldr	r3, [pc, #100]	; (d4bf8 <_ZN15Adafruit_BME2806read24Eh+0xd0>)
   d4b94:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d4b96:	4668      	mov	r0, sp
   d4b98:	2301      	movs	r3, #1
   d4b9a:	f8ad 300c 	strh.w	r3, [sp, #12]
   d4b9e:	f7ff ffb8 	bl	d4b12 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0.constprop.0>
        digitalWrite(_cs, LOW);
   d4ba2:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4ba6:	2100      	movs	r1, #0
   d4ba8:	b280      	uxth	r0, r0
   d4baa:	f001 ff7c 	bl	d6aa6 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d4bae:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d4bb2:	4620      	mov	r0, r4
   d4bb4:	f7ff ff70 	bl	d4a98 <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
   d4bb8:	2100      	movs	r1, #0
   d4bba:	4620      	mov	r0, r4
   d4bbc:	f7ff ff6c 	bl	d4a98 <_ZN15Adafruit_BME2807spixferEh>
        value |= spixfer(0);
   d4bc0:	2100      	movs	r1, #0
        value <<= 8;
   d4bc2:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   d4bc4:	4620      	mov	r0, r4
   d4bc6:	f7ff ff67 	bl	d4a98 <_ZN15Adafruit_BME2807spixferEh>
   d4bca:	4328      	orrs	r0, r5
        value <<= 8;
   d4bcc:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   d4bce:	2100      	movs	r1, #0
   d4bd0:	4620      	mov	r0, r4
   d4bd2:	f7ff ff61 	bl	d4a98 <_ZN15Adafruit_BME2807spixferEh>
   d4bd6:	4305      	orrs	r5, r0
        digitalWrite(_cs, HIGH);
   d4bd8:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4bdc:	2101      	movs	r1, #1
   d4bde:	b280      	uxth	r0, r0
   d4be0:	f001 ff61 	bl	d6aa6 <digitalWrite>
        if (_sck == -1)
   d4be4:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d4be8:	3301      	adds	r3, #1
   d4bea:	d1c6      	bne.n	d4b7a <_ZN15Adafruit_BME2806read24Eh+0x52>
            SPI.endTransaction(); // release the SPI bus
   d4bec:	f7ff ff8a 	bl	d4b04 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
    return value;
   d4bf0:	e7c3      	b.n	d4b7a <_ZN15Adafruit_BME2806read24Eh+0x52>
   d4bf2:	bf00      	nop
   d4bf4:	000d9384 	.word	0x000d9384
   d4bf8:	0007a120 	.word	0x0007a120

000d4bfc <_ZN15Adafruit_BME28015readTemperatureEv>:
    @brief  Returns the temperature from the sensor
    @returns the temperature read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readTemperature(void)
{
   d4bfc:	b510      	push	{r4, lr}
    int32_t var1, var2;

    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   d4bfe:	21fa      	movs	r1, #250	; 0xfa
{
   d4c00:	4604      	mov	r4, r0
    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   d4c02:	f7ff ff91 	bl	d4b28 <_ZN15Adafruit_BME2806read24Eh>
    if (adc_T == 0x800000) // value in case temp measurement was disabled
   d4c06:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   d4c0a:	d01e      	beq.n	d4c4a <_ZN15Adafruit_BME28015readTemperatureEv+0x4e>
        return NAN;
    adc_T >>= 4;

    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   d4c0c:	8aa1      	ldrh	r1, [r4, #20]
            ((int32_t)_bme280_calib.dig_T3)) >> 14;

    t_fine = var1 + var2;

    float T = (t_fine * 5 + 128) >> 8;
    return T/100;
   d4c0e:	ed9f 7a10 	vldr	s14, [pc, #64]	; d4c50 <_ZN15Adafruit_BME28015readTemperatureEv+0x54>
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   d4c12:	004b      	lsls	r3, r1, #1
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   d4c14:	ebc1 2220 	rsb	r2, r1, r0, asr #8
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   d4c18:	ebc3 11e0 	rsb	r1, r3, r0, asr #7
            ((int32_t)_bme280_calib.dig_T2)) >> 11;
   d4c1c:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   d4c20:	4352      	muls	r2, r2
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   d4c22:	4359      	muls	r1, r3
            ((int32_t)_bme280_calib.dig_T3)) >> 14;
   d4c24:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
              ((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1))) >> 12) *
   d4c28:	1312      	asrs	r2, r2, #12
   d4c2a:	4353      	muls	r3, r2
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   d4c2c:	139b      	asrs	r3, r3, #14
    t_fine = var1 + var2;
   d4c2e:	eb03 23e1 	add.w	r3, r3, r1, asr #11
   d4c32:	60e3      	str	r3, [r4, #12]
    float T = (t_fine * 5 + 128) >> 8;
   d4c34:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d4c38:	3380      	adds	r3, #128	; 0x80
   d4c3a:	121b      	asrs	r3, r3, #8
   d4c3c:	ee07 3a90 	vmov	s15, r3
   d4c40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    return T/100;
   d4c44:	ee87 0a87 	vdiv.f32	s0, s15, s14
}
   d4c48:	bd10      	pop	{r4, pc}
        return NAN;
   d4c4a:	ed9f 0a02 	vldr	s0, [pc, #8]	; d4c54 <_ZN15Adafruit_BME28015readTemperatureEv+0x58>
   d4c4e:	e7fb      	b.n	d4c48 <_ZN15Adafruit_BME28015readTemperatureEv+0x4c>
   d4c50:	42c80000 	.word	0x42c80000
   d4c54:	7fc00000 	.word	0x7fc00000

000d4c58 <_ZN15Adafruit_BME28012readPressureEv>:
/*!
    @brief  Returns the pressure from the sensor
    @returns the pressure value (in Pascal) read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readPressure(void) {
   d4c58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d4c5c:	4604      	mov	r4, r0
    int64_t var1, var2, p;

    readTemperature(); // must be done first to get t_fine
   d4c5e:	f7ff ffcd 	bl	d4bfc <_ZN15Adafruit_BME28015readTemperatureEv>

    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
   d4c62:	21f7      	movs	r1, #247	; 0xf7
   d4c64:	4620      	mov	r0, r4
   d4c66:	f7ff ff5f 	bl	d4b28 <_ZN15Adafruit_BME2806read24Eh>
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
   d4c6a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
   d4c6e:	4605      	mov	r5, r0
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
   d4c70:	f000 80bf 	beq.w	d4df2 <_ZN15Adafruit_BME28012readPressureEv+0x19a>
        return NAN;
    adc_P >>= 4;

    var1 = ((int64_t)t_fine) - 128000;
   d4c74:	68e0      	ldr	r0, [r4, #12]
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   d4c76:	f9b4 601c 	ldrsh.w	r6, [r4, #28]
    var1 = ((int64_t)t_fine) - 128000;
   d4c7a:	f5b0 33fa 	subs.w	r3, r0, #128000	; 0x1f400
   d4c7e:	ea4f 71e0 	mov.w	r1, r0, asr #31
   d4c82:	f141 32ff 	adc.w	r2, r1, #4294967295	; 0xffffffff
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   d4c86:	fba3 8903 	umull	r8, r9, r3, r3
   d4c8a:	fb03 f102 	mul.w	r1, r3, r2
   d4c8e:	eb09 0941 	add.w	r9, r9, r1, lsl #1
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   d4c92:	17f7      	asrs	r7, r6, #31
   d4c94:	fb06 f102 	mul.w	r1, r6, r2
   d4c98:	fb03 1107 	mla	r1, r3, r7, r1
   d4c9c:	fba6 6703 	umull	r6, r7, r6, r3
   d4ca0:	440f      	add	r7, r1
   d4ca2:	0339      	lsls	r1, r7, #12
   d4ca4:	ea41 5116 	orr.w	r1, r1, r6, lsr #20
   d4ca8:	0330      	lsls	r0, r6, #12
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
   d4caa:	f9b4 601e 	ldrsh.w	r6, [r4, #30]
   d4cae:	17f7      	asrs	r7, r6, #31
   d4cb0:	fb06 fc09 	mul.w	ip, r6, r9
   d4cb4:	fb08 cc07 	mla	ip, r8, r7, ip
   d4cb8:	fba6 6708 	umull	r6, r7, r6, r8
   d4cbc:	4467      	add	r7, ip
   d4cbe:	ea4f 2c16 	mov.w	ip, r6, lsr #8
   d4cc2:	ea4c 6c07 	orr.w	ip, ip, r7, lsl #24
    var1 = (((((int64_t)1)<<47)+var1))*((int64_t)_bme280_calib.dig_P1)>>33;
   d4cc6:	8b66      	ldrh	r6, [r4, #26]
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
   d4cc8:	ea4f 2e27 	mov.w	lr, r7, asr #8
   d4ccc:	eb1c 0000 	adds.w	r0, ip, r0
   d4cd0:	eb4e 0e01 	adc.w	lr, lr, r1
    var1 = (((((int64_t)1)<<47)+var1))*((int64_t)_bme280_calib.dig_P1)>>33;
   d4cd4:	3000      	adds	r0, #0
   d4cd6:	f54e 4e00 	adc.w	lr, lr, #32768	; 0x8000
   d4cda:	fba0 0106 	umull	r0, r1, r0, r6
   d4cde:	fb06 110e 	mla	r1, r6, lr, r1
   d4ce2:	104e      	asrs	r6, r1, #1
   d4ce4:	17cf      	asrs	r7, r1, #31

    if (var1 == 0) {
   d4ce6:	ea56 0107 	orrs.w	r1, r6, r7
   d4cea:	f000 8085 	beq.w	d4df8 <_ZN15Adafruit_BME28012readPressureEv+0x1a0>
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   d4cee:	f9b4 0024 	ldrsh.w	r0, [r4, #36]	; 0x24
   d4cf2:	fb00 fc09 	mul.w	ip, r0, r9
   d4cf6:	17c1      	asrs	r1, r0, #31
   d4cf8:	fb08 cc01 	mla	ip, r8, r1, ip
   d4cfc:	fba0 0108 	umull	r0, r1, r0, r8
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d4d00:	f9b4 8022 	ldrsh.w	r8, [r4, #34]	; 0x22
   d4d04:	ea4f 79e8 	mov.w	r9, r8, asr #31
   d4d08:	fb08 f202 	mul.w	r2, r8, r2
   d4d0c:	fb03 2209 	mla	r2, r3, r9, r2
   d4d10:	fba8 8903 	umull	r8, r9, r8, r3
   d4d14:	4491      	add	r9, r2
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   d4d16:	4461      	add	r1, ip
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d4d18:	ea4f 4248 	mov.w	r2, r8, lsl #17
   d4d1c:	ea4f 4c49 	mov.w	ip, r9, lsl #17
    adc_P >>= 4;
   d4d20:	112d      	asrs	r5, r5, #4
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d4d22:	1812      	adds	r2, r2, r0
        return 0; // avoid exception caused by division by zero
    }
    p = 1048576 - adc_P;
   d4d24:	f5c5 1580 	rsb	r5, r5, #1048576	; 0x100000
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d4d28:	ea4c 3cd8 	orr.w	ip, ip, r8, lsr #15
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
   d4d2c:	f9b4 8020 	ldrsh.w	r8, [r4, #32]
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d4d30:	eb4c 0c01 	adc.w	ip, ip, r1
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
   d4d34:	2300      	movs	r3, #0
    p = 1048576 - adc_P;
   d4d36:	17e9      	asrs	r1, r5, #31
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
   d4d38:	189b      	adds	r3, r3, r2
    p = (((p<<31) - var2)*3125) / var1;
   d4d3a:	ea4f 7ec1 	mov.w	lr, r1, lsl #31
   d4d3e:	ea4f 70c5 	mov.w	r0, r5, lsl #31
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
   d4d42:	ea4f 01c8 	mov.w	r1, r8, lsl #3
   d4d46:	eb41 0c0c 	adc.w	ip, r1, ip
    p = (((p<<31) - var2)*3125) / var1;
   d4d4a:	ea4e 0e55 	orr.w	lr, lr, r5, lsr #1
   d4d4e:	1ac0      	subs	r0, r0, r3
   d4d50:	f640 4335 	movw	r3, #3125	; 0xc35
   d4d54:	eb6e 0e0c 	sbc.w	lr, lr, ip
   d4d58:	fba0 0103 	umull	r0, r1, r0, r3
   d4d5c:	fb03 110e 	mla	r1, r3, lr, r1
   d4d60:	4632      	mov	r2, r6
   d4d62:	463b      	mov	r3, r7
   d4d64:	f003 fe58 	bl	d8a18 <__aeabi_ldivmod>
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
   d4d68:	f9b4 202a 	ldrsh.w	r2, [r4, #42]	; 0x2a
   d4d6c:	134d      	asrs	r5, r1, #13
   d4d6e:	0b46      	lsrs	r6, r0, #13
   d4d70:	ea46 46c1 	orr.w	r6, r6, r1, lsl #19
   d4d74:	fb02 f705 	mul.w	r7, r2, r5
   d4d78:	17d3      	asrs	r3, r2, #31
   d4d7a:	fb06 7703 	mla	r7, r6, r3, r7
   d4d7e:	fba2 2306 	umull	r2, r3, r2, r6
   d4d82:	443b      	add	r3, r7
   d4d84:	4355      	muls	r5, r2
   d4d86:	fb06 5503 	mla	r5, r6, r3, r5
   d4d8a:	fba2 2306 	umull	r2, r3, r2, r6
   d4d8e:	442b      	add	r3, r5
   d4d90:	0e55      	lsrs	r5, r2, #25
   d4d92:	ea45 15c3 	orr.w	r5, r5, r3, lsl #7
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   d4d96:	f9b4 2028 	ldrsh.w	r2, [r4, #40]	; 0x28

    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   d4d9a:	f9b4 4026 	ldrsh.w	r4, [r4, #38]	; 0x26
   d4d9e:	182d      	adds	r5, r5, r0
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
   d4da0:	ea4f 6663 	mov.w	r6, r3, asr #25
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   d4da4:	eb41 0606 	adc.w	r6, r1, r6
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   d4da8:	17d3      	asrs	r3, r2, #31
   d4daa:	4351      	muls	r1, r2
   d4dac:	fb00 1103 	mla	r1, r0, r3, r1
   d4db0:	fba2 2300 	umull	r2, r3, r2, r0
   d4db4:	440b      	add	r3, r1
   d4db6:	0cd1      	lsrs	r1, r2, #19
   d4db8:	ea41 3143 	orr.w	r1, r1, r3, lsl #13
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   d4dbc:	186d      	adds	r5, r5, r1
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   d4dbe:	ea4f 40e3 	mov.w	r0, r3, asr #19
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   d4dc2:	eb46 0300 	adc.w	r3, r6, r0
   d4dc6:	0a2a      	lsrs	r2, r5, #8
   d4dc8:	17e5      	asrs	r5, r4, #31
   d4dca:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
   d4dce:	1219      	asrs	r1, r3, #8
   d4dd0:	0120      	lsls	r0, r4, #4
   d4dd2:	012b      	lsls	r3, r5, #4
   d4dd4:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
    return (float)p/256;
   d4dd8:	1880      	adds	r0, r0, r2
   d4dda:	eb43 0101 	adc.w	r1, r3, r1
   d4dde:	f003 fddd 	bl	d899c <__aeabi_l2f>
   d4de2:	ed9f 0a07 	vldr	s0, [pc, #28]	; d4e00 <_ZN15Adafruit_BME28012readPressureEv+0x1a8>
   d4de6:	ee07 0a90 	vmov	s15, r0
   d4dea:	ee27 0a80 	vmul.f32	s0, s15, s0
}
   d4dee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return NAN;
   d4df2:	ed9f 0a04 	vldr	s0, [pc, #16]	; d4e04 <_ZN15Adafruit_BME28012readPressureEv+0x1ac>
   d4df6:	e7fa      	b.n	d4dee <_ZN15Adafruit_BME28012readPressureEv+0x196>
        return 0; // avoid exception caused by division by zero
   d4df8:	ed9f 0a03 	vldr	s0, [pc, #12]	; d4e08 <_ZN15Adafruit_BME28012readPressureEv+0x1b0>
   d4dfc:	e7f7      	b.n	d4dee <_ZN15Adafruit_BME28012readPressureEv+0x196>
   d4dfe:	bf00      	nop
   d4e00:	3b800000 	.word	0x3b800000
   d4e04:	7fc00000 	.word	0x7fc00000
   d4e08:	00000000 	.word	0x00000000

000d4e0c <_ZN15Adafruit_BME2806read16Eh>:
{
   d4e0c:	b530      	push	{r4, r5, lr}
    if (_cs == -1) {
   d4e0e:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d4e12:	3301      	adds	r3, #1
{
   d4e14:	b085      	sub	sp, #20
   d4e16:	4604      	mov	r4, r0
   d4e18:	460d      	mov	r5, r1
    if (_cs == -1) {
   d4e1a:	d11f      	bne.n	d4e5c <_ZN15Adafruit_BME2806read16Eh+0x50>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d4e1c:	7901      	ldrb	r1, [r0, #4]
   d4e1e:	6800      	ldr	r0, [r0, #0]
   d4e20:	f000 fe3e 	bl	d5aa0 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d4e24:	6820      	ldr	r0, [r4, #0]
   d4e26:	6803      	ldr	r3, [r0, #0]
   d4e28:	4629      	mov	r1, r5
   d4e2a:	689b      	ldr	r3, [r3, #8]
   d4e2c:	4798      	blx	r3
        _wire -> endTransmission();
   d4e2e:	6820      	ldr	r0, [r4, #0]
   d4e30:	f000 fe41 	bl	d5ab6 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)2);
   d4e34:	7921      	ldrb	r1, [r4, #4]
   d4e36:	6820      	ldr	r0, [r4, #0]
   d4e38:	2202      	movs	r2, #2
   d4e3a:	f000 fe2e 	bl	d5a9a <_ZN7TwoWire11requestFromEhj>
        value = (_wire -> read() << 8) | _wire -> read();
   d4e3e:	6820      	ldr	r0, [r4, #0]
   d4e40:	6803      	ldr	r3, [r0, #0]
   d4e42:	695b      	ldr	r3, [r3, #20]
   d4e44:	4798      	blx	r3
   d4e46:	4605      	mov	r5, r0
   d4e48:	6820      	ldr	r0, [r4, #0]
   d4e4a:	6803      	ldr	r3, [r0, #0]
   d4e4c:	695b      	ldr	r3, [r3, #20]
   d4e4e:	4798      	blx	r3
   d4e50:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   d4e54:	b285      	uxth	r5, r0
}
   d4e56:	4628      	mov	r0, r5
   d4e58:	b005      	add	sp, #20
   d4e5a:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   d4e5c:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d4e60:	3301      	adds	r3, #1
   d4e62:	d10c      	bne.n	d4e7e <_ZN15Adafruit_BME2806read16Eh+0x72>
   d4e64:	4b18      	ldr	r3, [pc, #96]	; (d4ec8 <_ZN15Adafruit_BME2806read16Eh+0xbc>)
   d4e66:	9300      	str	r3, [sp, #0]
   d4e68:	2300      	movs	r3, #0
   d4e6a:	f88d 3004 	strb.w	r3, [sp, #4]
   d4e6e:	4b17      	ldr	r3, [pc, #92]	; (d4ecc <_ZN15Adafruit_BME2806read16Eh+0xc0>)
   d4e70:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d4e72:	4668      	mov	r0, sp
   d4e74:	2301      	movs	r3, #1
   d4e76:	f8ad 300c 	strh.w	r3, [sp, #12]
   d4e7a:	f7ff fe4a 	bl	d4b12 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0.constprop.0>
        digitalWrite(_cs, LOW);
   d4e7e:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4e82:	2100      	movs	r1, #0
   d4e84:	b280      	uxth	r0, r0
   d4e86:	f001 fe0e 	bl	d6aa6 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d4e8a:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d4e8e:	4620      	mov	r0, r4
   d4e90:	f7ff fe02 	bl	d4a98 <_ZN15Adafruit_BME2807spixferEh>
        value = (spixfer(0) << 8) | spixfer(0);
   d4e94:	2100      	movs	r1, #0
   d4e96:	4620      	mov	r0, r4
   d4e98:	f7ff fdfe 	bl	d4a98 <_ZN15Adafruit_BME2807spixferEh>
   d4e9c:	2100      	movs	r1, #0
   d4e9e:	4605      	mov	r5, r0
   d4ea0:	4620      	mov	r0, r4
   d4ea2:	f7ff fdf9 	bl	d4a98 <_ZN15Adafruit_BME2807spixferEh>
   d4ea6:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   d4eaa:	b285      	uxth	r5, r0
        digitalWrite(_cs, HIGH);
   d4eac:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4eb0:	2101      	movs	r1, #1
   d4eb2:	b280      	uxth	r0, r0
   d4eb4:	f001 fdf7 	bl	d6aa6 <digitalWrite>
        if (_sck == -1)
   d4eb8:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d4ebc:	3301      	adds	r3, #1
   d4ebe:	d1ca      	bne.n	d4e56 <_ZN15Adafruit_BME2806read16Eh+0x4a>
            SPI.endTransaction(); // release the SPI bus
   d4ec0:	f7ff fe20 	bl	d4b04 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
   d4ec4:	e7c7      	b.n	d4e56 <_ZN15Adafruit_BME2806read16Eh+0x4a>
   d4ec6:	bf00      	nop
   d4ec8:	000d9384 	.word	0x000d9384
   d4ecc:	0007a120 	.word	0x0007a120

000d4ed0 <_ZN15Adafruit_BME2809read16_LEEh>:
uint16_t Adafruit_BME280::read16_LE(byte reg) {
   d4ed0:	b508      	push	{r3, lr}
    uint16_t temp = read16(reg);
   d4ed2:	f7ff ff9b 	bl	d4e0c <_ZN15Adafruit_BME2806read16Eh>
    return (temp >> 8) | (temp << 8);
   d4ed6:	ba40      	rev16	r0, r0
}
   d4ed8:	b280      	uxth	r0, r0
   d4eda:	bd08      	pop	{r3, pc}

000d4edc <_ZN15Adafruit_BME28012readHumidityEv>:
/*!
    @brief  Returns the humidity from the sensor
    @returns the humidity value read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readHumidity(void) {
   d4edc:	b538      	push	{r3, r4, r5, lr}
   d4ede:	4604      	mov	r4, r0
    readTemperature(); // must be done first to get t_fine
   d4ee0:	f7ff fe8c 	bl	d4bfc <_ZN15Adafruit_BME28015readTemperatureEv>

    int32_t adc_H = read16(BME280_REGISTER_HUMIDDATA);
   d4ee4:	21fd      	movs	r1, #253	; 0xfd
   d4ee6:	4620      	mov	r0, r4
   d4ee8:	f7ff ff90 	bl	d4e0c <_ZN15Adafruit_BME2806read16Eh>
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
   d4eec:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   d4ef0:	d038      	beq.n	d4f64 <_ZN15Adafruit_BME28012readHumidityEv+0x88>
        
    int32_t v_x1_u32r;

    v_x1_u32r = (t_fine - ((int32_t)76800));

    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   d4ef2:	f9b4 5032 	ldrsh.w	r5, [r4, #50]	; 0x32
    v_x1_u32r = (t_fine - ((int32_t)76800));
   d4ef6:	68e2      	ldr	r2, [r4, #12]
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   d4ef8:	f9b4 3034 	ldrsh.w	r3, [r4, #52]	; 0x34
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   d4efc:	052d      	lsls	r5, r5, #20
    v_x1_u32r = (t_fine - ((int32_t)76800));
   d4efe:	f5a2 3296 	sub.w	r2, r2, #76800	; 0x12c00
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   d4f02:	ebc5 3080 	rsb	r0, r5, r0, lsl #14
   d4f06:	fb02 0313 	mls	r3, r2, r3, r0
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   d4f0a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
   d4f0e:	13d9      	asrs	r1, r3, #15
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   d4f10:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   d4f14:	4353      	muls	r3, r2
   d4f16:	12db      	asrs	r3, r3, #11
   d4f18:	f503 4000 	add.w	r0, r3, #32768	; 0x8000
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
   d4f1c:	f994 3036 	ldrsb.w	r3, [r4, #54]	; 0x36
   d4f20:	4353      	muls	r3, r2
   d4f22:	129b      	asrs	r3, r3, #10
   d4f24:	4343      	muls	r3, r0
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   d4f26:	129b      	asrs	r3, r3, #10
   d4f28:	f503 1200 	add.w	r2, r3, #2097152	; 0x200000
                    ((int32_t)2097152)) * ((int32_t)_bme280_calib.dig_H2) + 8192) >> 14));
   d4f2c:	f9b4 302e 	ldrsh.w	r3, [r4, #46]	; 0x2e
   d4f30:	4353      	muls	r3, r2
   d4f32:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
   d4f36:	139b      	asrs	r3, r3, #14
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   d4f38:	434b      	muls	r3, r1

    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
   d4f3a:	13da      	asrs	r2, r3, #15
                               ((int32_t)_bme280_calib.dig_H1)) >> 4));
   d4f3c:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
   d4f40:	4352      	muls	r2, r2
   d4f42:	11d2      	asrs	r2, r2, #7
   d4f44:	434a      	muls	r2, r1
   d4f46:	eba3 1322 	sub.w	r3, r3, r2, asr #4

    v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
   d4f4a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
   d4f4e:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
   d4f52:	bfa8      	it	ge
   d4f54:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
    float h = (v_x1_u32r>>12);
   d4f58:	131b      	asrs	r3, r3, #12
   d4f5a:	ee00 3a10 	vmov	s0, r3
    return  h / 1024.0;
   d4f5e:	eeba 0acb 	vcvt.f32.s32	s0, s0, #10
}
   d4f62:	bd38      	pop	{r3, r4, r5, pc}
        return NAN;
   d4f64:	ed9f 0a01 	vldr	s0, [pc, #4]	; d4f6c <_ZN15Adafruit_BME28012readHumidityEv+0x90>
   d4f68:	e7fb      	b.n	d4f62 <_ZN15Adafruit_BME28012readHumidityEv+0x86>
   d4f6a:	bf00      	nop
   d4f6c:	7fc00000 	.word	0x7fc00000

000d4f70 <_ZN15Adafruit_BME2805read8Eh>:
uint8_t Adafruit_BME280::read8(byte reg) {
   d4f70:	b530      	push	{r4, r5, lr}
    if (_cs == -1) {
   d4f72:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d4f76:	3301      	adds	r3, #1
uint8_t Adafruit_BME280::read8(byte reg) {
   d4f78:	b085      	sub	sp, #20
   d4f7a:	4604      	mov	r4, r0
   d4f7c:	460d      	mov	r5, r1
    if (_cs == -1) {
   d4f7e:	d118      	bne.n	d4fb2 <_ZN15Adafruit_BME2805read8Eh+0x42>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d4f80:	7901      	ldrb	r1, [r0, #4]
   d4f82:	6800      	ldr	r0, [r0, #0]
   d4f84:	f000 fd8c 	bl	d5aa0 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d4f88:	6820      	ldr	r0, [r4, #0]
   d4f8a:	6803      	ldr	r3, [r0, #0]
   d4f8c:	4629      	mov	r1, r5
   d4f8e:	689b      	ldr	r3, [r3, #8]
   d4f90:	4798      	blx	r3
        _wire -> endTransmission();
   d4f92:	6820      	ldr	r0, [r4, #0]
   d4f94:	f000 fd8f 	bl	d5ab6 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)1);
   d4f98:	7921      	ldrb	r1, [r4, #4]
   d4f9a:	6820      	ldr	r0, [r4, #0]
   d4f9c:	2201      	movs	r2, #1
   d4f9e:	f000 fd7c 	bl	d5a9a <_ZN7TwoWire11requestFromEhj>
        value = _wire -> read();
   d4fa2:	6820      	ldr	r0, [r4, #0]
   d4fa4:	6803      	ldr	r3, [r0, #0]
   d4fa6:	695b      	ldr	r3, [r3, #20]
   d4fa8:	4798      	blx	r3
   d4faa:	b2c5      	uxtb	r5, r0
}
   d4fac:	4628      	mov	r0, r5
   d4fae:	b005      	add	sp, #20
   d4fb0:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   d4fb2:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d4fb6:	3301      	adds	r3, #1
   d4fb8:	d10c      	bne.n	d4fd4 <_ZN15Adafruit_BME2805read8Eh+0x64>
   d4fba:	4b15      	ldr	r3, [pc, #84]	; (d5010 <_ZN15Adafruit_BME2805read8Eh+0xa0>)
   d4fbc:	9300      	str	r3, [sp, #0]
   d4fbe:	2300      	movs	r3, #0
   d4fc0:	f88d 3004 	strb.w	r3, [sp, #4]
   d4fc4:	4b13      	ldr	r3, [pc, #76]	; (d5014 <_ZN15Adafruit_BME2805read8Eh+0xa4>)
   d4fc6:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d4fc8:	4668      	mov	r0, sp
   d4fca:	2301      	movs	r3, #1
   d4fcc:	f8ad 300c 	strh.w	r3, [sp, #12]
   d4fd0:	f7ff fd9f 	bl	d4b12 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0.constprop.0>
        digitalWrite(_cs, LOW);
   d4fd4:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4fd8:	2100      	movs	r1, #0
   d4fda:	b280      	uxth	r0, r0
   d4fdc:	f001 fd63 	bl	d6aa6 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d4fe0:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d4fe4:	4620      	mov	r0, r4
   d4fe6:	f7ff fd57 	bl	d4a98 <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
   d4fea:	2100      	movs	r1, #0
   d4fec:	4620      	mov	r0, r4
   d4fee:	f7ff fd53 	bl	d4a98 <_ZN15Adafruit_BME2807spixferEh>
   d4ff2:	4605      	mov	r5, r0
        digitalWrite(_cs, HIGH);
   d4ff4:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4ff8:	2101      	movs	r1, #1
   d4ffa:	b280      	uxth	r0, r0
   d4ffc:	f001 fd53 	bl	d6aa6 <digitalWrite>
        if (_sck == -1)
   d5000:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d5004:	3301      	adds	r3, #1
   d5006:	d1d1      	bne.n	d4fac <_ZN15Adafruit_BME2805read8Eh+0x3c>
            SPI.endTransaction(); // release the SPI bus
   d5008:	f7ff fd7c 	bl	d4b04 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
   d500c:	e7ce      	b.n	d4fac <_ZN15Adafruit_BME2805read8Eh+0x3c>
   d500e:	bf00      	nop
   d5010:	000d9384 	.word	0x000d9384
   d5014:	0007a120 	.word	0x0007a120

000d5018 <_ZN15Adafruit_BME28020isReadingCalibrationEv>:
{
   d5018:	b508      	push	{r3, lr}
  uint8_t const rStatus = read8(BME280_REGISTER_STATUS);
   d501a:	21f3      	movs	r1, #243	; 0xf3
   d501c:	f7ff ffa8 	bl	d4f70 <_ZN15Adafruit_BME2805read8Eh>
}
   d5020:	f000 0001 	and.w	r0, r0, #1
   d5024:	bd08      	pop	{r3, pc}

000d5026 <_ZN15Adafruit_BME28016readCoefficientsEv>:
{
   d5026:	b538      	push	{r3, r4, r5, lr}
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d5028:	2188      	movs	r1, #136	; 0x88
{
   d502a:	4604      	mov	r4, r0
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d502c:	f7ff ff50 	bl	d4ed0 <_ZN15Adafruit_BME2809read16_LEEh>
    return (int16_t)read16_LE(reg);
   d5030:	218a      	movs	r1, #138	; 0x8a
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d5032:	82a0      	strh	r0, [r4, #20]
    return (int16_t)read16_LE(reg);
   d5034:	4620      	mov	r0, r4
   d5036:	f7ff ff4b 	bl	d4ed0 <_ZN15Adafruit_BME2809read16_LEEh>
   d503a:	218c      	movs	r1, #140	; 0x8c
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
   d503c:	82e0      	strh	r0, [r4, #22]
    return (int16_t)read16_LE(reg);
   d503e:	4620      	mov	r0, r4
   d5040:	f7ff ff46 	bl	d4ed0 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d5044:	218e      	movs	r1, #142	; 0x8e
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);
   d5046:	8320      	strh	r0, [r4, #24]
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d5048:	4620      	mov	r0, r4
   d504a:	f7ff ff41 	bl	d4ed0 <_ZN15Adafruit_BME2809read16_LEEh>
    return (int16_t)read16_LE(reg);
   d504e:	2190      	movs	r1, #144	; 0x90
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d5050:	8360      	strh	r0, [r4, #26]
    return (int16_t)read16_LE(reg);
   d5052:	4620      	mov	r0, r4
   d5054:	f7ff ff3c 	bl	d4ed0 <_ZN15Adafruit_BME2809read16_LEEh>
   d5058:	2192      	movs	r1, #146	; 0x92
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
   d505a:	83a0      	strh	r0, [r4, #28]
    return (int16_t)read16_LE(reg);
   d505c:	4620      	mov	r0, r4
   d505e:	f7ff ff37 	bl	d4ed0 <_ZN15Adafruit_BME2809read16_LEEh>
   d5062:	2194      	movs	r1, #148	; 0x94
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
   d5064:	83e0      	strh	r0, [r4, #30]
    return (int16_t)read16_LE(reg);
   d5066:	4620      	mov	r0, r4
   d5068:	f7ff ff32 	bl	d4ed0 <_ZN15Adafruit_BME2809read16_LEEh>
   d506c:	2196      	movs	r1, #150	; 0x96
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
   d506e:	8420      	strh	r0, [r4, #32]
    return (int16_t)read16_LE(reg);
   d5070:	4620      	mov	r0, r4
   d5072:	f7ff ff2d 	bl	d4ed0 <_ZN15Adafruit_BME2809read16_LEEh>
   d5076:	2198      	movs	r1, #152	; 0x98
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
   d5078:	8460      	strh	r0, [r4, #34]	; 0x22
    return (int16_t)read16_LE(reg);
   d507a:	4620      	mov	r0, r4
   d507c:	f7ff ff28 	bl	d4ed0 <_ZN15Adafruit_BME2809read16_LEEh>
   d5080:	219a      	movs	r1, #154	; 0x9a
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
   d5082:	84a0      	strh	r0, [r4, #36]	; 0x24
    return (int16_t)read16_LE(reg);
   d5084:	4620      	mov	r0, r4
   d5086:	f7ff ff23 	bl	d4ed0 <_ZN15Adafruit_BME2809read16_LEEh>
   d508a:	219c      	movs	r1, #156	; 0x9c
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
   d508c:	84e0      	strh	r0, [r4, #38]	; 0x26
    return (int16_t)read16_LE(reg);
   d508e:	4620      	mov	r0, r4
   d5090:	f7ff ff1e 	bl	d4ed0 <_ZN15Adafruit_BME2809read16_LEEh>
   d5094:	219e      	movs	r1, #158	; 0x9e
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
   d5096:	8520      	strh	r0, [r4, #40]	; 0x28
    return (int16_t)read16_LE(reg);
   d5098:	4620      	mov	r0, r4
   d509a:	f7ff ff19 	bl	d4ed0 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d509e:	21a1      	movs	r1, #161	; 0xa1
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);
   d50a0:	8560      	strh	r0, [r4, #42]	; 0x2a
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d50a2:	4620      	mov	r0, r4
   d50a4:	f7ff ff64 	bl	d4f70 <_ZN15Adafruit_BME2805read8Eh>
    return (int16_t)read16_LE(reg);
   d50a8:	21e1      	movs	r1, #225	; 0xe1
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d50aa:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    return (int16_t)read16_LE(reg);
   d50ae:	4620      	mov	r0, r4
   d50b0:	f7ff ff0e 	bl	d4ed0 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d50b4:	21e3      	movs	r1, #227	; 0xe3
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
   d50b6:	85e0      	strh	r0, [r4, #46]	; 0x2e
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d50b8:	4620      	mov	r0, r4
   d50ba:	f7ff ff59 	bl	d4f70 <_ZN15Adafruit_BME2805read8Eh>
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   d50be:	21e4      	movs	r1, #228	; 0xe4
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d50c0:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   d50c4:	4620      	mov	r0, r4
   d50c6:	f7ff ff53 	bl	d4f70 <_ZN15Adafruit_BME2805read8Eh>
   d50ca:	21e5      	movs	r1, #229	; 0xe5
   d50cc:	4605      	mov	r5, r0
   d50ce:	4620      	mov	r0, r4
   d50d0:	f7ff ff4e 	bl	d4f70 <_ZN15Adafruit_BME2805read8Eh>
   d50d4:	f000 030f 	and.w	r3, r0, #15
   d50d8:	ea43 1005 	orr.w	r0, r3, r5, lsl #4
   d50dc:	8660      	strh	r0, [r4, #50]	; 0x32
    _bme280_calib.dig_H5 = (read8(BME280_REGISTER_DIG_H5+1) << 4) | (read8(BME280_REGISTER_DIG_H5) >> 4);
   d50de:	21e6      	movs	r1, #230	; 0xe6
   d50e0:	4620      	mov	r0, r4
   d50e2:	f7ff ff45 	bl	d4f70 <_ZN15Adafruit_BME2805read8Eh>
   d50e6:	21e5      	movs	r1, #229	; 0xe5
   d50e8:	4605      	mov	r5, r0
   d50ea:	4620      	mov	r0, r4
   d50ec:	f7ff ff40 	bl	d4f70 <_ZN15Adafruit_BME2805read8Eh>
   d50f0:	1103      	asrs	r3, r0, #4
   d50f2:	ea43 1005 	orr.w	r0, r3, r5, lsl #4
   d50f6:	86a0      	strh	r0, [r4, #52]	; 0x34
    _bme280_calib.dig_H6 = (int8_t)read8(BME280_REGISTER_DIG_H6);
   d50f8:	21e7      	movs	r1, #231	; 0xe7
   d50fa:	4620      	mov	r0, r4
   d50fc:	f7ff ff38 	bl	d4f70 <_ZN15Adafruit_BME2805read8Eh>
   d5100:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
}
   d5104:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5108 <_ZN15Adafruit_BME2806write8Ehh>:
void Adafruit_BME280::write8(byte reg, byte value) {
   d5108:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (_cs == -1) {
   d510a:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d510e:	3301      	adds	r3, #1
void Adafruit_BME280::write8(byte reg, byte value) {
   d5110:	4604      	mov	r4, r0
   d5112:	460e      	mov	r6, r1
   d5114:	4615      	mov	r5, r2
    if (_cs == -1) {
   d5116:	d112      	bne.n	d513e <_ZN15Adafruit_BME2806write8Ehh+0x36>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d5118:	7901      	ldrb	r1, [r0, #4]
   d511a:	6800      	ldr	r0, [r0, #0]
   d511c:	f000 fcc0 	bl	d5aa0 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d5120:	6820      	ldr	r0, [r4, #0]
   d5122:	6803      	ldr	r3, [r0, #0]
   d5124:	4631      	mov	r1, r6
   d5126:	689b      	ldr	r3, [r3, #8]
   d5128:	4798      	blx	r3
        _wire -> write((uint8_t)value);
   d512a:	6820      	ldr	r0, [r4, #0]
   d512c:	6803      	ldr	r3, [r0, #0]
   d512e:	4629      	mov	r1, r5
   d5130:	689b      	ldr	r3, [r3, #8]
   d5132:	4798      	blx	r3
        _wire -> endTransmission();
   d5134:	6820      	ldr	r0, [r4, #0]
   d5136:	f000 fcbe 	bl	d5ab6 <_ZN7TwoWire15endTransmissionEv>
}
   d513a:	b004      	add	sp, #16
   d513c:	bd70      	pop	{r4, r5, r6, pc}
        if (_sck == -1)
   d513e:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d5142:	3301      	adds	r3, #1
   d5144:	d10c      	bne.n	d5160 <_ZN15Adafruit_BME2806write8Ehh+0x58>
   d5146:	4b14      	ldr	r3, [pc, #80]	; (d5198 <_ZN15Adafruit_BME2806write8Ehh+0x90>)
   d5148:	9300      	str	r3, [sp, #0]
   d514a:	2300      	movs	r3, #0
   d514c:	f88d 3004 	strb.w	r3, [sp, #4]
   d5150:	4b12      	ldr	r3, [pc, #72]	; (d519c <_ZN15Adafruit_BME2806write8Ehh+0x94>)
   d5152:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d5154:	4668      	mov	r0, sp
   d5156:	2301      	movs	r3, #1
   d5158:	f8ad 300c 	strh.w	r3, [sp, #12]
   d515c:	f7ff fcd9 	bl	d4b12 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0.constprop.0>
        digitalWrite(_cs, LOW);
   d5160:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d5164:	2100      	movs	r1, #0
   d5166:	b280      	uxth	r0, r0
   d5168:	f001 fc9d 	bl	d6aa6 <digitalWrite>
        spixfer(reg & ~0x80); // write, bit 7 low
   d516c:	f006 017f 	and.w	r1, r6, #127	; 0x7f
   d5170:	4620      	mov	r0, r4
   d5172:	f7ff fc91 	bl	d4a98 <_ZN15Adafruit_BME2807spixferEh>
        spixfer(value);
   d5176:	4629      	mov	r1, r5
   d5178:	4620      	mov	r0, r4
   d517a:	f7ff fc8d 	bl	d4a98 <_ZN15Adafruit_BME2807spixferEh>
        digitalWrite(_cs, HIGH);
   d517e:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d5182:	2101      	movs	r1, #1
   d5184:	b280      	uxth	r0, r0
   d5186:	f001 fc8e 	bl	d6aa6 <digitalWrite>
    if (_sck == -1)
   d518a:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d518e:	3301      	adds	r3, #1
   d5190:	d1d3      	bne.n	d513a <_ZN15Adafruit_BME2806write8Ehh+0x32>
        SPI.endTransaction(); // release the SPI bus
   d5192:	f7ff fcb7 	bl	d4b04 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
}
   d5196:	e7d0      	b.n	d513a <_ZN15Adafruit_BME2806write8Ehh+0x32>
   d5198:	000d9384 	.word	0x000d9384
   d519c:	0007a120 	.word	0x0007a120

000d51a0 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>:
		 standby_duration  duration) {
   d51a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _measReg.osrs_t   = tempSampling;
   d51a2:	00db      	lsls	r3, r3, #3
   d51a4:	f002 0207 	and.w	r2, r2, #7
   d51a8:	f003 0338 	and.w	r3, r3, #56	; 0x38
   d51ac:	4313      	orrs	r3, r2
   d51ae:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
		 standby_duration  duration) {
   d51b2:	f89d 6018 	ldrb.w	r6, [sp, #24]
    _measReg.osrs_t   = tempSampling;
   d51b6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    _humReg.osrs_h    = humSampling;
   d51ba:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
		 standby_duration  duration) {
   d51be:	f89d 501c 	ldrb.w	r5, [sp, #28]
   d51c2:	f89d 7020 	ldrb.w	r7, [sp, #32]
    _humReg.osrs_h    = humSampling;
   d51c6:	f366 1347 	bfi	r3, r6, #5, #3
   d51ca:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    _configReg.t_sb   = duration;
   d51ce:	00ed      	lsls	r5, r5, #3
   d51d0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   d51d4:	f007 0707 	and.w	r7, r7, #7
   d51d8:	f005 0538 	and.w	r5, r5, #56	; 0x38
   d51dc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   d51e0:	433d      	orrs	r5, r7
		 standby_duration  duration) {
   d51e2:	4604      	mov	r4, r0
    _configReg.t_sb   = duration;
   d51e4:	431d      	orrs	r5, r3
   d51e6:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
    write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
   d51ea:	f006 0207 	and.w	r2, r6, #7
   d51ee:	21f2      	movs	r1, #242	; 0xf2
   d51f0:	f7ff ff8a 	bl	d5108 <_ZN15Adafruit_BME2806write8Ehh>
            unsigned int none : 1;  ///< unused - don't set
            unsigned int spi3w_en : 1; ///< unused - don't set

            /// @return combined config register
            unsigned int get() {
                return (t_sb << 5) | (filter << 2) | spi3w_en;
   d51f4:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   d51f8:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   d51fc:	f002 0107 	and.w	r1, r2, #7
   d5200:	009b      	lsls	r3, r3, #2
   d5202:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
    write8(BME280_REGISTER_CONFIG, _configReg.get());
   d5206:	ea43 12d2 	orr.w	r2, r3, r2, lsr #7
   d520a:	4620      	mov	r0, r4
   d520c:	21f5      	movs	r1, #245	; 0xf5
   d520e:	f7ff ff7b 	bl	d5108 <_ZN15Adafruit_BME2806write8Ehh>
            // 11       = normal
            unsigned int mode : 2; ///< device mode

            /// @return combined ctrl register
            unsigned int get() {
                return (osrs_t << 5) | (osrs_p << 2) | mode;
   d5212:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
   d5216:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   d521a:	f002 0107 	and.w	r1, r2, #7
   d521e:	009b      	lsls	r3, r3, #2
   d5220:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   d5224:	ea43 1292 	orr.w	r2, r3, r2, lsr #6
   d5228:	4620      	mov	r0, r4
   d522a:	21f4      	movs	r1, #244	; 0xf4
}
   d522c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   d5230:	f7ff bf6a 	b.w	d5108 <_ZN15Adafruit_BME2806write8Ehh>

000d5234 <_ZN15Adafruit_BME2804initEv>:
{
   d5234:	b530      	push	{r4, r5, lr}
   d5236:	4604      	mov	r4, r0
    if (_cs == -1) {
   d5238:	f990 0010 	ldrsb.w	r0, [r0, #16]
   d523c:	1c42      	adds	r2, r0, #1
{
   d523e:	b085      	sub	sp, #20
    if (_cs == -1) {
   d5240:	d119      	bne.n	d5276 <_ZN15Adafruit_BME2804initEv+0x42>
        _wire -> begin();
   d5242:	6820      	ldr	r0, [r4, #0]
   d5244:	f000 fbfa 	bl	d5a3c <_ZN7TwoWire5beginEv>
    _sensorID = read8(BME280_REGISTER_CHIPID);
   d5248:	21d0      	movs	r1, #208	; 0xd0
   d524a:	4620      	mov	r0, r4
   d524c:	f7ff fe90 	bl	d4f70 <_ZN15Adafruit_BME2805read8Eh>
    if (_sensorID != 0x60)
   d5250:	2860      	cmp	r0, #96	; 0x60
    _sensorID = read8(BME280_REGISTER_CHIPID);
   d5252:	60a0      	str	r0, [r4, #8]
    if (_sensorID != 0x60)
   d5254:	d145      	bne.n	d52e2 <_ZN15Adafruit_BME2804initEv+0xae>
    write8(BME280_REGISTER_SOFTRESET, 0xB6);
   d5256:	4620      	mov	r0, r4
   d5258:	22b6      	movs	r2, #182	; 0xb6
   d525a:	21e0      	movs	r1, #224	; 0xe0
   d525c:	f7ff ff54 	bl	d5108 <_ZN15Adafruit_BME2806write8Ehh>
    delay(300);
   d5260:	f44f 7096 	mov.w	r0, #300	; 0x12c
   d5264:	f001 f926 	bl	d64b4 <delay>
    while (isReadingCalibration())
   d5268:	4620      	mov	r0, r4
   d526a:	f7ff fed5 	bl	d5018 <_ZN15Adafruit_BME28020isReadingCalibrationEv>
   d526e:	4605      	mov	r5, r0
   d5270:	b328      	cbz	r0, d52be <_ZN15Adafruit_BME2804initEv+0x8a>
          delay(100);
   d5272:	2064      	movs	r0, #100	; 0x64
   d5274:	e7f6      	b.n	d5264 <_ZN15Adafruit_BME2804initEv+0x30>
        digitalWrite(_cs, HIGH);
   d5276:	2101      	movs	r1, #1
   d5278:	b280      	uxth	r0, r0
   d527a:	f001 fc14 	bl	d6aa6 <digitalWrite>
        pinMode(_cs, OUTPUT);
   d527e:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d5282:	2101      	movs	r1, #1
   d5284:	b280      	uxth	r0, r0
   d5286:	f001 fbfd 	bl	d6a84 <pinMode>
        if (_sck == -1) {
   d528a:	f994 0013 	ldrsb.w	r0, [r4, #19]
   d528e:	1c43      	adds	r3, r0, #1
   d5290:	d104      	bne.n	d529c <_ZN15Adafruit_BME2804initEv+0x68>
        instance().begin();
   d5292:	f7ff fbe5 	bl	d4a60 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d5296:	f001 fa9b 	bl	d67d0 <_ZN8SPIClass5beginEv>
    }
   d529a:	e7d5      	b.n	d5248 <_ZN15Adafruit_BME2804initEv+0x14>
            pinMode(_sck, OUTPUT);
   d529c:	2101      	movs	r1, #1
   d529e:	b280      	uxth	r0, r0
   d52a0:	f001 fbf0 	bl	d6a84 <pinMode>
            pinMode(_mosi, OUTPUT);
   d52a4:	f994 0011 	ldrsb.w	r0, [r4, #17]
   d52a8:	2101      	movs	r1, #1
   d52aa:	b280      	uxth	r0, r0
   d52ac:	f001 fbea 	bl	d6a84 <pinMode>
            pinMode(_miso, INPUT);
   d52b0:	f994 0012 	ldrsb.w	r0, [r4, #18]
   d52b4:	2100      	movs	r1, #0
   d52b6:	b280      	uxth	r0, r0
   d52b8:	f001 fbe4 	bl	d6a84 <pinMode>
   d52bc:	e7c4      	b.n	d5248 <_ZN15Adafruit_BME2804initEv+0x14>
    readCoefficients(); // read trimming parameters, see DS 4.2.2
   d52be:	4620      	mov	r0, r4
   d52c0:	f7ff feb1 	bl	d5026 <_ZN15Adafruit_BME28016readCoefficientsEv>
    setSampling(); // use defaults
   d52c4:	2305      	movs	r3, #5
   d52c6:	9300      	str	r3, [sp, #0]
   d52c8:	461a      	mov	r2, r3
   d52ca:	2103      	movs	r1, #3
   d52cc:	4620      	mov	r0, r4
   d52ce:	e9cd 5501 	strd	r5, r5, [sp, #4]
   d52d2:	f7ff ff65 	bl	d51a0 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>
    delay(100);
   d52d6:	2064      	movs	r0, #100	; 0x64
   d52d8:	f001 f8ec 	bl	d64b4 <delay>
   d52dc:	2001      	movs	r0, #1
}
   d52de:	b005      	add	sp, #20
   d52e0:	bd30      	pop	{r4, r5, pc}
        return false;
   d52e2:	2000      	movs	r0, #0
   d52e4:	e7fb      	b.n	d52de <_ZN15Adafruit_BME2804initEv+0xaa>

000d52e6 <_ZN15Adafruit_BME2805beginEv>:
    _i2caddr = BME280_ADDRESS;
   d52e6:	2377      	movs	r3, #119	; 0x77
{
   d52e8:	b510      	push	{r4, lr}
    _i2caddr = BME280_ADDRESS;
   d52ea:	7103      	strb	r3, [r0, #4]
{
   d52ec:	4604      	mov	r4, r0
	_wire = &Wire;
   d52ee:	f001 fb63 	bl	d69b8 <_Z19__fetch_global_Wirev>
   d52f2:	6020      	str	r0, [r4, #0]
	status = init();
   d52f4:	4620      	mov	r0, r4
   d52f6:	f7ff ff9d 	bl	d5234 <_ZN15Adafruit_BME2804initEv>
 	if(!status){
   d52fa:	b930      	cbnz	r0, d530a <_ZN15Adafruit_BME2805beginEv+0x24>
 		_i2caddr = BME280_ADDRESS_ALTERNATE;
   d52fc:	2376      	movs	r3, #118	; 0x76
   d52fe:	7123      	strb	r3, [r4, #4]
 		status = init();
   d5300:	4620      	mov	r0, r4
}
   d5302:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 		status = init();
   d5306:	f7ff bf95 	b.w	d5234 <_ZN15Adafruit_BME2804initEv>
}
   d530a:	bd10      	pop	{r4, pc}

000d530c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d530c:	b508      	push	{r3, lr}
   d530e:	4b02      	ldr	r3, [pc, #8]	; (d5318 <HAL_USB_USART_Init+0xc>)
   d5310:	681b      	ldr	r3, [r3, #0]
   d5312:	681b      	ldr	r3, [r3, #0]
   d5314:	9301      	str	r3, [sp, #4]
   d5316:	bd08      	pop	{r3, pc}
   d5318:	0003024c 	.word	0x0003024c

000d531c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d531c:	b508      	push	{r3, lr}
   d531e:	4b02      	ldr	r3, [pc, #8]	; (d5328 <HAL_USB_USART_Begin+0xc>)
   d5320:	681b      	ldr	r3, [r3, #0]
   d5322:	685b      	ldr	r3, [r3, #4]
   d5324:	9301      	str	r3, [sp, #4]
   d5326:	bd08      	pop	{r3, pc}
   d5328:	0003024c 	.word	0x0003024c

000d532c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d532c:	b508      	push	{r3, lr}
   d532e:	4b02      	ldr	r3, [pc, #8]	; (d5338 <HAL_USB_USART_Available_Data+0xc>)
   d5330:	681b      	ldr	r3, [r3, #0]
   d5332:	691b      	ldr	r3, [r3, #16]
   d5334:	9301      	str	r3, [sp, #4]
   d5336:	bd08      	pop	{r3, pc}
   d5338:	0003024c 	.word	0x0003024c

000d533c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d533c:	b508      	push	{r3, lr}
   d533e:	4b02      	ldr	r3, [pc, #8]	; (d5348 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d5340:	681b      	ldr	r3, [r3, #0]
   d5342:	695b      	ldr	r3, [r3, #20]
   d5344:	9301      	str	r3, [sp, #4]
   d5346:	bd08      	pop	{r3, pc}
   d5348:	0003024c 	.word	0x0003024c

000d534c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d534c:	b508      	push	{r3, lr}
   d534e:	4b02      	ldr	r3, [pc, #8]	; (d5358 <HAL_USB_USART_Receive_Data+0xc>)
   d5350:	681b      	ldr	r3, [r3, #0]
   d5352:	699b      	ldr	r3, [r3, #24]
   d5354:	9301      	str	r3, [sp, #4]
   d5356:	bd08      	pop	{r3, pc}
   d5358:	0003024c 	.word	0x0003024c

000d535c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d535c:	b508      	push	{r3, lr}
   d535e:	4b02      	ldr	r3, [pc, #8]	; (d5368 <HAL_USB_USART_Send_Data+0xc>)
   d5360:	681b      	ldr	r3, [r3, #0]
   d5362:	69db      	ldr	r3, [r3, #28]
   d5364:	9301      	str	r3, [sp, #4]
   d5366:	bd08      	pop	{r3, pc}
   d5368:	0003024c 	.word	0x0003024c

000d536c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d536c:	b508      	push	{r3, lr}
   d536e:	4b02      	ldr	r3, [pc, #8]	; (d5378 <HAL_USB_USART_Flush_Data+0xc>)
   d5370:	681b      	ldr	r3, [r3, #0]
   d5372:	6a1b      	ldr	r3, [r3, #32]
   d5374:	9301      	str	r3, [sp, #4]
   d5376:	bd08      	pop	{r3, pc}
   d5378:	0003024c 	.word	0x0003024c

000d537c <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d537c:	b508      	push	{r3, lr}
   d537e:	4b02      	ldr	r3, [pc, #8]	; (d5388 <hal_i2c_begin+0xc>)
   d5380:	681b      	ldr	r3, [r3, #0]
   d5382:	68db      	ldr	r3, [r3, #12]
   d5384:	9301      	str	r3, [sp, #4]
   d5386:	bd08      	pop	{r3, pc}
   d5388:	00030228 	.word	0x00030228

000d538c <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d538c:	b508      	push	{r3, lr}
   d538e:	4b02      	ldr	r3, [pc, #8]	; (d5398 <hal_i2c_begin_transmission+0xc>)
   d5390:	681b      	ldr	r3, [r3, #0]
   d5392:	699b      	ldr	r3, [r3, #24]
   d5394:	9301      	str	r3, [sp, #4]
   d5396:	bd08      	pop	{r3, pc}
   d5398:	00030228 	.word	0x00030228

000d539c <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d539c:	b508      	push	{r3, lr}
   d539e:	4b02      	ldr	r3, [pc, #8]	; (d53a8 <hal_i2c_end_transmission+0xc>)
   d53a0:	681b      	ldr	r3, [r3, #0]
   d53a2:	69db      	ldr	r3, [r3, #28]
   d53a4:	9301      	str	r3, [sp, #4]
   d53a6:	bd08      	pop	{r3, pc}
   d53a8:	00030228 	.word	0x00030228

000d53ac <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d53ac:	b508      	push	{r3, lr}
   d53ae:	4b02      	ldr	r3, [pc, #8]	; (d53b8 <hal_i2c_write+0xc>)
   d53b0:	681b      	ldr	r3, [r3, #0]
   d53b2:	6a1b      	ldr	r3, [r3, #32]
   d53b4:	9301      	str	r3, [sp, #4]
   d53b6:	bd08      	pop	{r3, pc}
   d53b8:	00030228 	.word	0x00030228

000d53bc <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d53bc:	b508      	push	{r3, lr}
   d53be:	4b02      	ldr	r3, [pc, #8]	; (d53c8 <hal_i2c_available+0xc>)
   d53c0:	681b      	ldr	r3, [r3, #0]
   d53c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d53c4:	9301      	str	r3, [sp, #4]
   d53c6:	bd08      	pop	{r3, pc}
   d53c8:	00030228 	.word	0x00030228

000d53cc <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d53cc:	b508      	push	{r3, lr}
   d53ce:	4b02      	ldr	r3, [pc, #8]	; (d53d8 <hal_i2c_read+0xc>)
   d53d0:	681b      	ldr	r3, [r3, #0]
   d53d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d53d4:	9301      	str	r3, [sp, #4]
   d53d6:	bd08      	pop	{r3, pc}
   d53d8:	00030228 	.word	0x00030228

000d53dc <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d53dc:	b508      	push	{r3, lr}
   d53de:	4b02      	ldr	r3, [pc, #8]	; (d53e8 <hal_i2c_peek+0xc>)
   d53e0:	681b      	ldr	r3, [r3, #0]
   d53e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d53e4:	9301      	str	r3, [sp, #4]
   d53e6:	bd08      	pop	{r3, pc}
   d53e8:	00030228 	.word	0x00030228

000d53ec <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d53ec:	b508      	push	{r3, lr}
   d53ee:	4b02      	ldr	r3, [pc, #8]	; (d53f8 <hal_i2c_flush+0xc>)
   d53f0:	681b      	ldr	r3, [r3, #0]
   d53f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d53f4:	9301      	str	r3, [sp, #4]
   d53f6:	bd08      	pop	{r3, pc}
   d53f8:	00030228 	.word	0x00030228

000d53fc <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d53fc:	b508      	push	{r3, lr}
   d53fe:	4b02      	ldr	r3, [pc, #8]	; (d5408 <hal_i2c_is_enabled+0xc>)
   d5400:	681b      	ldr	r3, [r3, #0]
   d5402:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5404:	9301      	str	r3, [sp, #4]
   d5406:	bd08      	pop	{r3, pc}
   d5408:	00030228 	.word	0x00030228

000d540c <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d540c:	b508      	push	{r3, lr}
   d540e:	4b02      	ldr	r3, [pc, #8]	; (d5418 <hal_i2c_init+0xc>)
   d5410:	681b      	ldr	r3, [r3, #0]
   d5412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5414:	9301      	str	r3, [sp, #4]
   d5416:	bd08      	pop	{r3, pc}
   d5418:	00030228 	.word	0x00030228

000d541c <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   d541c:	b508      	push	{r3, lr}
   d541e:	4b02      	ldr	r3, [pc, #8]	; (d5428 <hal_i2c_request_ex+0xc>)
   d5420:	681b      	ldr	r3, [r3, #0]
   d5422:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d5424:	9301      	str	r3, [sp, #4]
   d5426:	bd08      	pop	{r3, pc}
   d5428:	00030228 	.word	0x00030228

000d542c <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   d542c:	b508      	push	{r3, lr}
   d542e:	4b02      	ldr	r3, [pc, #8]	; (d5438 <hal_spi_begin+0xc>)
   d5430:	681b      	ldr	r3, [r3, #0]
   d5432:	681b      	ldr	r3, [r3, #0]
   d5434:	9301      	str	r3, [sp, #4]
   d5436:	bd08      	pop	{r3, pc}
   d5438:	00030230 	.word	0x00030230

000d543c <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   d543c:	b508      	push	{r3, lr}
   d543e:	4b02      	ldr	r3, [pc, #8]	; (d5448 <hal_spi_transfer+0xc>)
   d5440:	681b      	ldr	r3, [r3, #0]
   d5442:	695b      	ldr	r3, [r3, #20]
   d5444:	9301      	str	r3, [sp, #4]
   d5446:	bd08      	pop	{r3, pc}
   d5448:	00030230 	.word	0x00030230

000d544c <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d544c:	b508      	push	{r3, lr}
   d544e:	4b02      	ldr	r3, [pc, #8]	; (d5458 <hal_spi_init+0xc>)
   d5450:	681b      	ldr	r3, [r3, #0]
   d5452:	69db      	ldr	r3, [r3, #28]
   d5454:	9301      	str	r3, [sp, #4]
   d5456:	bd08      	pop	{r3, pc}
   d5458:	00030230 	.word	0x00030230

000d545c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d545c:	b508      	push	{r3, lr}
   d545e:	4b02      	ldr	r3, [pc, #8]	; (d5468 <hal_spi_is_enabled+0xc>)
   d5460:	681b      	ldr	r3, [r3, #0]
   d5462:	6a1b      	ldr	r3, [r3, #32]
   d5464:	9301      	str	r3, [sp, #4]
   d5466:	bd08      	pop	{r3, pc}
   d5468:	00030230 	.word	0x00030230

000d546c <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   d546c:	b508      	push	{r3, lr}
   d546e:	4b02      	ldr	r3, [pc, #8]	; (d5478 <hal_spi_info+0xc>)
   d5470:	681b      	ldr	r3, [r3, #0]
   d5472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5474:	9301      	str	r3, [sp, #4]
   d5476:	bd08      	pop	{r3, pc}
   d5478:	00030230 	.word	0x00030230

000d547c <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d547c:	b508      	push	{r3, lr}
   d547e:	4b02      	ldr	r3, [pc, #8]	; (d5488 <hal_spi_set_settings+0xc>)
   d5480:	681b      	ldr	r3, [r3, #0]
   d5482:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5484:	9301      	str	r3, [sp, #4]
   d5486:	bd08      	pop	{r3, pc}
   d5488:	00030230 	.word	0x00030230

000d548c <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   d548c:	b508      	push	{r3, lr}
   d548e:	4b02      	ldr	r3, [pc, #8]	; (d5498 <hal_spi_acquire+0xc>)
   d5490:	681b      	ldr	r3, [r3, #0]
   d5492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5494:	9301      	str	r3, [sp, #4]
   d5496:	bd08      	pop	{r3, pc}
   d5498:	00030230 	.word	0x00030230

000d549c <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   d549c:	b508      	push	{r3, lr}
   d549e:	4b02      	ldr	r3, [pc, #8]	; (d54a8 <hal_spi_release+0xc>)
   d54a0:	681b      	ldr	r3, [r3, #0]
   d54a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d54a4:	9301      	str	r3, [sp, #4]
   d54a6:	bd08      	pop	{r3, pc}
   d54a8:	00030230 	.word	0x00030230

000d54ac <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d54ac:	b508      	push	{r3, lr}
   d54ae:	4b02      	ldr	r3, [pc, #8]	; (d54b8 <hal_usart_init+0xc>)
   d54b0:	681b      	ldr	r3, [r3, #0]
   d54b2:	681b      	ldr	r3, [r3, #0]
   d54b4:	9301      	str	r3, [sp, #4]
   d54b6:	bd08      	pop	{r3, pc}
   d54b8:	0003023c 	.word	0x0003023c

000d54bc <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d54bc:	b508      	push	{r3, lr}
   d54be:	4b02      	ldr	r3, [pc, #8]	; (d54c8 <hal_usart_write+0xc>)
   d54c0:	681b      	ldr	r3, [r3, #0]
   d54c2:	68db      	ldr	r3, [r3, #12]
   d54c4:	9301      	str	r3, [sp, #4]
   d54c6:	bd08      	pop	{r3, pc}
   d54c8:	0003023c 	.word	0x0003023c

000d54cc <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d54cc:	b508      	push	{r3, lr}
   d54ce:	4b02      	ldr	r3, [pc, #8]	; (d54d8 <hal_usart_available+0xc>)
   d54d0:	681b      	ldr	r3, [r3, #0]
   d54d2:	691b      	ldr	r3, [r3, #16]
   d54d4:	9301      	str	r3, [sp, #4]
   d54d6:	bd08      	pop	{r3, pc}
   d54d8:	0003023c 	.word	0x0003023c

000d54dc <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d54dc:	b508      	push	{r3, lr}
   d54de:	4b02      	ldr	r3, [pc, #8]	; (d54e8 <hal_usart_read+0xc>)
   d54e0:	681b      	ldr	r3, [r3, #0]
   d54e2:	695b      	ldr	r3, [r3, #20]
   d54e4:	9301      	str	r3, [sp, #4]
   d54e6:	bd08      	pop	{r3, pc}
   d54e8:	0003023c 	.word	0x0003023c

000d54ec <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d54ec:	b508      	push	{r3, lr}
   d54ee:	4b02      	ldr	r3, [pc, #8]	; (d54f8 <hal_usart_peek+0xc>)
   d54f0:	681b      	ldr	r3, [r3, #0]
   d54f2:	699b      	ldr	r3, [r3, #24]
   d54f4:	9301      	str	r3, [sp, #4]
   d54f6:	bd08      	pop	{r3, pc}
   d54f8:	0003023c 	.word	0x0003023c

000d54fc <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d54fc:	b508      	push	{r3, lr}
   d54fe:	4b02      	ldr	r3, [pc, #8]	; (d5508 <hal_usart_flush+0xc>)
   d5500:	681b      	ldr	r3, [r3, #0]
   d5502:	69db      	ldr	r3, [r3, #28]
   d5504:	9301      	str	r3, [sp, #4]
   d5506:	bd08      	pop	{r3, pc}
   d5508:	0003023c 	.word	0x0003023c

000d550c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d550c:	b508      	push	{r3, lr}
   d550e:	4b02      	ldr	r3, [pc, #8]	; (d5518 <hal_usart_is_enabled+0xc>)
   d5510:	681b      	ldr	r3, [r3, #0]
   d5512:	6a1b      	ldr	r3, [r3, #32]
   d5514:	9301      	str	r3, [sp, #4]
   d5516:	bd08      	pop	{r3, pc}
   d5518:	0003023c 	.word	0x0003023c

000d551c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d551c:	b508      	push	{r3, lr}
   d551e:	4b02      	ldr	r3, [pc, #8]	; (d5528 <hal_usart_available_data_for_write+0xc>)
   d5520:	681b      	ldr	r3, [r3, #0]
   d5522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5524:	9301      	str	r3, [sp, #4]
   d5526:	bd08      	pop	{r3, pc}
   d5528:	0003023c 	.word	0x0003023c

000d552c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d552c:	b508      	push	{r3, lr}
   d552e:	4b02      	ldr	r3, [pc, #8]	; (d5538 <inet_inet_ntop+0xc>)
   d5530:	681b      	ldr	r3, [r3, #0]
   d5532:	695b      	ldr	r3, [r3, #20]
   d5534:	9301      	str	r3, [sp, #4]
   d5536:	bd08      	pop	{r3, pc}
   d5538:	00030264 	.word	0x00030264

000d553c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d553c:	b508      	push	{r3, lr}
   d553e:	4b02      	ldr	r3, [pc, #8]	; (d5548 <os_mutex_recursive_create+0xc>)
   d5540:	681b      	ldr	r3, [r3, #0]
   d5542:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5544:	9301      	str	r3, [sp, #4]
   d5546:	bd08      	pop	{r3, pc}
   d5548:	00030248 	.word	0x00030248

000d554c <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d554c:	b508      	push	{r3, lr}
   d554e:	4b02      	ldr	r3, [pc, #8]	; (d5558 <os_mutex_recursive_destroy+0xc>)
   d5550:	681b      	ldr	r3, [r3, #0]
   d5552:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5554:	9301      	str	r3, [sp, #4]
   d5556:	bd08      	pop	{r3, pc}
   d5558:	00030248 	.word	0x00030248

000d555c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d555c:	b508      	push	{r3, lr}
   d555e:	4b02      	ldr	r3, [pc, #8]	; (d5568 <HAL_RNG_GetRandomNumber+0xc>)
   d5560:	681b      	ldr	r3, [r3, #0]
   d5562:	685b      	ldr	r3, [r3, #4]
   d5564:	9301      	str	r3, [sp, #4]
   d5566:	bd08      	pop	{r3, pc}
   d5568:	00030218 	.word	0x00030218

000d556c <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d556c:	b508      	push	{r3, lr}
   d556e:	4b02      	ldr	r3, [pc, #8]	; (d5578 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d5570:	681b      	ldr	r3, [r3, #0]
   d5572:	695b      	ldr	r3, [r3, #20]
   d5574:	9301      	str	r3, [sp, #4]
   d5576:	bd08      	pop	{r3, pc}
   d5578:	00030218 	.word	0x00030218

000d557c <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d557c:	b508      	push	{r3, lr}
   d557e:	4b02      	ldr	r3, [pc, #8]	; (d5588 <HAL_Validate_Pin_Function+0xc>)
   d5580:	681b      	ldr	r3, [r3, #0]
   d5582:	685b      	ldr	r3, [r3, #4]
   d5584:	9301      	str	r3, [sp, #4]
   d5586:	bd08      	pop	{r3, pc}
   d5588:	0003022c 	.word	0x0003022c

000d558c <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d558c:	b508      	push	{r3, lr}
   d558e:	4b02      	ldr	r3, [pc, #8]	; (d5598 <HAL_Pin_Mode+0xc>)
   d5590:	681b      	ldr	r3, [r3, #0]
   d5592:	689b      	ldr	r3, [r3, #8]
   d5594:	9301      	str	r3, [sp, #4]
   d5596:	bd08      	pop	{r3, pc}
   d5598:	0003022c 	.word	0x0003022c

000d559c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d559c:	b508      	push	{r3, lr}
   d559e:	4b02      	ldr	r3, [pc, #8]	; (d55a8 <HAL_Get_Pin_Mode+0xc>)
   d55a0:	681b      	ldr	r3, [r3, #0]
   d55a2:	68db      	ldr	r3, [r3, #12]
   d55a4:	9301      	str	r3, [sp, #4]
   d55a6:	bd08      	pop	{r3, pc}
   d55a8:	0003022c 	.word	0x0003022c

000d55ac <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d55ac:	b508      	push	{r3, lr}
   d55ae:	4b02      	ldr	r3, [pc, #8]	; (d55b8 <HAL_GPIO_Write+0xc>)
   d55b0:	681b      	ldr	r3, [r3, #0]
   d55b2:	691b      	ldr	r3, [r3, #16]
   d55b4:	9301      	str	r3, [sp, #4]
   d55b6:	bd08      	pop	{r3, pc}
   d55b8:	0003022c 	.word	0x0003022c

000d55bc <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d55bc:	b508      	push	{r3, lr}
   d55be:	4b02      	ldr	r3, [pc, #8]	; (d55c8 <HAL_GPIO_Read+0xc>)
   d55c0:	681b      	ldr	r3, [r3, #0]
   d55c2:	695b      	ldr	r3, [r3, #20]
   d55c4:	9301      	str	r3, [sp, #4]
   d55c6:	bd08      	pop	{r3, pc}
   d55c8:	0003022c 	.word	0x0003022c

000d55cc <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   d55cc:	b508      	push	{r3, lr}
   d55ce:	4b02      	ldr	r3, [pc, #8]	; (d55d8 <hal_adc_read+0xc>)
   d55d0:	681b      	ldr	r3, [r3, #0]
   d55d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d55d4:	9301      	str	r3, [sp, #4]
   d55d6:	bd08      	pop	{r3, pc}
   d55d8:	0003022c 	.word	0x0003022c

000d55dc <HAL_Pulse_In>:

DYNALIB_FN(16, hal_gpio, HAL_Set_System_Interrupt_Handler, uint8_t(hal_irq_t, const HAL_InterruptCallback*, HAL_InterruptCallback*, void*))
DYNALIB_FN(17, hal_gpio, HAL_Get_System_Interrupt_Handler, uint8_t(hal_irq_t, HAL_InterruptCallback*, void*))
DYNALIB_FN(18, hal_gpio, HAL_System_Interrupt_Trigger, void(hal_irq_t, void*))

DYNALIB_FN(19, hal_gpio, HAL_Pulse_In, uint32_t(pin_t, uint16_t))
   d55dc:	b508      	push	{r3, lr}
   d55de:	4b02      	ldr	r3, [pc, #8]	; (d55e8 <HAL_Pulse_In+0xc>)
   d55e0:	681b      	ldr	r3, [r3, #0]
   d55e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d55e4:	9301      	str	r3, [sp, #4]
   d55e6:	bd08      	pop	{r3, pc}
   d55e8:	0003022c 	.word	0x0003022c

000d55ec <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d55ec:	b508      	push	{r3, lr}
   d55ee:	4b02      	ldr	r3, [pc, #8]	; (d55f8 <netdb_freeaddrinfo+0xc>)
   d55f0:	681b      	ldr	r3, [r3, #0]
   d55f2:	689b      	ldr	r3, [r3, #8]
   d55f4:	9301      	str	r3, [sp, #4]
   d55f6:	bd08      	pop	{r3, pc}
   d55f8:	00030268 	.word	0x00030268

000d55fc <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d55fc:	b508      	push	{r3, lr}
   d55fe:	4b02      	ldr	r3, [pc, #8]	; (d5608 <netdb_getaddrinfo+0xc>)
   d5600:	681b      	ldr	r3, [r3, #0]
   d5602:	68db      	ldr	r3, [r3, #12]
   d5604:	9301      	str	r3, [sp, #4]
   d5606:	bd08      	pop	{r3, pc}
   d5608:	00030268 	.word	0x00030268

000d560c <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d560c:	b508      	push	{r3, lr}
   d560e:	4b02      	ldr	r3, [pc, #8]	; (d5618 <spark_cloud_flag_connected+0xc>)
   d5610:	681b      	ldr	r3, [r3, #0]
   d5612:	695b      	ldr	r3, [r3, #20]
   d5614:	9301      	str	r3, [sp, #4]
   d5616:	bd08      	pop	{r3, pc}
   d5618:	00030244 	.word	0x00030244

000d561c <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d561c:	b508      	push	{r3, lr}
   d561e:	4b02      	ldr	r3, [pc, #8]	; (d5628 <spark_send_event+0xc>)
   d5620:	681b      	ldr	r3, [r3, #0]
   d5622:	6a1b      	ldr	r3, [r3, #32]
   d5624:	9301      	str	r3, [sp, #4]
   d5626:	bd08      	pop	{r3, pc}
   d5628:	00030244 	.word	0x00030244

000d562c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d562c:	b508      	push	{r3, lr}
   d562e:	4b02      	ldr	r3, [pc, #8]	; (d5638 <spark_set_random_seed_from_cloud_handler+0xc>)
   d5630:	681b      	ldr	r3, [r3, #0]
   d5632:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5634:	9301      	str	r3, [sp, #4]
   d5636:	bd08      	pop	{r3, pc}
   d5638:	00030244 	.word	0x00030244

000d563c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d563c:	b508      	push	{r3, lr}
   d563e:	4b02      	ldr	r3, [pc, #8]	; (d5648 <network_connect+0xc>)
   d5640:	681b      	ldr	r3, [r3, #0]
   d5642:	685b      	ldr	r3, [r3, #4]
   d5644:	9301      	str	r3, [sp, #4]
   d5646:	bd08      	pop	{r3, pc}
   d5648:	00030240 	.word	0x00030240

000d564c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d564c:	b508      	push	{r3, lr}
   d564e:	4b02      	ldr	r3, [pc, #8]	; (d5658 <network_connecting+0xc>)
   d5650:	681b      	ldr	r3, [r3, #0]
   d5652:	689b      	ldr	r3, [r3, #8]
   d5654:	9301      	str	r3, [sp, #4]
   d5656:	bd08      	pop	{r3, pc}
   d5658:	00030240 	.word	0x00030240

000d565c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d565c:	b508      	push	{r3, lr}
   d565e:	4b02      	ldr	r3, [pc, #8]	; (d5668 <network_disconnect+0xc>)
   d5660:	681b      	ldr	r3, [r3, #0]
   d5662:	68db      	ldr	r3, [r3, #12]
   d5664:	9301      	str	r3, [sp, #4]
   d5666:	bd08      	pop	{r3, pc}
   d5668:	00030240 	.word	0x00030240

000d566c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d566c:	b508      	push	{r3, lr}
   d566e:	4b02      	ldr	r3, [pc, #8]	; (d5678 <network_ready+0xc>)
   d5670:	681b      	ldr	r3, [r3, #0]
   d5672:	691b      	ldr	r3, [r3, #16]
   d5674:	9301      	str	r3, [sp, #4]
   d5676:	bd08      	pop	{r3, pc}
   d5678:	00030240 	.word	0x00030240

000d567c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d567c:	b508      	push	{r3, lr}
   d567e:	4b02      	ldr	r3, [pc, #8]	; (d5688 <network_on+0xc>)
   d5680:	681b      	ldr	r3, [r3, #0]
   d5682:	695b      	ldr	r3, [r3, #20]
   d5684:	9301      	str	r3, [sp, #4]
   d5686:	bd08      	pop	{r3, pc}
   d5688:	00030240 	.word	0x00030240

000d568c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d568c:	b508      	push	{r3, lr}
   d568e:	4b02      	ldr	r3, [pc, #8]	; (d5698 <network_off+0xc>)
   d5690:	681b      	ldr	r3, [r3, #0]
   d5692:	699b      	ldr	r3, [r3, #24]
   d5694:	9301      	str	r3, [sp, #4]
   d5696:	bd08      	pop	{r3, pc}
   d5698:	00030240 	.word	0x00030240

000d569c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d569c:	b508      	push	{r3, lr}
   d569e:	4b02      	ldr	r3, [pc, #8]	; (d56a8 <network_listen+0xc>)
   d56a0:	681b      	ldr	r3, [r3, #0]
   d56a2:	69db      	ldr	r3, [r3, #28]
   d56a4:	9301      	str	r3, [sp, #4]
   d56a6:	bd08      	pop	{r3, pc}
   d56a8:	00030240 	.word	0x00030240

000d56ac <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d56ac:	b508      	push	{r3, lr}
   d56ae:	4b02      	ldr	r3, [pc, #8]	; (d56b8 <network_listening+0xc>)
   d56b0:	681b      	ldr	r3, [r3, #0]
   d56b2:	6a1b      	ldr	r3, [r3, #32]
   d56b4:	9301      	str	r3, [sp, #4]
   d56b6:	bd08      	pop	{r3, pc}
   d56b8:	00030240 	.word	0x00030240

000d56bc <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d56bc:	b508      	push	{r3, lr}
   d56be:	4b02      	ldr	r3, [pc, #8]	; (d56c8 <network_set_listen_timeout+0xc>)
   d56c0:	681b      	ldr	r3, [r3, #0]
   d56c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d56c4:	9301      	str	r3, [sp, #4]
   d56c6:	bd08      	pop	{r3, pc}
   d56c8:	00030240 	.word	0x00030240

000d56cc <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d56cc:	b508      	push	{r3, lr}
   d56ce:	4b02      	ldr	r3, [pc, #8]	; (d56d8 <network_get_listen_timeout+0xc>)
   d56d0:	681b      	ldr	r3, [r3, #0]
   d56d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d56d4:	9301      	str	r3, [sp, #4]
   d56d6:	bd08      	pop	{r3, pc}
   d56d8:	00030240 	.word	0x00030240

000d56dc <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d56dc:	b508      	push	{r3, lr}
   d56de:	4b02      	ldr	r3, [pc, #8]	; (d56e8 <set_system_mode+0xc>)
   d56e0:	681b      	ldr	r3, [r3, #0]
   d56e2:	685b      	ldr	r3, [r3, #4]
   d56e4:	9301      	str	r3, [sp, #4]
   d56e6:	bd08      	pop	{r3, pc}
   d56e8:	00030220 	.word	0x00030220

000d56ec <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d56ec:	b508      	push	{r3, lr}
   d56ee:	4b02      	ldr	r3, [pc, #8]	; (d56f8 <system_delay_ms+0xc>)
   d56f0:	681b      	ldr	r3, [r3, #0]
   d56f2:	695b      	ldr	r3, [r3, #20]
   d56f4:	9301      	str	r3, [sp, #4]
   d56f6:	bd08      	pop	{r3, pc}
   d56f8:	00030220 	.word	0x00030220

000d56fc <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d56fc:	b508      	push	{r3, lr}
   d56fe:	4b02      	ldr	r3, [pc, #8]	; (d5708 <system_thread_set_state+0xc>)
   d5700:	681b      	ldr	r3, [r3, #0]
   d5702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5704:	9301      	str	r3, [sp, #4]
   d5706:	bd08      	pop	{r3, pc}
   d5708:	00030220 	.word	0x00030220

000d570c <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d570c:	b508      	push	{r3, lr}
   d570e:	4b02      	ldr	r3, [pc, #8]	; (d5718 <application_thread_current+0xc>)
   d5710:	681b      	ldr	r3, [r3, #0]
   d5712:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d5714:	9301      	str	r3, [sp, #4]
   d5716:	bd08      	pop	{r3, pc}
   d5718:	00030220 	.word	0x00030220

000d571c <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d571c:	b508      	push	{r3, lr}
   d571e:	4b02      	ldr	r3, [pc, #8]	; (d5728 <application_thread_invoke+0xc>)
   d5720:	681b      	ldr	r3, [r3, #0]
   d5722:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d5724:	9301      	str	r3, [sp, #4]
   d5726:	bd08      	pop	{r3, pc}
   d5728:	00030220 	.word	0x00030220

000d572c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d572c:	b508      	push	{r3, lr}
   d572e:	4b03      	ldr	r3, [pc, #12]	; (d573c <system_ctrl_set_app_request_handler+0x10>)
   d5730:	681b      	ldr	r3, [r3, #0]
   d5732:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d5736:	9301      	str	r3, [sp, #4]
   d5738:	bd08      	pop	{r3, pc}
   d573a:	0000      	.short	0x0000
   d573c:	00030220 	.word	0x00030220

000d5740 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d5740:	b508      	push	{r3, lr}
   d5742:	4b03      	ldr	r3, [pc, #12]	; (d5750 <system_ctrl_set_result+0x10>)
   d5744:	681b      	ldr	r3, [r3, #0]
   d5746:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d574a:	9301      	str	r3, [sp, #4]
   d574c:	bd08      	pop	{r3, pc}
   d574e:	0000      	.short	0x0000
   d5750:	00030220 	.word	0x00030220

000d5754 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d5754:	b508      	push	{r3, lr}
   d5756:	4b02      	ldr	r3, [pc, #8]	; (d5760 <malloc+0xc>)
   d5758:	681b      	ldr	r3, [r3, #0]
   d575a:	681b      	ldr	r3, [r3, #0]
   d575c:	9301      	str	r3, [sp, #4]
   d575e:	bd08      	pop	{r3, pc}
   d5760:	0003021c 	.word	0x0003021c

000d5764 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d5764:	b508      	push	{r3, lr}
   d5766:	4b02      	ldr	r3, [pc, #8]	; (d5770 <free+0xc>)
   d5768:	681b      	ldr	r3, [r3, #0]
   d576a:	685b      	ldr	r3, [r3, #4]
   d576c:	9301      	str	r3, [sp, #4]
   d576e:	bd08      	pop	{r3, pc}
   d5770:	0003021c 	.word	0x0003021c

000d5774 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d5774:	b508      	push	{r3, lr}
   d5776:	4b02      	ldr	r3, [pc, #8]	; (d5780 <realloc+0xc>)
   d5778:	681b      	ldr	r3, [r3, #0]
   d577a:	689b      	ldr	r3, [r3, #8]
   d577c:	9301      	str	r3, [sp, #4]
   d577e:	bd08      	pop	{r3, pc}
   d5780:	0003021c 	.word	0x0003021c

000d5784 <snprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d5784:	b508      	push	{r3, lr}
   d5786:	4b02      	ldr	r3, [pc, #8]	; (d5790 <snprintf+0xc>)
   d5788:	681b      	ldr	r3, [r3, #0]
   d578a:	69db      	ldr	r3, [r3, #28]
   d578c:	9301      	str	r3, [sp, #4]
   d578e:	bd08      	pop	{r3, pc}
   d5790:	0003021c 	.word	0x0003021c

000d5794 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d5794:	b508      	push	{r3, lr}
   d5796:	4b02      	ldr	r3, [pc, #8]	; (d57a0 <vsnprintf+0xc>)
   d5798:	681b      	ldr	r3, [r3, #0]
   d579a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d579c:	9301      	str	r3, [sp, #4]
   d579e:	bd08      	pop	{r3, pc}
   d57a0:	0003021c 	.word	0x0003021c

000d57a4 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d57a4:	b508      	push	{r3, lr}
   d57a6:	4b02      	ldr	r3, [pc, #8]	; (d57b0 <abort+0xc>)
   d57a8:	681b      	ldr	r3, [r3, #0]
   d57aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d57ac:	9301      	str	r3, [sp, #4]
   d57ae:	bd08      	pop	{r3, pc}
   d57b0:	0003021c 	.word	0x0003021c

000d57b4 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d57b4:	b508      	push	{r3, lr}
   d57b6:	4b02      	ldr	r3, [pc, #8]	; (d57c0 <_malloc_r+0xc>)
   d57b8:	681b      	ldr	r3, [r3, #0]
   d57ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d57bc:	9301      	str	r3, [sp, #4]
   d57be:	bd08      	pop	{r3, pc}
   d57c0:	0003021c 	.word	0x0003021c

000d57c4 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d57c4:	b508      	push	{r3, lr}
   d57c6:	4b02      	ldr	r3, [pc, #8]	; (d57d0 <__errno+0xc>)
   d57c8:	681b      	ldr	r3, [r3, #0]
   d57ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d57cc:	9301      	str	r3, [sp, #4]
   d57ce:	bd08      	pop	{r3, pc}
   d57d0:	0003021c 	.word	0x0003021c

000d57d4 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d57d4:	b508      	push	{r3, lr}
   d57d6:	4b02      	ldr	r3, [pc, #8]	; (d57e0 <newlib_impure_ptr_callback+0xc>)
   d57d8:	681b      	ldr	r3, [r3, #0]
   d57da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d57dc:	9301      	str	r3, [sp, #4]
   d57de:	bd08      	pop	{r3, pc}
   d57e0:	0003021c 	.word	0x0003021c

000d57e4 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d57e4:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d57e6:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d57e8:	4604      	mov	r4, r0
      if (_M_manager)
   d57ea:	b113      	cbz	r3, d57f2 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d57ec:	2203      	movs	r2, #3
   d57ee:	4601      	mov	r1, r0
   d57f0:	4798      	blx	r3
    }
   d57f2:	4620      	mov	r0, r4
   d57f4:	bd10      	pop	{r4, pc}

000d57f6 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d57f6:	2300      	movs	r3, #0
   d57f8:	6840      	ldr	r0, [r0, #4]
   d57fa:	461a      	mov	r2, r3
   d57fc:	f7ff bf1e 	b.w	d563c <network_connect>

000d5800 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d5800:	6840      	ldr	r0, [r0, #4]
   d5802:	2200      	movs	r2, #0
   d5804:	2102      	movs	r1, #2
   d5806:	f7ff bf29 	b.w	d565c <network_disconnect>

000d580a <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d580a:	2200      	movs	r2, #0
   d580c:	6840      	ldr	r0, [r0, #4]
   d580e:	4611      	mov	r1, r2
   d5810:	f7ff bf1c 	b.w	d564c <network_connecting>

000d5814 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d5814:	2200      	movs	r2, #0
   d5816:	6840      	ldr	r0, [r0, #4]
   d5818:	4611      	mov	r1, r2
   d581a:	f7ff bf27 	b.w	d566c <network_ready>

000d581e <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d581e:	2300      	movs	r3, #0
   d5820:	6840      	ldr	r0, [r0, #4]
   d5822:	461a      	mov	r2, r3
   d5824:	4619      	mov	r1, r3
   d5826:	f7ff bf29 	b.w	d567c <network_on>

000d582a <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d582a:	2300      	movs	r3, #0
   d582c:	6840      	ldr	r0, [r0, #4]
   d582e:	461a      	mov	r2, r3
   d5830:	4619      	mov	r1, r3
   d5832:	f7ff bf2b 	b.w	d568c <network_off>

000d5836 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d5836:	6840      	ldr	r0, [r0, #4]
   d5838:	2200      	movs	r2, #0
   d583a:	f081 0101 	eor.w	r1, r1, #1
   d583e:	f7ff bf2d 	b.w	d569c <network_listen>

000d5842 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5842:	6840      	ldr	r0, [r0, #4]
   d5844:	2200      	movs	r2, #0
   d5846:	f7ff bf39 	b.w	d56bc <network_set_listen_timeout>

000d584a <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d584a:	2200      	movs	r2, #0
   d584c:	6840      	ldr	r0, [r0, #4]
   d584e:	4611      	mov	r1, r2
   d5850:	f7ff bf3c 	b.w	d56cc <network_get_listen_timeout>

000d5854 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d5854:	2200      	movs	r2, #0
   d5856:	6840      	ldr	r0, [r0, #4]
   d5858:	4611      	mov	r1, r2
   d585a:	f7ff bf27 	b.w	d56ac <network_listening>

000d585e <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d585e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5862:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d5864:	b095      	sub	sp, #84	; 0x54
   d5866:	4616      	mov	r6, r2
   d5868:	460d      	mov	r5, r1
   d586a:	4607      	mov	r7, r0
    IPAddress addr;
   d586c:	f000 fa96 	bl	d5d9c <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d5870:	4621      	mov	r1, r4
   d5872:	2218      	movs	r2, #24
   d5874:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d5876:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d5878:	f003 fa9e 	bl	d8db8 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d587c:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d587e:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d5882:	4621      	mov	r1, r4
   d5884:	466b      	mov	r3, sp
   d5886:	aa0c      	add	r2, sp, #48	; 0x30
   d5888:	4630      	mov	r0, r6
   d588a:	f7ff feb7 	bl	d55fc <netdb_getaddrinfo>
    if (!r) {
   d588e:	4604      	mov	r4, r0
   d5890:	2800      	cmp	r0, #0
   d5892:	d146      	bne.n	d5922 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5894:	4602      	mov	r2, r0
   d5896:	2101      	movs	r1, #1
   d5898:	6868      	ldr	r0, [r5, #4]
   d589a:	f7ff fee7 	bl	d566c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d589e:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d58a0:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d58a2:	4622      	mov	r2, r4
   d58a4:	6868      	ldr	r0, [r5, #4]
   d58a6:	f7ff fee1 	bl	d566c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d58aa:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d58ac:	4681      	mov	r9, r0
        bool ok = false;
   d58ae:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d58b0:	2e00      	cmp	r6, #0
   d58b2:	d036      	beq.n	d5922 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d58b4:	2900      	cmp	r1, #0
   d58b6:	d134      	bne.n	d5922 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d58b8:	6873      	ldr	r3, [r6, #4]
   d58ba:	2b02      	cmp	r3, #2
   d58bc:	d003      	beq.n	d58c6 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d58be:	2b0a      	cmp	r3, #10
   d58c0:	d00b      	beq.n	d58da <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d58c2:	69f6      	ldr	r6, [r6, #28]
   d58c4:	e7f4      	b.n	d58b0 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d58c6:	f1b8 0f00 	cmp.w	r8, #0
   d58ca:	d004      	beq.n	d58d6 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d58cc:	6971      	ldr	r1, [r6, #20]
   d58ce:	4638      	mov	r0, r7
   d58d0:	3104      	adds	r1, #4
   d58d2:	f000 fa90 	bl	d5df6 <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d58d6:	4641      	mov	r1, r8
   d58d8:	e7f3      	b.n	d58c2 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d58da:	f1b9 0f00 	cmp.w	r9, #0
   d58de:	d101      	bne.n	d58e4 <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d58e0:	4649      	mov	r1, r9
   d58e2:	e7ee      	b.n	d58c2 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d58e4:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d58e6:	2210      	movs	r2, #16
   d58e8:	a801      	add	r0, sp, #4
   d58ea:	f003 fa65 	bl	d8db8 <memset>
                    a.v = 6;
   d58ee:	2306      	movs	r3, #6
   d58f0:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d58f4:	ad01      	add	r5, sp, #4
   d58f6:	f104 0308 	add.w	r3, r4, #8
   d58fa:	3418      	adds	r4, #24
   d58fc:	6818      	ldr	r0, [r3, #0]
   d58fe:	6859      	ldr	r1, [r3, #4]
   d5900:	462a      	mov	r2, r5
   d5902:	c203      	stmia	r2!, {r0, r1}
   d5904:	3308      	adds	r3, #8
   d5906:	42a3      	cmp	r3, r4
   d5908:	4615      	mov	r5, r2
   d590a:	d1f7      	bne.n	d58fc <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d590c:	a901      	add	r1, sp, #4
   d590e:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d5910:	ad07      	add	r5, sp, #28
   d5912:	f000 fa51 	bl	d5db8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5916:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5918:	1d3c      	adds	r4, r7, #4
   d591a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d591c:	682b      	ldr	r3, [r5, #0]
   d591e:	7023      	strb	r3, [r4, #0]
   d5920:	e7de      	b.n	d58e0 <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d5922:	9800      	ldr	r0, [sp, #0]
   d5924:	f7ff fe62 	bl	d55ec <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d5928:	4638      	mov	r0, r7
   d592a:	b015      	add	sp, #84	; 0x54
   d592c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d5930 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5930:	4b02      	ldr	r3, [pc, #8]	; (d593c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d5932:	4a03      	ldr	r2, [pc, #12]	; (d5940 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d5934:	601a      	str	r2, [r3, #0]
   d5936:	2200      	movs	r2, #0
   d5938:	605a      	str	r2, [r3, #4]

} // spark
   d593a:	4770      	bx	lr
   d593c:	2003e650 	.word	0x2003e650
   d5940:	000d9398 	.word	0x000d9398

000d5944 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d5944:	2200      	movs	r2, #0
   d5946:	6840      	ldr	r0, [r0, #4]
   d5948:	4611      	mov	r1, r2
   d594a:	f7ff be8f 	b.w	d566c <network_ready>

000d594e <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d594e:	2200      	movs	r2, #0
   d5950:	6840      	ldr	r0, [r0, #4]
   d5952:	4611      	mov	r1, r2
   d5954:	f7ff beaa 	b.w	d56ac <network_listening>

000d5958 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d5958:	2200      	movs	r2, #0
   d595a:	6840      	ldr	r0, [r0, #4]
   d595c:	4611      	mov	r1, r2
   d595e:	f7ff beb5 	b.w	d56cc <network_get_listen_timeout>

000d5962 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d5962:	6840      	ldr	r0, [r0, #4]
   d5964:	2200      	movs	r2, #0
   d5966:	f7ff bea9 	b.w	d56bc <network_set_listen_timeout>

000d596a <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d596a:	6840      	ldr	r0, [r0, #4]
   d596c:	2200      	movs	r2, #0
   d596e:	f081 0101 	eor.w	r1, r1, #1
   d5972:	f7ff be93 	b.w	d569c <network_listen>

000d5976 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d5976:	2300      	movs	r3, #0
   d5978:	6840      	ldr	r0, [r0, #4]
   d597a:	461a      	mov	r2, r3
   d597c:	4619      	mov	r1, r3
   d597e:	f7ff be85 	b.w	d568c <network_off>

000d5982 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d5982:	2300      	movs	r3, #0
   d5984:	6840      	ldr	r0, [r0, #4]
   d5986:	461a      	mov	r2, r3
   d5988:	4619      	mov	r1, r3
   d598a:	f7ff be77 	b.w	d567c <network_on>

000d598e <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d598e:	2200      	movs	r2, #0
   d5990:	6840      	ldr	r0, [r0, #4]
   d5992:	4611      	mov	r1, r2
   d5994:	f7ff be5a 	b.w	d564c <network_connecting>

000d5998 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5998:	6840      	ldr	r0, [r0, #4]
   d599a:	2200      	movs	r2, #0
   d599c:	2102      	movs	r1, #2
   d599e:	f7ff be5d 	b.w	d565c <network_disconnect>

000d59a2 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d59a2:	2300      	movs	r3, #0
   d59a4:	6840      	ldr	r0, [r0, #4]
   d59a6:	461a      	mov	r2, r3
   d59a8:	f7ff be48 	b.w	d563c <network_connect>

000d59ac <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d59ac:	4b02      	ldr	r3, [pc, #8]	; (d59b8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d59ae:	2204      	movs	r2, #4
   d59b0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d59b2:	4a02      	ldr	r2, [pc, #8]	; (d59bc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d59b4:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d59b6:	4770      	bx	lr
   d59b8:	2003e658 	.word	0x2003e658
   d59bc:	000d93cc 	.word	0x000d93cc

000d59c0 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d59c0:	4770      	bx	lr

000d59c2 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d59c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d59c4:	4606      	mov	r6, r0
   d59c6:	4615      	mov	r5, r2
   d59c8:	460c      	mov	r4, r1
   d59ca:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d59cc:	42bc      	cmp	r4, r7
   d59ce:	d006      	beq.n	d59de <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d59d0:	6833      	ldr	r3, [r6, #0]
   d59d2:	f814 1b01 	ldrb.w	r1, [r4], #1
   d59d6:	689b      	ldr	r3, [r3, #8]
   d59d8:	4630      	mov	r0, r6
   d59da:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d59dc:	e7f6      	b.n	d59cc <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d59de:	4628      	mov	r0, r5
   d59e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d59e2 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d59e2:	7c00      	ldrb	r0, [r0, #16]
   d59e4:	2200      	movs	r2, #0
   d59e6:	f7ff bce1 	b.w	d53ac <hal_i2c_write>

000d59ea <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d59ea:	7c00      	ldrb	r0, [r0, #16]
   d59ec:	2100      	movs	r1, #0
   d59ee:	f7ff bce5 	b.w	d53bc <hal_i2c_available>

000d59f2 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d59f2:	7c00      	ldrb	r0, [r0, #16]
   d59f4:	2100      	movs	r1, #0
   d59f6:	f7ff bce9 	b.w	d53cc <hal_i2c_read>

000d59fa <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d59fa:	7c00      	ldrb	r0, [r0, #16]
   d59fc:	2100      	movs	r1, #0
   d59fe:	f7ff bced 	b.w	d53dc <hal_i2c_peek>

000d5a02 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d5a02:	7c00      	ldrb	r0, [r0, #16]
   d5a04:	2100      	movs	r1, #0
   d5a06:	f7ff bcf1 	b.w	d53ec <hal_i2c_flush>

000d5a0a <_ZN7TwoWireD0Ev>:
   d5a0a:	b510      	push	{r4, lr}
   d5a0c:	2114      	movs	r1, #20
   d5a0e:	4604      	mov	r4, r0
   d5a10:	f001 f893 	bl	d6b3a <_ZdlPvj>
   d5a14:	4620      	mov	r0, r4
   d5a16:	bd10      	pop	{r4, pc}

000d5a18 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d5a18:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5a1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5a1e:	4604      	mov	r4, r0
   d5a20:	4608      	mov	r0, r1
   d5a22:	2100      	movs	r1, #0
   d5a24:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d5a28:	4b03      	ldr	r3, [pc, #12]	; (d5a38 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d5a2a:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d5a2c:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d5a2e:	4611      	mov	r1, r2
   d5a30:	f7ff fcec 	bl	d540c <hal_i2c_init>
}
   d5a34:	4620      	mov	r0, r4
   d5a36:	bd10      	pop	{r4, pc}
   d5a38:	000d9400 	.word	0x000d9400

000d5a3c <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d5a3c:	2300      	movs	r3, #0
   d5a3e:	7c00      	ldrb	r0, [r0, #16]
   d5a40:	461a      	mov	r2, r3
   d5a42:	4619      	mov	r1, r3
   d5a44:	f7ff bc9a 	b.w	d537c <hal_i2c_begin>

000d5a48 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d5a48:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d5a4a:	2200      	movs	r2, #0
   d5a4c:	2314      	movs	r3, #20
   d5a4e:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d5a52:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   d5a56:	780b      	ldrb	r3, [r1, #0]
   d5a58:	f88d 3008 	strb.w	r3, [sp, #8]
   d5a5c:	684b      	ldr	r3, [r1, #4]
   d5a5e:	9303      	str	r3, [sp, #12]
   d5a60:	68cb      	ldr	r3, [r1, #12]
   d5a62:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   d5a64:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d5a66:	7a0b      	ldrb	r3, [r1, #8]
   d5a68:	9305      	str	r3, [sp, #20]
   d5a6a:	a901      	add	r1, sp, #4
   d5a6c:	f7ff fcd6 	bl	d541c <hal_i2c_request_ex>
}
   d5a70:	b007      	add	sp, #28
   d5a72:	f85d fb04 	ldr.w	pc, [sp], #4

000d5a76 <_ZN7TwoWire11requestFromEhjh>:
{
   d5a76:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d5a78:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d5a7a:	f88d 1000 	strb.w	r1, [sp]
   d5a7e:	f04f 0164 	mov.w	r1, #100	; 0x64
   d5a82:	9103      	str	r1, [sp, #12]
   d5a84:	bf18      	it	ne
   d5a86:	2301      	movne	r3, #1
   d5a88:	4669      	mov	r1, sp
    size_ = size;
   d5a8a:	9201      	str	r2, [sp, #4]
   d5a8c:	f88d 3008 	strb.w	r3, [sp, #8]
   d5a90:	f7ff ffda 	bl	d5a48 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d5a94:	b005      	add	sp, #20
   d5a96:	f85d fb04 	ldr.w	pc, [sp], #4

000d5a9a <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   d5a9a:	2301      	movs	r3, #1
   d5a9c:	f7ff bfeb 	b.w	d5a76 <_ZN7TwoWire11requestFromEhjh>

000d5aa0 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d5aa0:	7c00      	ldrb	r0, [r0, #16]
   d5aa2:	2200      	movs	r2, #0
   d5aa4:	f7ff bc72 	b.w	d538c <hal_i2c_begin_transmission>

000d5aa8 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   d5aa8:	b2c9      	uxtb	r1, r1
   d5aaa:	f7ff bff9 	b.w	d5aa0 <_ZN7TwoWire17beginTransmissionEh>

000d5aae <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d5aae:	7c00      	ldrb	r0, [r0, #16]
   d5ab0:	2200      	movs	r2, #0
   d5ab2:	f7ff bc73 	b.w	d539c <hal_i2c_end_transmission>

000d5ab6 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   d5ab6:	2101      	movs	r1, #1
   d5ab8:	f7ff bff9 	b.w	d5aae <_ZN7TwoWire15endTransmissionEh>

000d5abc <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d5abc:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5abe:	6883      	ldr	r3, [r0, #8]
   d5ac0:	4604      	mov	r4, r0
   d5ac2:	b90b      	cbnz	r3, d5ac8 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d5ac4:	f001 f83d 	bl	d6b42 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5ac8:	68c3      	ldr	r3, [r0, #12]
   d5aca:	4798      	blx	r3
      if (_M_manager)
   d5acc:	68a3      	ldr	r3, [r4, #8]
   d5ace:	b11b      	cbz	r3, d5ad8 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5ad0:	2203      	movs	r2, #3
   d5ad2:	4621      	mov	r1, r4
   d5ad4:	4620      	mov	r0, r4
   d5ad6:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d5ad8:	4620      	mov	r0, r4
   d5ada:	2110      	movs	r1, #16
}
   d5adc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d5ae0:	f001 b82b 	b.w	d6b3a <_ZdlPvj>

000d5ae4 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d5ae4:	4770      	bx	lr

000d5ae6 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5ae6:	7441      	strb	r1, [r0, #17]
}
   d5ae8:	4770      	bx	lr

000d5aea <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d5aea:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d5aec:	7c00      	ldrb	r0, [r0, #16]
   d5aee:	f7ff fd15 	bl	d551c <hal_usart_available_data_for_write>
}
   d5af2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5af6:	bd08      	pop	{r3, pc}

000d5af8 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d5af8:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d5afa:	7c00      	ldrb	r0, [r0, #16]
   d5afc:	f7ff fce6 	bl	d54cc <hal_usart_available>
}
   d5b00:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5b04:	bd08      	pop	{r3, pc}

000d5b06 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d5b06:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d5b08:	7c00      	ldrb	r0, [r0, #16]
   d5b0a:	f7ff fcef 	bl	d54ec <hal_usart_peek>
}
   d5b0e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5b12:	bd08      	pop	{r3, pc}

000d5b14 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d5b14:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d5b16:	7c00      	ldrb	r0, [r0, #16]
   d5b18:	f7ff fce0 	bl	d54dc <hal_usart_read>
}
   d5b1c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5b20:	bd08      	pop	{r3, pc}

000d5b22 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d5b22:	7c00      	ldrb	r0, [r0, #16]
   d5b24:	f7ff bcea 	b.w	d54fc <hal_usart_flush>

000d5b28 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d5b28:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d5b2a:	7c45      	ldrb	r5, [r0, #17]
{
   d5b2c:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d5b2e:	b12d      	cbz	r5, d5b3c <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d5b30:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d5b32:	b003      	add	sp, #12
   d5b34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d5b38:	f7ff bcc0 	b.w	d54bc <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d5b3c:	7c00      	ldrb	r0, [r0, #16]
   d5b3e:	9101      	str	r1, [sp, #4]
   d5b40:	f7ff fcec 	bl	d551c <hal_usart_available_data_for_write>
   d5b44:	2800      	cmp	r0, #0
   d5b46:	9901      	ldr	r1, [sp, #4]
   d5b48:	dcf2      	bgt.n	d5b30 <_ZN11USARTSerial5writeEh+0x8>
}
   d5b4a:	4628      	mov	r0, r5
   d5b4c:	b003      	add	sp, #12
   d5b4e:	bd30      	pop	{r4, r5, pc}

000d5b50 <_ZN11USARTSerialD0Ev>:
   d5b50:	b510      	push	{r4, lr}
   d5b52:	2114      	movs	r1, #20
   d5b54:	4604      	mov	r4, r0
   d5b56:	f000 fff0 	bl	d6b3a <_ZdlPvj>
   d5b5a:	4620      	mov	r0, r4
   d5b5c:	bd10      	pop	{r4, pc}
	...

000d5b60 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d5b60:	b510      	push	{r4, lr}
   d5b62:	f04f 0c00 	mov.w	ip, #0
   d5b66:	4604      	mov	r4, r0
   d5b68:	4608      	mov	r0, r1
   d5b6a:	4611      	mov	r1, r2
   d5b6c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5b70:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d5b74:	4a04      	ldr	r2, [pc, #16]	; (d5b88 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d5b76:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d5b78:	2201      	movs	r2, #1
  _serial = serial;
   d5b7a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d5b7c:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d5b7e:	461a      	mov	r2, r3
   d5b80:	f7ff fc94 	bl	d54ac <hal_usart_init>
}
   d5b84:	4620      	mov	r0, r4
   d5b86:	bd10      	pop	{r4, pc}
   d5b88:	000d9428 	.word	0x000d9428

000d5b8c <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d5b8c:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d5b8e:	4c0e      	ldr	r4, [pc, #56]	; (d5bc8 <_Z22__fetch_global_Serial1v+0x3c>)
   d5b90:	7821      	ldrb	r1, [r4, #0]
   d5b92:	f3bf 8f5b 	dmb	ish
   d5b96:	f011 0101 	ands.w	r1, r1, #1
   d5b9a:	d112      	bne.n	d5bc2 <_Z22__fetch_global_Serial1v+0x36>
   d5b9c:	4620      	mov	r0, r4
   d5b9e:	9101      	str	r1, [sp, #4]
   d5ba0:	f7fe fa7f 	bl	d40a2 <__cxa_guard_acquire>
   d5ba4:	9901      	ldr	r1, [sp, #4]
   d5ba6:	b160      	cbz	r0, d5bc2 <_Z22__fetch_global_Serial1v+0x36>
   d5ba8:	4a08      	ldr	r2, [pc, #32]	; (d5bcc <_Z22__fetch_global_Serial1v+0x40>)
   d5baa:	4b09      	ldr	r3, [pc, #36]	; (d5bd0 <_Z22__fetch_global_Serial1v+0x44>)
   d5bac:	4809      	ldr	r0, [pc, #36]	; (d5bd4 <_Z22__fetch_global_Serial1v+0x48>)
   d5bae:	f7ff ffd7 	bl	d5b60 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d5bb2:	4620      	mov	r0, r4
   d5bb4:	f7fe fa7a 	bl	d40ac <__cxa_guard_release>
   d5bb8:	4a07      	ldr	r2, [pc, #28]	; (d5bd8 <_Z22__fetch_global_Serial1v+0x4c>)
   d5bba:	4908      	ldr	r1, [pc, #32]	; (d5bdc <_Z22__fetch_global_Serial1v+0x50>)
   d5bbc:	4805      	ldr	r0, [pc, #20]	; (d5bd4 <_Z22__fetch_global_Serial1v+0x48>)
   d5bbe:	f000 ffb7 	bl	d6b30 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d5bc2:	4804      	ldr	r0, [pc, #16]	; (d5bd4 <_Z22__fetch_global_Serial1v+0x48>)
   d5bc4:	b002      	add	sp, #8
   d5bc6:	bd10      	pop	{r4, pc}
   d5bc8:	2003e660 	.word	0x2003e660
   d5bcc:	2003e664 	.word	0x2003e664
   d5bd0:	2003e6e8 	.word	0x2003e6e8
   d5bd4:	2003e76c 	.word	0x2003e76c
   d5bd8:	2003e4a4 	.word	0x2003e4a4
   d5bdc:	000d5ae5 	.word	0x000d5ae5

000d5be0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d5be0:	680b      	ldr	r3, [r1, #0]
   d5be2:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d5be4:	b113      	cbz	r3, d5bec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d5be6:	685a      	ldr	r2, [r3, #4]
   d5be8:	3201      	adds	r2, #1
   d5bea:	605a      	str	r2, [r3, #4]
	  _M_pi->_M_add_ref_copy();
      }
   d5bec:	4770      	bx	lr

000d5bee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   d5bee:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   d5bf0:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   d5bf2:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   d5bf4:	b17c      	cbz	r4, d5c16 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   d5bf6:	6863      	ldr	r3, [r4, #4]
   d5bf8:	3b01      	subs	r3, #1
   d5bfa:	6063      	str	r3, [r4, #4]
   d5bfc:	b95b      	cbnz	r3, d5c16 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   d5bfe:	6823      	ldr	r3, [r4, #0]
   d5c00:	4620      	mov	r0, r4
   d5c02:	689b      	ldr	r3, [r3, #8]
   d5c04:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d5c06:	68a3      	ldr	r3, [r4, #8]
   d5c08:	3b01      	subs	r3, #1
   d5c0a:	60a3      	str	r3, [r4, #8]
   d5c0c:	b91b      	cbnz	r3, d5c16 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d5c0e:	6823      	ldr	r3, [r4, #0]
   d5c10:	4620      	mov	r0, r4
   d5c12:	68db      	ldr	r3, [r3, #12]
   d5c14:	4798      	blx	r3
      }
   d5c16:	4628      	mov	r0, r5
   d5c18:	bd38      	pop	{r3, r4, r5, pc}

000d5c1a <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5c1a:	7441      	strb	r1, [r0, #17]
}
   d5c1c:	4770      	bx	lr

000d5c1e <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5c1e:	4770      	bx	lr

000d5c20 <_ZN9USBSerial4readEv>:
{
   d5c20:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d5c22:	2100      	movs	r1, #0
   d5c24:	7c00      	ldrb	r0, [r0, #16]
   d5c26:	f7ff fb91 	bl	d534c <HAL_USB_USART_Receive_Data>
}
   d5c2a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5c2e:	bd08      	pop	{r3, pc}

000d5c30 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d5c30:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d5c32:	2101      	movs	r1, #1
   d5c34:	7c00      	ldrb	r0, [r0, #16]
   d5c36:	f7ff fb89 	bl	d534c <HAL_USB_USART_Receive_Data>
}
   d5c3a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5c3e:	bd08      	pop	{r3, pc}

000d5c40 <_ZN9USBSerial17availableForWriteEv>:
{
   d5c40:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d5c42:	7c00      	ldrb	r0, [r0, #16]
   d5c44:	f7ff fb7a 	bl	d533c <HAL_USB_USART_Available_Data_For_Write>
}
   d5c48:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5c4c:	bd08      	pop	{r3, pc}

000d5c4e <_ZN9USBSerial9availableEv>:
{
   d5c4e:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d5c50:	7c00      	ldrb	r0, [r0, #16]
   d5c52:	f7ff fb6b 	bl	d532c <HAL_USB_USART_Available_Data>
}
   d5c56:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5c5a:	bd08      	pop	{r3, pc}

000d5c5c <_ZN9USBSerial5writeEh>:
{
   d5c5c:	b513      	push	{r0, r1, r4, lr}
   d5c5e:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5c60:	7c00      	ldrb	r0, [r0, #16]
{
   d5c62:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5c64:	f7ff fb6a 	bl	d533c <HAL_USB_USART_Available_Data_For_Write>
   d5c68:	2800      	cmp	r0, #0
   d5c6a:	9901      	ldr	r1, [sp, #4]
   d5c6c:	dc01      	bgt.n	d5c72 <_ZN9USBSerial5writeEh+0x16>
   d5c6e:	7c60      	ldrb	r0, [r4, #17]
   d5c70:	b120      	cbz	r0, d5c7c <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d5c72:	7c20      	ldrb	r0, [r4, #16]
   d5c74:	f7ff fb72 	bl	d535c <HAL_USB_USART_Send_Data>
   d5c78:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d5c7c:	b002      	add	sp, #8
   d5c7e:	bd10      	pop	{r4, pc}

000d5c80 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d5c80:	7c00      	ldrb	r0, [r0, #16]
   d5c82:	f7ff bb73 	b.w	d536c <HAL_USB_USART_Flush_Data>

000d5c86 <_ZN9USBSerialD0Ev>:
   d5c86:	b510      	push	{r4, lr}
   d5c88:	2114      	movs	r1, #20
   d5c8a:	4604      	mov	r4, r0
   d5c8c:	f000 ff55 	bl	d6b3a <_ZdlPvj>
   d5c90:	4620      	mov	r0, r4
   d5c92:	bd10      	pop	{r4, pc}

000d5c94 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5c94:	b510      	push	{r4, lr}
   d5c96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5c9a:	4604      	mov	r4, r0
   d5c9c:	4608      	mov	r0, r1
   d5c9e:	2100      	movs	r1, #0
   d5ca0:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d5ca4:	4b04      	ldr	r3, [pc, #16]	; (d5cb8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5ca6:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d5ca8:	2301      	movs	r3, #1
  _serial = serial;
   d5caa:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d5cac:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d5cae:	4611      	mov	r1, r2
   d5cb0:	f7ff fb2c 	bl	d530c <HAL_USB_USART_Init>
}
   d5cb4:	4620      	mov	r0, r4
   d5cb6:	bd10      	pop	{r4, pc}
   d5cb8:	000d9458 	.word	0x000d9458

000d5cbc <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d5cbc:	7c00      	ldrb	r0, [r0, #16]
   d5cbe:	2200      	movs	r2, #0
   d5cc0:	f7ff bb2c 	b.w	d531c <HAL_USB_USART_Begin>

000d5cc4 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5cc4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d5cc6:	2214      	movs	r2, #20
{
   d5cc8:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d5cca:	2100      	movs	r1, #0
   d5ccc:	f003 f874 	bl	d8db8 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d5cd0:	4620      	mov	r0, r4
   d5cd2:	bd10      	pop	{r4, pc}

000d5cd4 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d5cd4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5cd6:	4c10      	ldr	r4, [pc, #64]	; (d5d18 <_Z16_fetch_usbserialv+0x44>)
{
   d5cd8:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d5cda:	a803      	add	r0, sp, #12
   d5cdc:	f7ff fff2 	bl	d5cc4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5ce0:	7821      	ldrb	r1, [r4, #0]
   d5ce2:	f3bf 8f5b 	dmb	ish
   d5ce6:	f011 0101 	ands.w	r1, r1, #1
   d5cea:	d111      	bne.n	d5d10 <_Z16_fetch_usbserialv+0x3c>
   d5cec:	4620      	mov	r0, r4
   d5cee:	9101      	str	r1, [sp, #4]
   d5cf0:	f7fe f9d7 	bl	d40a2 <__cxa_guard_acquire>
   d5cf4:	9901      	ldr	r1, [sp, #4]
   d5cf6:	b158      	cbz	r0, d5d10 <_Z16_fetch_usbserialv+0x3c>
   d5cf8:	aa03      	add	r2, sp, #12
   d5cfa:	4808      	ldr	r0, [pc, #32]	; (d5d1c <_Z16_fetch_usbserialv+0x48>)
   d5cfc:	f7ff ffca 	bl	d5c94 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d5d00:	4620      	mov	r0, r4
   d5d02:	f7fe f9d3 	bl	d40ac <__cxa_guard_release>
   d5d06:	4a06      	ldr	r2, [pc, #24]	; (d5d20 <_Z16_fetch_usbserialv+0x4c>)
   d5d08:	4906      	ldr	r1, [pc, #24]	; (d5d24 <_Z16_fetch_usbserialv+0x50>)
   d5d0a:	4804      	ldr	r0, [pc, #16]	; (d5d1c <_Z16_fetch_usbserialv+0x48>)
   d5d0c:	f000 ff10 	bl	d6b30 <__aeabi_atexit>
	return _usbserial;
}
   d5d10:	4802      	ldr	r0, [pc, #8]	; (d5d1c <_Z16_fetch_usbserialv+0x48>)
   d5d12:	b008      	add	sp, #32
   d5d14:	bd10      	pop	{r4, pc}
   d5d16:	bf00      	nop
   d5d18:	2003e780 	.word	0x2003e780
   d5d1c:	2003e784 	.word	0x2003e784
   d5d20:	2003e4a4 	.word	0x2003e4a4
   d5d24:	000d5c1f 	.word	0x000d5c1f

000d5d28 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5d28:	4770      	bx	lr

000d5d2a <_ZN9IPAddressD0Ev>:
   d5d2a:	b510      	push	{r4, lr}
   d5d2c:	2118      	movs	r1, #24
   d5d2e:	4604      	mov	r4, r0
   d5d30:	f000 ff03 	bl	d6b3a <_ZdlPvj>
   d5d34:	4620      	mov	r0, r4
   d5d36:	bd10      	pop	{r4, pc}

000d5d38 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5d38:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5d3a:	7d03      	ldrb	r3, [r0, #20]
   d5d3c:	2b06      	cmp	r3, #6
{
   d5d3e:	b08d      	sub	sp, #52	; 0x34
   d5d40:	460e      	mov	r6, r1
   d5d42:	f100 0704 	add.w	r7, r0, #4
   d5d46:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d5d4a:	d012      	beq.n	d5d72 <_ZNK9IPAddress7printToER5Print+0x3a>
   d5d4c:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d5d50:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5d54:	220a      	movs	r2, #10
   d5d56:	4630      	mov	r0, r6
   d5d58:	f000 fc07 	bl	d656a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5d5c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5d5e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d5d60:	d019      	beq.n	d5d96 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d5d62:	2c00      	cmp	r4, #0
   d5d64:	d0f4      	beq.n	d5d50 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d5d66:	212e      	movs	r1, #46	; 0x2e
   d5d68:	4630      	mov	r0, r6
   d5d6a:	f000 fbe5 	bl	d6538 <_ZN5Print5printEc>
   d5d6e:	4404      	add	r4, r0
   d5d70:	e7ee      	b.n	d5d50 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5d72:	232f      	movs	r3, #47	; 0x2f
   d5d74:	466a      	mov	r2, sp
   d5d76:	4639      	mov	r1, r7
   d5d78:	200a      	movs	r0, #10
		buf[0] = 0;
   d5d7a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5d7e:	f7ff fbd5 	bl	d552c <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d5d82:	4668      	mov	r0, sp
   d5d84:	f003 f861 	bl	d8e4a <strlen>
   d5d88:	6833      	ldr	r3, [r6, #0]
   d5d8a:	4602      	mov	r2, r0
   d5d8c:	68db      	ldr	r3, [r3, #12]
   d5d8e:	4669      	mov	r1, sp
   d5d90:	4630      	mov	r0, r6
   d5d92:	4798      	blx	r3
   d5d94:	4604      	mov	r4, r0
    }
    return n;
}
   d5d96:	4620      	mov	r0, r4
   d5d98:	b00d      	add	sp, #52	; 0x34
   d5d9a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5d9c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d5d9c:	b510      	push	{r4, lr}
   d5d9e:	4b05      	ldr	r3, [pc, #20]	; (d5db4 <_ZN9IPAddressC1Ev+0x18>)
   d5da0:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5da2:	2211      	movs	r2, #17
   d5da4:	f840 3b04 	str.w	r3, [r0], #4
   d5da8:	2100      	movs	r1, #0
   d5daa:	f003 f805 	bl	d8db8 <memset>
}
   d5dae:	4620      	mov	r0, r4
   d5db0:	bd10      	pop	{r4, pc}
   d5db2:	bf00      	nop
   d5db4:	000d9488 	.word	0x000d9488

000d5db8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d5db8:	4603      	mov	r3, r0
   d5dba:	4a07      	ldr	r2, [pc, #28]	; (d5dd8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5dbc:	b510      	push	{r4, lr}
   d5dbe:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d5dc2:	f101 0210 	add.w	r2, r1, #16
   d5dc6:	f851 4b04 	ldr.w	r4, [r1], #4
   d5dca:	f843 4b04 	str.w	r4, [r3], #4
   d5dce:	4291      	cmp	r1, r2
   d5dd0:	d1f9      	bne.n	d5dc6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d5dd2:	780a      	ldrb	r2, [r1, #0]
   d5dd4:	701a      	strb	r2, [r3, #0]
}
   d5dd6:	bd10      	pop	{r4, pc}
   d5dd8:	000d9488 	.word	0x000d9488

000d5ddc <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d5ddc:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d5dde:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d5de2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d5de6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d5dea:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d5dee:	2304      	movs	r3, #4
   d5df0:	6041      	str	r1, [r0, #4]
   d5df2:	7503      	strb	r3, [r0, #20]
}
   d5df4:	bd10      	pop	{r4, pc}

000d5df6 <_ZN9IPAddressaSEPKh>:
{
   d5df6:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d5df8:	78cb      	ldrb	r3, [r1, #3]
   d5dfa:	9300      	str	r3, [sp, #0]
   d5dfc:	788b      	ldrb	r3, [r1, #2]
   d5dfe:	784a      	ldrb	r2, [r1, #1]
   d5e00:	7809      	ldrb	r1, [r1, #0]
   d5e02:	f7ff ffeb 	bl	d5ddc <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d5e06:	b002      	add	sp, #8
   d5e08:	bd10      	pop	{r4, pc}

000d5e0a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d5e0a:	4770      	bx	lr

000d5e0c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d5e0c:	2000      	movs	r0, #0
   d5e0e:	4770      	bx	lr

000d5e10 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d5e10:	b510      	push	{r4, lr}
   d5e12:	2110      	movs	r1, #16
   d5e14:	4604      	mov	r4, r0
   d5e16:	f000 fe90 	bl	d6b3a <_ZdlPvj>
   d5e1a:	4620      	mov	r0, r4
   d5e1c:	bd10      	pop	{r4, pc}

000d5e1e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d5e1e:	b508      	push	{r3, lr}
      { delete this; }
   d5e20:	f7ff fff6 	bl	d5e10 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d5e24:	bd08      	pop	{r3, pc}

000d5e26 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d5e26:	b530      	push	{r4, r5, lr}
        type_(type) {
   d5e28:	2200      	movs	r2, #0
   d5e2a:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d5e2e:	6002      	str	r2, [r0, #0]
   d5e30:	8084      	strh	r4, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5e32:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d5e34:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d5e36:	680c      	ldr	r4, [r1, #0]
   d5e38:	8085      	strh	r5, [r0, #4]
   d5e3a:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d5e3c:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d5e3e:	bd30      	pop	{r4, r5, pc}

000d5e40 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d5e40:	b510      	push	{r4, lr}
   d5e42:	4604      	mov	r4, r0
    free((void*)msg_);
   d5e44:	6800      	ldr	r0, [r0, #0]
   d5e46:	f7ff fc8d 	bl	d5764 <free>
}
   d5e4a:	4620      	mov	r0, r4
   d5e4c:	bd10      	pop	{r4, pc}

000d5e4e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d5e4e:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d5e50:	68c4      	ldr	r4, [r0, #12]
   d5e52:	b1f4      	cbz	r4, d5e92 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d5e54:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d5e56:	2b02      	cmp	r3, #2
   d5e58:	d103      	bne.n	d5e62 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d5e5a:	f104 000c 	add.w	r0, r4, #12
   d5e5e:	f7ff ffef 	bl	d5e40 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d5e62:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d5e64:	b135      	cbz	r5, d5e74 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   d5e66:	4628      	mov	r0, r5
   d5e68:	f7ff fcbc 	bl	d57e4 <_ZNSt14_Function_baseD1Ev>
   d5e6c:	2110      	movs	r1, #16
   d5e6e:	4628      	mov	r0, r5
   d5e70:	f000 fe63 	bl	d6b3a <_ZdlPvj>
   d5e74:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d5e76:	b135      	cbz	r5, d5e86 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d5e78:	4628      	mov	r0, r5
   d5e7a:	f7ff fcb3 	bl	d57e4 <_ZNSt14_Function_baseD1Ev>
   d5e7e:	2110      	movs	r1, #16
   d5e80:	4628      	mov	r0, r5
   d5e82:	f000 fe5a 	bl	d6b3a <_ZdlPvj>
   d5e86:	4620      	mov	r0, r4
   d5e88:	2114      	movs	r1, #20
   d5e8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d5e8e:	f000 be54 	b.w	d6b3a <_ZdlPvj>
   d5e92:	bd38      	pop	{r3, r4, r5, pc}

000d5e94 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d5e94:	b573      	push	{r0, r1, r4, r5, r6, lr}
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
		     element_type* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5e96:	460e      	mov	r6, r1
   d5e98:	4604      	mov	r4, r0
   d5e9a:	f856 3b04 	ldr.w	r3, [r6], #4
   d5e9e:	9300      	str	r3, [sp, #0]
   d5ea0:	460d      	mov	r5, r1
   d5ea2:	a801      	add	r0, sp, #4
   d5ea4:	4631      	mov	r1, r6
   d5ea6:	f7ff fe9b 	bl	d5be0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d5eaa:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d5eac:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d5eae:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d5eb0:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d5eb2:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d5eb4:	2300      	movs	r3, #0
   d5eb6:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d5eb8:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d5eba:	f7ff fe98 	bl	d5bee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5ebe:	4630      	mov	r0, r6
   d5ec0:	f7ff fe95 	bl	d5bee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d5ec4:	4628      	mov	r0, r5
   d5ec6:	2108      	movs	r1, #8
   d5ec8:	f000 fe37 	bl	d6b3a <_ZdlPvj>
        return p;
    }
   d5ecc:	4620      	mov	r0, r4
   d5ece:	b002      	add	sp, #8
   d5ed0:	bd70      	pop	{r4, r5, r6, pc}

000d5ed2 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   d5ed2:	b513      	push	{r0, r1, r4, lr}
   d5ed4:	460b      	mov	r3, r1
   d5ed6:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5ed8:	e9d0 0100 	ldrd	r0, r1, [r0]
   d5edc:	466c      	mov	r4, sp
   d5ede:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d5ee2:	e893 0003 	ldmia.w	r3, {r0, r1}
   d5ee6:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d5eea:	e894 0003 	ldmia.w	r4, {r0, r1}
   d5eee:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d5ef2:	b002      	add	sp, #8
   d5ef4:	bd10      	pop	{r4, pc}

000d5ef6 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   d5ef6:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d5ef8:	b510      	push	{r4, lr}
      if (_M_empty())
   d5efa:	b90a      	cbnz	r2, d5f00 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d5efc:	f000 fe21 	bl	d6b42 <_ZSt25__throw_bad_function_callv>
    }
   d5f00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5f04:	68c3      	ldr	r3, [r0, #12]
   d5f06:	4718      	bx	r3

000d5f08 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d5f08:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d5f0a:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d5f0c:	f100 0110 	add.w	r1, r0, #16
   d5f10:	f7ff fff1 	bl	d5ef6 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d5f14:	bd08      	pop	{r3, pc}

000d5f16 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d5f16:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d5f18:	b510      	push	{r4, lr}
      if (_M_empty())
   d5f1a:	b90a      	cbnz	r2, d5f20 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d5f1c:	f000 fe11 	bl	d6b42 <_ZSt25__throw_bad_function_callv>
    }
   d5f20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5f24:	68c3      	ldr	r3, [r0, #12]
   d5f26:	4718      	bx	r3

000d5f28 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d5f28:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d5f2a:	6800      	ldr	r0, [r0, #0]
   d5f2c:	f100 0110 	add.w	r1, r0, #16
   d5f30:	f7ff fff1 	bl	d5f16 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d5f34:	bd08      	pop	{r3, pc}
	...

000d5f38 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d5f38:	b538      	push	{r3, r4, r5, lr}
   d5f3a:	2300      	movs	r3, #0
   d5f3c:	4604      	mov	r4, r0
   d5f3e:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5f40:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d5f42:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5f44:	f7fe f8a7 	bl	d4096 <_Znwj>
   d5f48:	b128      	cbz	r0, d5f56 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d5f4a:	2301      	movs	r3, #1
   d5f4c:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d5f50:	4b02      	ldr	r3, [pc, #8]	; (d5f5c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d5f52:	6003      	str	r3, [r0, #0]
   d5f54:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5f56:	6020      	str	r0, [r4, #0]
	}
   d5f58:	4620      	mov	r0, r4
   d5f5a:	bd38      	pop	{r3, r4, r5, pc}
   d5f5c:	000d949c 	.word	0x000d949c

000d5f60 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d5f60:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d5f62:	2300      	movs	r3, #0
   d5f64:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d5f66:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d5f68:	4604      	mov	r4, r0
   d5f6a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d5f6c:	b12b      	cbz	r3, d5f7a <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d5f6e:	2202      	movs	r2, #2
   d5f70:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d5f72:	68eb      	ldr	r3, [r5, #12]
   d5f74:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d5f76:	68ab      	ldr	r3, [r5, #8]
   d5f78:	60a3      	str	r3, [r4, #8]
    }
   d5f7a:	4620      	mov	r0, r4
   d5f7c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5f80 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d5f80:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5f82:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d5f84:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d5f86:	4668      	mov	r0, sp
   d5f88:	f7ff ff4d 	bl	d5e26 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d5f8c:	f04f 0302 	mov.w	r3, #2
   d5f90:	e8d4 2f4f 	ldrexb	r2, [r4]
   d5f94:	2a00      	cmp	r2, #0
   d5f96:	d103      	bne.n	d5fa0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d5f98:	e8c4 3f41 	strexb	r1, r3, [r4]
   d5f9c:	2900      	cmp	r1, #0
   d5f9e:	d1f7      	bne.n	d5f90 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d5fa0:	d125      	bne.n	d5fee <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d5fa2:	f104 050c 	add.w	r5, r4, #12
   d5fa6:	4669      	mov	r1, sp
   d5fa8:	4628      	mov	r0, r5
   d5faa:	f7ff ff3c 	bl	d5e26 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d5fae:	f3bf 8f5b 	dmb	ish
   d5fb2:	2301      	movs	r3, #1
   d5fb4:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d5fb6:	2000      	movs	r0, #0
   d5fb8:	f104 0308 	add.w	r3, r4, #8
   d5fbc:	f3bf 8f5b 	dmb	ish
   d5fc0:	e853 6f00 	ldrex	r6, [r3]
   d5fc4:	e843 0200 	strex	r2, r0, [r3]
   d5fc8:	2a00      	cmp	r2, #0
   d5fca:	d1f9      	bne.n	d5fc0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d5fcc:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d5fd0:	b16e      	cbz	r6, d5fee <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d5fd2:	f7ff fb9b 	bl	d570c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d5fd6:	b178      	cbz	r0, d5ff8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d5fd8:	4629      	mov	r1, r5
   d5fda:	4630      	mov	r0, r6
   d5fdc:	f7ff ff8b 	bl	d5ef6 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d5fe0:	4630      	mov	r0, r6
   d5fe2:	f7ff fbff 	bl	d57e4 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d5fe6:	2110      	movs	r1, #16
   d5fe8:	4630      	mov	r0, r6
   d5fea:	f000 fda6 	bl	d6b3a <_ZdlPvj>
        p_->setError(std::move(error));
   d5fee:	4668      	mov	r0, sp
   d5ff0:	f7ff ff26 	bl	d5e40 <_ZN8particle5ErrorD1Ev>
    }
   d5ff4:	b009      	add	sp, #36	; 0x24
   d5ff6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d5ff8:	4631      	mov	r1, r6
   d5ffa:	a802      	add	r0, sp, #8
   d5ffc:	f7ff ffb0 	bl	d5f60 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d6000:	68e0      	ldr	r0, [r4, #12]
   d6002:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d6006:	b108      	cbz	r0, d600c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d6008:	f002 ff02 	bl	d8e10 <strdup>
        type_(type) {
   d600c:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d600e:	2010      	movs	r0, #16
   d6010:	f8ad 501c 	strh.w	r5, [sp, #28]
   d6014:	f7fe f83f 	bl	d4096 <_Znwj>
   d6018:	4605      	mov	r5, r0
   d601a:	b1e8      	cbz	r0, d6058 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d601c:	2700      	movs	r7, #0
   d601e:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6020:	2018      	movs	r0, #24
   d6022:	f7fe f838 	bl	d4096 <_Znwj>
   d6026:	4604      	mov	r4, r0
   d6028:	b188      	cbz	r0, d604e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d602a:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d602c:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d602e:	a802      	add	r0, sp, #8
   d6030:	f7ff ff4f 	bl	d5ed2 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6034:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d6036:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d6038:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d603a:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d603c:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d603e:	a906      	add	r1, sp, #24
   d6040:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d6042:	60e3      	str	r3, [r4, #12]
   d6044:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d6048:	9205      	str	r2, [sp, #20]
   d604a:	f7ff feec 	bl	d5e26 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d604e:	4b08      	ldr	r3, [pc, #32]	; (d6070 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d6050:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d6052:	4b08      	ldr	r3, [pc, #32]	; (d6074 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6054:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d6056:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d6058:	a806      	add	r0, sp, #24
   d605a:	f7ff fef1 	bl	d5e40 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d605e:	a802      	add	r0, sp, #8
   d6060:	f7ff fbc0 	bl	d57e4 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d6064:	2200      	movs	r2, #0
   d6066:	4629      	mov	r1, r5
   d6068:	4803      	ldr	r0, [pc, #12]	; (d6078 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d606a:	f7ff fb57 	bl	d571c <application_thread_invoke>
   d606e:	e7b7      	b.n	d5fe0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d6070:	000d5f09 	.word	0x000d5f09
   d6074:	000d61a1 	.word	0x000d61a1
   d6078:	000d5abd 	.word	0x000d5abd

000d607c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d607c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6080:	b08a      	sub	sp, #40	; 0x28
   d6082:	4605      	mov	r5, r0
   d6084:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d6088:	460c      	mov	r4, r1
   d608a:	4617      	mov	r7, r2
   d608c:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d608e:	f7ff fabd 	bl	d560c <spark_cloud_flag_connected>
   d6092:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d6094:	4682      	mov	sl, r0
   d6096:	bb38      	cbnz	r0, d60e8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d6098:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d609c:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d609e:	a905      	add	r1, sp, #20
   d60a0:	4630      	mov	r0, r6
   d60a2:	f8ad 3018 	strh.w	r3, [sp, #24]
   d60a6:	f7ff febe 	bl	d5e26 <_ZN8particle5ErrorC1EOS0_>
   d60aa:	2014      	movs	r0, #20
   d60ac:	f7fd fff3 	bl	d4096 <_Znwj>
   d60b0:	4604      	mov	r4, r0
   d60b2:	b148      	cbz	r0, d60c8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d60b4:	2302      	movs	r3, #2
   d60b6:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d60b8:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d60ba:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d60be:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d60c0:	4631      	mov	r1, r6
   d60c2:	300c      	adds	r0, #12
   d60c4:	f7ff feaf 	bl	d5e26 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d60c8:	4628      	mov	r0, r5
	: __shared_count(__p)
   d60ca:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d60cc:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d60d0:	f7ff ff32 	bl	d5f38 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d60d4:	4630      	mov	r0, r6
   d60d6:	f7ff feb3 	bl	d5e40 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d60da:	a805      	add	r0, sp, #20
   d60dc:	f7ff feb0 	bl	d5e40 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   d60e0:	4628      	mov	r0, r5
   d60e2:	b00a      	add	sp, #40	; 0x28
   d60e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d60e8:	230c      	movs	r3, #12
   d60ea:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d60ee:	2014      	movs	r0, #20
   d60f0:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d60f4:	9307      	str	r3, [sp, #28]
   d60f6:	f7fd ffce 	bl	d4096 <_Znwj>
   d60fa:	4601      	mov	r1, r0
   d60fc:	b128      	cbz	r0, d610a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d60fe:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d6102:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6106:	f880 a001 	strb.w	sl, [r0, #1]
   d610a:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d610c:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d610e:	f7ff ff13 	bl	d5f38 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d6112:	4b22      	ldr	r3, [pc, #136]	; (d619c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d6114:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d6116:	2008      	movs	r0, #8
   d6118:	f7fd ffbd 	bl	d4096 <_Znwj>
   d611c:	4682      	mov	sl, r0
   d611e:	b128      	cbz	r0, d612c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6120:	9b03      	ldr	r3, [sp, #12]
   d6122:	f840 3b04 	str.w	r3, [r0], #4
   d6126:	a904      	add	r1, sp, #16
   d6128:	f7ff fd5a 	bl	d5be0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d612c:	9600      	str	r6, [sp, #0]
   d612e:	fa5f f389 	uxtb.w	r3, r9
   d6132:	4642      	mov	r2, r8
   d6134:	4639      	mov	r1, r7
   d6136:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d6138:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d613c:	f7ff fa6e 	bl	d561c <spark_send_event>
   d6140:	b9b8      	cbnz	r0, d6172 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d6142:	9b03      	ldr	r3, [sp, #12]
   d6144:	785b      	ldrb	r3, [r3, #1]
   d6146:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d614a:	b993      	cbnz	r3, d6172 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d614c:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d6150:	a905      	add	r1, sp, #20
   d6152:	a803      	add	r0, sp, #12
   d6154:	9205      	str	r2, [sp, #20]
   d6156:	f8ad 3018 	strh.w	r3, [sp, #24]
   d615a:	f7ff ff11 	bl	d5f80 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d615e:	a805      	add	r0, sp, #20
   d6160:	f7ff fe6e 	bl	d5e40 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d6164:	a805      	add	r0, sp, #20
   d6166:	9909      	ldr	r1, [sp, #36]	; 0x24
   d6168:	f7ff fe94 	bl	d5e94 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d616c:	a806      	add	r0, sp, #24
   d616e:	f7ff fd3e 	bl	d5bee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6172:	9b03      	ldr	r3, [sp, #12]
   d6174:	9305      	str	r3, [sp, #20]
   d6176:	a904      	add	r1, sp, #16
   d6178:	a806      	add	r0, sp, #24
   d617a:	f7ff fd31 	bl	d5be0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d617e:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d6180:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d6182:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d6184:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d6186:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d6188:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d618a:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d618c:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d618e:	f7ff fd2e 	bl	d5bee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6192:	a804      	add	r0, sp, #16
   d6194:	f7ff fd2b 	bl	d5bee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d6198:	e7a2      	b.n	d60e0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d619a:	bf00      	nop
   d619c:	000d6265 	.word	0x000d6265

000d61a0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d61a0:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d61a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d61a4:	4605      	mov	r5, r0
	  switch (__op)
   d61a6:	d007      	beq.n	d61b8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d61a8:	2a03      	cmp	r2, #3
   d61aa:	d018      	beq.n	d61de <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d61ac:	2a01      	cmp	r2, #1
   d61ae:	d101      	bne.n	d61b4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d61b0:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d61b2:	6003      	str	r3, [r0, #0]
	}
   d61b4:	2000      	movs	r0, #0
   d61b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d61b8:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d61ba:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d61bc:	f7fd ff6b 	bl	d4096 <_Znwj>
   d61c0:	4604      	mov	r4, r0
   d61c2:	b150      	cbz	r0, d61da <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d61c4:	4631      	mov	r1, r6
   d61c6:	f7ff fecb 	bl	d5f60 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d61ca:	6930      	ldr	r0, [r6, #16]
   d61cc:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d61d0:	b108      	cbz	r0, d61d6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d61d2:	f002 fe1d 	bl	d8e10 <strdup>
        type_(type) {
   d61d6:	6120      	str	r0, [r4, #16]
   d61d8:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d61da:	602c      	str	r4, [r5, #0]
	}
   d61dc:	e7ea      	b.n	d61b4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d61de:	6804      	ldr	r4, [r0, #0]
   d61e0:	2c00      	cmp	r4, #0
   d61e2:	d0e7      	beq.n	d61b4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d61e4:	f104 0010 	add.w	r0, r4, #16
   d61e8:	f7ff fe2a 	bl	d5e40 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d61ec:	4620      	mov	r0, r4
   d61ee:	f7ff faf9 	bl	d57e4 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d61f2:	2118      	movs	r1, #24
   d61f4:	4620      	mov	r0, r4
   d61f6:	f000 fca0 	bl	d6b3a <_ZdlPvj>
   d61fa:	e7db      	b.n	d61b4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d61fc <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d61fc:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d61fe:	2300      	movs	r3, #0
   d6200:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d6202:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d6204:	4604      	mov	r4, r0
   d6206:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d6208:	b12b      	cbz	r3, d6216 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d620a:	2202      	movs	r2, #2
   d620c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d620e:	68eb      	ldr	r3, [r5, #12]
   d6210:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d6212:	68ab      	ldr	r3, [r5, #8]
   d6214:	60a3      	str	r3, [r4, #8]
    }
   d6216:	4620      	mov	r0, r4
   d6218:	bd38      	pop	{r3, r4, r5, pc}

000d621a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d621a:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d621c:	b570      	push	{r4, r5, r6, lr}
   d621e:	4604      	mov	r4, r0
	  switch (__op)
   d6220:	d007      	beq.n	d6232 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d6222:	2a03      	cmp	r2, #3
   d6224:	d012      	beq.n	d624c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d6226:	2a01      	cmp	r2, #1
   d6228:	d101      	bne.n	d622e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d622a:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d622c:	6003      	str	r3, [r0, #0]
	}
   d622e:	2000      	movs	r0, #0
   d6230:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d6232:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d6234:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d6236:	f7fd ff2e 	bl	d4096 <_Znwj>
   d623a:	4605      	mov	r5, r0
   d623c:	b120      	cbz	r0, d6248 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d623e:	4631      	mov	r1, r6
   d6240:	f7ff ffdc 	bl	d61fc <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d6244:	7c33      	ldrb	r3, [r6, #16]
   d6246:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d6248:	6025      	str	r5, [r4, #0]
	}
   d624a:	e7f0      	b.n	d622e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d624c:	6804      	ldr	r4, [r0, #0]
   d624e:	2c00      	cmp	r4, #0
   d6250:	d0ed      	beq.n	d622e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d6252:	4620      	mov	r0, r4
   d6254:	f7ff fac6 	bl	d57e4 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d6258:	2114      	movs	r1, #20
   d625a:	4620      	mov	r0, r4
   d625c:	f000 fc6d 	bl	d6b3a <_ZdlPvj>
   d6260:	e7e5      	b.n	d622e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d6264 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d6264:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6266:	b089      	sub	sp, #36	; 0x24
   d6268:	4604      	mov	r4, r0
   d626a:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d626c:	a801      	add	r0, sp, #4
   d626e:	4611      	mov	r1, r2
   d6270:	f7ff fe10 	bl	d5e94 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d6274:	b1a4      	cbz	r4, d62a0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d6276:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d6278:	b11d      	cbz	r5, d6282 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d627a:	4628      	mov	r0, r5
   d627c:	f002 fdc8 	bl	d8e10 <strdup>
   d6280:	4605      	mov	r5, r0
   d6282:	a801      	add	r0, sp, #4
   d6284:	a903      	add	r1, sp, #12
        type_(type) {
   d6286:	9503      	str	r5, [sp, #12]
   d6288:	f8ad 4010 	strh.w	r4, [sp, #16]
   d628c:	f7ff fe78 	bl	d5f80 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d6290:	a803      	add	r0, sp, #12
   d6292:	f7ff fdd5 	bl	d5e40 <_ZN8particle5ErrorD1Ev>
   d6296:	a802      	add	r0, sp, #8
   d6298:	f7ff fca9 	bl	d5bee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d629c:	b009      	add	sp, #36	; 0x24
   d629e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d62a0:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d62a2:	2301      	movs	r3, #1
   d62a4:	e8d5 2f4f 	ldrexb	r2, [r5]
   d62a8:	2a00      	cmp	r2, #0
   d62aa:	d103      	bne.n	d62b4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d62ac:	e8c5 3f41 	strexb	r1, r3, [r5]
   d62b0:	2900      	cmp	r1, #0
   d62b2:	d1f7      	bne.n	d62a4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d62b4:	d1ef      	bne.n	d6296 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d62b6:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d62b8:	f3bf 8f5b 	dmb	ish
   d62bc:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d62be:	1d2b      	adds	r3, r5, #4
   d62c0:	f3bf 8f5b 	dmb	ish
   d62c4:	e853 6f00 	ldrex	r6, [r3]
   d62c8:	e843 4200 	strex	r2, r4, [r3]
   d62cc:	2a00      	cmp	r2, #0
   d62ce:	d1f9      	bne.n	d62c4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d62d0:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d62d4:	2e00      	cmp	r6, #0
   d62d6:	d0de      	beq.n	d6296 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d62d8:	4620      	mov	r0, r4
   d62da:	f7ff fa17 	bl	d570c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d62de:	4607      	mov	r7, r0
   d62e0:	b160      	cbz	r0, d62fc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d62e2:	f105 010c 	add.w	r1, r5, #12
   d62e6:	4630      	mov	r0, r6
   d62e8:	f7ff fe15 	bl	d5f16 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d62ec:	4630      	mov	r0, r6
   d62ee:	f7ff fa79 	bl	d57e4 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d62f2:	2110      	movs	r1, #16
   d62f4:	4630      	mov	r0, r6
   d62f6:	f000 fc20 	bl	d6b3a <_ZdlPvj>
   d62fa:	e7cc      	b.n	d6296 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d62fc:	4631      	mov	r1, r6
   d62fe:	a803      	add	r0, sp, #12
   d6300:	f7ff ff7c 	bl	d61fc <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d6304:	7b2b      	ldrb	r3, [r5, #12]
   d6306:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d630a:	2010      	movs	r0, #16
   d630c:	f7fd fec3 	bl	d4096 <_Znwj>
   d6310:	4605      	mov	r5, r0
   d6312:	b1d0      	cbz	r0, d634a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d6314:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6316:	2014      	movs	r0, #20
   d6318:	f7fd febd 	bl	d4096 <_Znwj>
   d631c:	4604      	mov	r4, r0
   d631e:	b178      	cbz	r0, d6340 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d6320:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d6322:	4601      	mov	r1, r0
   d6324:	a803      	add	r0, sp, #12
   d6326:	f7ff fdd4 	bl	d5ed2 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d632a:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d632c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d632e:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6330:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d6332:	9205      	str	r2, [sp, #20]
   d6334:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d6336:	60e3      	str	r3, [r4, #12]
   d6338:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d633c:	9206      	str	r2, [sp, #24]
   d633e:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d6340:	4b06      	ldr	r3, [pc, #24]	; (d635c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d6342:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d6344:	4b06      	ldr	r3, [pc, #24]	; (d6360 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6346:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d6348:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d634a:	a803      	add	r0, sp, #12
   d634c:	f7ff fa4a 	bl	d57e4 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d6350:	2200      	movs	r2, #0
   d6352:	4629      	mov	r1, r5
   d6354:	4803      	ldr	r0, [pc, #12]	; (d6364 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d6356:	f7ff f9e1 	bl	d571c <application_thread_invoke>
   d635a:	e7c7      	b.n	d62ec <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d635c:	000d5f29 	.word	0x000d5f29
   d6360:	000d621b 	.word	0x000d621b
   d6364:	000d5abd 	.word	0x000d5abd

000d6368 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d6368:	4b01      	ldr	r3, [pc, #4]	; (d6370 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d636a:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d636c:	4770      	bx	lr
   d636e:	bf00      	nop
   d6370:	2003e440 	.word	0x2003e440

000d6374 <serialEventRun>:
{
   d6374:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d6376:	4b0b      	ldr	r3, [pc, #44]	; (d63a4 <serialEventRun+0x30>)
   d6378:	b143      	cbz	r3, d638c <serialEventRun+0x18>
   d637a:	f7ff fcab 	bl	d5cd4 <_Z16_fetch_usbserialv>
   d637e:	6803      	ldr	r3, [r0, #0]
   d6380:	691b      	ldr	r3, [r3, #16]
   d6382:	4798      	blx	r3
   d6384:	2800      	cmp	r0, #0
   d6386:	dd01      	ble.n	d638c <serialEventRun+0x18>
        serialEvent();
   d6388:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d638c:	4b06      	ldr	r3, [pc, #24]	; (d63a8 <serialEventRun+0x34>)
   d638e:	b143      	cbz	r3, d63a2 <serialEventRun+0x2e>
   d6390:	f7ff fbfc 	bl	d5b8c <_Z22__fetch_global_Serial1v>
   d6394:	6803      	ldr	r3, [r0, #0]
   d6396:	691b      	ldr	r3, [r3, #16]
   d6398:	4798      	blx	r3
   d639a:	2800      	cmp	r0, #0
   d639c:	dd01      	ble.n	d63a2 <serialEventRun+0x2e>
        serialEvent1();
   d639e:	f3af 8000 	nop.w
}
   d63a2:	bd08      	pop	{r3, pc}
	...

000d63ac <_post_loop>:
{
   d63ac:	b508      	push	{r3, lr}
	serialEventRun();
   d63ae:	f7ff ffe1 	bl	d6374 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d63b2:	f7ff f8db 	bl	d556c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d63b6:	4b01      	ldr	r3, [pc, #4]	; (d63bc <_post_loop+0x10>)
   d63b8:	6018      	str	r0, [r3, #0]
}
   d63ba:	bd08      	pop	{r3, pc}
   d63bc:	2003e7ec 	.word	0x2003e7ec

000d63c0 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d63c0:	4802      	ldr	r0, [pc, #8]	; (d63cc <_Z33system_initialize_user_backup_ramv+0xc>)
   d63c2:	4a03      	ldr	r2, [pc, #12]	; (d63d0 <_Z33system_initialize_user_backup_ramv+0x10>)
   d63c4:	4903      	ldr	r1, [pc, #12]	; (d63d4 <_Z33system_initialize_user_backup_ramv+0x14>)
   d63c6:	1a12      	subs	r2, r2, r0
   d63c8:	f002 bce8 	b.w	d8d9c <memcpy>
   d63cc:	2003f400 	.word	0x2003f400
   d63d0:	2003f404 	.word	0x2003f404
   d63d4:	000d9558 	.word	0x000d9558

000d63d8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d63d8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d63da:	2300      	movs	r3, #0
   d63dc:	9300      	str	r3, [sp, #0]
   d63de:	461a      	mov	r2, r3
   d63e0:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d63e4:	f7ff f9ac 	bl	d5740 <system_ctrl_set_result>
}
   d63e8:	b003      	add	sp, #12
   d63ea:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d63f0 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d63f0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d63f2:	8843      	ldrh	r3, [r0, #2]
   d63f4:	2b0a      	cmp	r3, #10
   d63f6:	d008      	beq.n	d640a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d63f8:	2b50      	cmp	r3, #80	; 0x50
   d63fa:	d10b      	bne.n	d6414 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d63fc:	4b09      	ldr	r3, [pc, #36]	; (d6424 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d63fe:	681b      	ldr	r3, [r3, #0]
   d6400:	b14b      	cbz	r3, d6416 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d6402:	b003      	add	sp, #12
   d6404:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d6408:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d640a:	f7ff ffe5 	bl	d63d8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d640e:	b003      	add	sp, #12
   d6410:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6414:	2300      	movs	r3, #0
   d6416:	9300      	str	r3, [sp, #0]
   d6418:	461a      	mov	r2, r3
   d641a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d641e:	f7ff f98f 	bl	d5740 <system_ctrl_set_result>
}
   d6422:	e7f4      	b.n	d640e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d6424:	2003e79c 	.word	0x2003e79c

000d6428 <module_user_init_hook>:
{
   d6428:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d642a:	4c12      	ldr	r4, [pc, #72]	; (d6474 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d642c:	4812      	ldr	r0, [pc, #72]	; (d6478 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d642e:	4d13      	ldr	r5, [pc, #76]	; (d647c <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d6430:	2100      	movs	r1, #0
   d6432:	f7ff f9cf 	bl	d57d4 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d6436:	6823      	ldr	r3, [r4, #0]
   d6438:	42ab      	cmp	r3, r5
   d643a:	4b11      	ldr	r3, [pc, #68]	; (d6480 <module_user_init_hook+0x58>)
   d643c:	bf0c      	ite	eq
   d643e:	2201      	moveq	r2, #1
   d6440:	2200      	movne	r2, #0
   d6442:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d6444:	d002      	beq.n	d644c <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d6446:	f7ff ffbb 	bl	d63c0 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d644a:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d644c:	f7ff f886 	bl	d555c <HAL_RNG_GetRandomNumber>
   d6450:	4604      	mov	r4, r0
    srand(seed);
   d6452:	f002 fcb9 	bl	d8dc8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d6456:	4b0b      	ldr	r3, [pc, #44]	; (d6484 <module_user_init_hook+0x5c>)
   d6458:	b113      	cbz	r3, d6460 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d645a:	4620      	mov	r0, r4
   d645c:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d6460:	2100      	movs	r1, #0
   d6462:	4808      	ldr	r0, [pc, #32]	; (d6484 <module_user_init_hook+0x5c>)
   d6464:	f7ff f8e2 	bl	d562c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d6468:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d646c:	4806      	ldr	r0, [pc, #24]	; (d6488 <module_user_init_hook+0x60>)
   d646e:	2100      	movs	r1, #0
   d6470:	f7ff b95c 	b.w	d572c <system_ctrl_set_app_request_handler>
   d6474:	2003f400 	.word	0x2003f400
   d6478:	000d6369 	.word	0x000d6369
   d647c:	9a271c1e 	.word	0x9a271c1e
   d6480:	2003e798 	.word	0x2003e798
   d6484:	00000000 	.word	0x00000000
   d6488:	000d63f1 	.word	0x000d63f1

000d648c <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d648c:	b510      	push	{r4, lr}
   d648e:	4604      	mov	r4, r0
   d6490:	f7ff f9a8 	bl	d57e4 <_ZNSt14_Function_baseD1Ev>
   d6494:	4620      	mov	r0, r4
   d6496:	bd10      	pop	{r4, pc}

000d6498 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d6498:	4803      	ldr	r0, [pc, #12]	; (d64a8 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d649a:	4a04      	ldr	r2, [pc, #16]	; (d64ac <_GLOBAL__sub_I_RGB+0x14>)
   d649c:	4904      	ldr	r1, [pc, #16]	; (d64b0 <_GLOBAL__sub_I_RGB+0x18>)
   d649e:	2300      	movs	r3, #0
   d64a0:	6083      	str	r3, [r0, #8]
   d64a2:	f000 bb45 	b.w	d6b30 <__aeabi_atexit>
   d64a6:	bf00      	nop
   d64a8:	2003e7a0 	.word	0x2003e7a0
   d64ac:	2003e4a4 	.word	0x2003e4a4
   d64b0:	000d648d 	.word	0x000d648d

000d64b4 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d64b4:	2100      	movs	r1, #0
   d64b6:	f7ff b919 	b.w	d56ec <system_delay_ms>
	...

000d64bc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d64bc:	4b02      	ldr	r3, [pc, #8]	; (d64c8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d64be:	681a      	ldr	r2, [r3, #0]
   d64c0:	4b02      	ldr	r3, [pc, #8]	; (d64cc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d64c2:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d64c4:	4770      	bx	lr
   d64c6:	bf00      	nop
   d64c8:	2003e438 	.word	0x2003e438
   d64cc:	2003e7b0 	.word	0x2003e7b0

000d64d0 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d64d0:	4b01      	ldr	r3, [pc, #4]	; (d64d8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d64d2:	4a02      	ldr	r2, [pc, #8]	; (d64dc <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d64d4:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d64d6:	4770      	bx	lr
   d64d8:	2003e7b4 	.word	0x2003e7b4
   d64dc:	000d94cc 	.word	0x000d94cc

000d64e0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d64e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d64e2:	4606      	mov	r6, r0
   d64e4:	460d      	mov	r5, r1
  size_t n = 0;
   d64e6:	188f      	adds	r7, r1, r2
   d64e8:	2400      	movs	r4, #0
  while (size--) {
   d64ea:	42bd      	cmp	r5, r7
   d64ec:	d00c      	beq.n	d6508 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d64ee:	6833      	ldr	r3, [r6, #0]
   d64f0:	f815 1b01 	ldrb.w	r1, [r5], #1
   d64f4:	689b      	ldr	r3, [r3, #8]
   d64f6:	4630      	mov	r0, r6
   d64f8:	4798      	blx	r3
     if (chunk>=0)
   d64fa:	1e03      	subs	r3, r0, #0
   d64fc:	db01      	blt.n	d6502 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d64fe:	441c      	add	r4, r3
  while (size--) {
   d6500:	e7f3      	b.n	d64ea <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d6502:	2c00      	cmp	r4, #0
   d6504:	bf08      	it	eq
   d6506:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d6508:	4620      	mov	r0, r4
   d650a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d650c <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   d650c:	b513      	push	{r0, r1, r4, lr}
   d650e:	4604      	mov	r4, r0
    }
   d6510:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d6512:	b159      	cbz	r1, d652c <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d6514:	9101      	str	r1, [sp, #4]
   d6516:	f002 fc98 	bl	d8e4a <strlen>
   d651a:	6823      	ldr	r3, [r4, #0]
   d651c:	9901      	ldr	r1, [sp, #4]
   d651e:	68db      	ldr	r3, [r3, #12]
   d6520:	4602      	mov	r2, r0
   d6522:	4620      	mov	r0, r4
    }
   d6524:	b002      	add	sp, #8
   d6526:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d652a:	4718      	bx	r3
    }
   d652c:	b002      	add	sp, #8
   d652e:	bd10      	pop	{r4, pc}

000d6530 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d6530:	b508      	push	{r3, lr}
  return write(str);
   d6532:	f7ff ffeb 	bl	d650c <_ZN5Print5writeEPKc>
}
   d6536:	bd08      	pop	{r3, pc}

000d6538 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d6538:	6803      	ldr	r3, [r0, #0]
   d653a:	689b      	ldr	r3, [r3, #8]
   d653c:	4718      	bx	r3

000d653e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d653e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d6540:	210d      	movs	r1, #13
{
   d6542:	4605      	mov	r5, r0
  size_t n = print('\r');
   d6544:	f7ff fff8 	bl	d6538 <_ZN5Print5printEc>
  n += print('\n');
   d6548:	210a      	movs	r1, #10
  size_t n = print('\r');
   d654a:	4604      	mov	r4, r0
  n += print('\n');
   d654c:	4628      	mov	r0, r5
   d654e:	f7ff fff3 	bl	d6538 <_ZN5Print5printEc>
  return n;
}
   d6552:	4420      	add	r0, r4
   d6554:	bd38      	pop	{r3, r4, r5, pc}

000d6556 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d6556:	b538      	push	{r3, r4, r5, lr}
   d6558:	4605      	mov	r5, r0
  return write(str);
   d655a:	f7ff ffd7 	bl	d650c <_ZN5Print5writeEPKc>
   d655e:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d6560:	4628      	mov	r0, r5
   d6562:	f7ff ffec 	bl	d653e <_ZN5Print7printlnEv>
  return n;
}
   d6566:	4420      	add	r0, r4
   d6568:	bd38      	pop	{r3, r4, r5, pc}

000d656a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d656a:	b530      	push	{r4, r5, lr}
   d656c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d656e:	2300      	movs	r3, #0
   d6570:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d6574:	2a01      	cmp	r2, #1
   d6576:	bf98      	it	ls
   d6578:	220a      	movls	r2, #10
   d657a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d657c:	460d      	mov	r5, r1
   d657e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d6582:	fb01 5312 	mls	r3, r1, r2, r5
   d6586:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d658a:	2b09      	cmp	r3, #9
   d658c:	bf94      	ite	ls
   d658e:	3330      	addls	r3, #48	; 0x30
   d6590:	3337      	addhi	r3, #55	; 0x37
   d6592:	b2db      	uxtb	r3, r3
  } while(n);
   d6594:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d6596:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d659a:	d9ef      	bls.n	d657c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d659c:	4621      	mov	r1, r4
   d659e:	f7ff ffb5 	bl	d650c <_ZN5Print5writeEPKc>
}
   d65a2:	b00b      	add	sp, #44	; 0x2c
   d65a4:	bd30      	pop	{r4, r5, pc}

000d65a6 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   d65a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d65aa:	b086      	sub	sp, #24
   d65ac:	af00      	add	r7, sp, #0
   d65ae:	4605      	mov	r5, r0
   d65b0:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   d65b2:	1d38      	adds	r0, r7, #4
   d65b4:	2114      	movs	r1, #20
{
   d65b6:	4614      	mov	r4, r2
    va_copy(args2, args);
   d65b8:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   d65ba:	f7ff f8eb 	bl	d5794 <vsnprintf>

    if (n<bufsize)
   d65be:	2813      	cmp	r0, #19
   d65c0:	d80e      	bhi.n	d65e0 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   d65c2:	1d39      	adds	r1, r7, #4
   d65c4:	4628      	mov	r0, r5
   d65c6:	f7ff ffa1 	bl	d650c <_ZN5Print5writeEPKc>
   d65ca:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   d65cc:	b11e      	cbz	r6, d65d6 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   d65ce:	4628      	mov	r0, r5
   d65d0:	f7ff ffb5 	bl	d653e <_ZN5Print7printlnEv>
   d65d4:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   d65d6:	4620      	mov	r0, r4
   d65d8:	3718      	adds	r7, #24
   d65da:	46bd      	mov	sp, r7
   d65dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   d65e0:	f100 0308 	add.w	r3, r0, #8
   d65e4:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   d65e8:	46e8      	mov	r8, sp
        char bigger[n+1];
   d65ea:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   d65ee:	4622      	mov	r2, r4
   d65f0:	1c41      	adds	r1, r0, #1
   d65f2:	683b      	ldr	r3, [r7, #0]
   d65f4:	4668      	mov	r0, sp
   d65f6:	f7ff f8cd 	bl	d5794 <vsnprintf>
  return write(str);
   d65fa:	4669      	mov	r1, sp
   d65fc:	4628      	mov	r0, r5
   d65fe:	f7ff ff85 	bl	d650c <_ZN5Print5writeEPKc>
   d6602:	4604      	mov	r4, r0
   d6604:	46c5      	mov	sp, r8
   d6606:	e7e1      	b.n	d65cc <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000d6608 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d6608:	b510      	push	{r4, lr}
   d660a:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d660c:	6800      	ldr	r0, [r0, #0]
   d660e:	b108      	cbz	r0, d6614 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d6610:	f7fe ff9c 	bl	d554c <os_mutex_recursive_destroy>
    }
   d6614:	4620      	mov	r0, r4
   d6616:	bd10      	pop	{r4, pc}

000d6618 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d6618:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d661a:	4c06      	ldr	r4, [pc, #24]	; (d6634 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d661c:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d661e:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d6620:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d6622:	f7fe ff8b 	bl	d553c <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d6626:	4620      	mov	r0, r4
   d6628:	4a03      	ldr	r2, [pc, #12]	; (d6638 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d662a:	4904      	ldr	r1, [pc, #16]	; (d663c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d662c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d6630:	f000 ba7e 	b.w	d6b30 <__aeabi_atexit>
   d6634:	2003e7b8 	.word	0x2003e7b8
   d6638:	2003e4a4 	.word	0x2003e4a4
   d663c:	000d6609 	.word	0x000d6609

000d6640 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d6640:	b510      	push	{r4, lr}
   d6642:	4604      	mov	r4, r0
{
	free(buffer);
   d6644:	6800      	ldr	r0, [r0, #0]
   d6646:	f7ff f88d 	bl	d5764 <free>
}
   d664a:	4620      	mov	r0, r4
   d664c:	bd10      	pop	{r4, pc}

000d664e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d664e:	b510      	push	{r4, lr}
   d6650:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d6652:	6800      	ldr	r0, [r0, #0]
   d6654:	b108      	cbz	r0, d665a <_ZN6String10invalidateEv+0xc>
   d6656:	f7ff f885 	bl	d5764 <free>
	buffer = NULL;
   d665a:	2300      	movs	r3, #0
	capacity = len = 0;
   d665c:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d6660:	6023      	str	r3, [r4, #0]
}
   d6662:	bd10      	pop	{r4, pc}

000d6664 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d6664:	b538      	push	{r3, r4, r5, lr}
   d6666:	4604      	mov	r4, r0
   d6668:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d666a:	6800      	ldr	r0, [r0, #0]
   d666c:	3101      	adds	r1, #1
   d666e:	f7ff f881 	bl	d5774 <realloc>
	if (newbuffer) {
   d6672:	b110      	cbz	r0, d667a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d6674:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d6678:	2001      	movs	r0, #1
	}
	return 0;
}
   d667a:	bd38      	pop	{r3, r4, r5, pc}

000d667c <_ZN6String7reserveEj>:
{
   d667c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d667e:	6803      	ldr	r3, [r0, #0]
{
   d6680:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d6682:	b123      	cbz	r3, d668e <_ZN6String7reserveEj+0x12>
   d6684:	6843      	ldr	r3, [r0, #4]
   d6686:	428b      	cmp	r3, r1
   d6688:	d301      	bcc.n	d668e <_ZN6String7reserveEj+0x12>
   d668a:	2001      	movs	r0, #1
}
   d668c:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d668e:	4620      	mov	r0, r4
   d6690:	f7ff ffe8 	bl	d6664 <_ZN6String12changeBufferEj>
   d6694:	2800      	cmp	r0, #0
   d6696:	d0f9      	beq.n	d668c <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d6698:	68a3      	ldr	r3, [r4, #8]
   d669a:	2b00      	cmp	r3, #0
   d669c:	d1f5      	bne.n	d668a <_ZN6String7reserveEj+0xe>
   d669e:	6822      	ldr	r2, [r4, #0]
   d66a0:	7013      	strb	r3, [r2, #0]
   d66a2:	e7f2      	b.n	d668a <_ZN6String7reserveEj+0xe>

000d66a4 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d66a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d66a6:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d66a8:	4611      	mov	r1, r2
   d66aa:	9201      	str	r2, [sp, #4]
{
   d66ac:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d66ae:	f7ff ffe5 	bl	d667c <_ZN6String7reserveEj>
   d66b2:	9a01      	ldr	r2, [sp, #4]
   d66b4:	b928      	cbnz	r0, d66c2 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d66b6:	4620      	mov	r0, r4
   d66b8:	f7ff ffc9 	bl	d664e <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d66bc:	4620      	mov	r0, r4
   d66be:	b003      	add	sp, #12
   d66c0:	bd30      	pop	{r4, r5, pc}
	len = length;
   d66c2:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d66c4:	4629      	mov	r1, r5
   d66c6:	6820      	ldr	r0, [r4, #0]
   d66c8:	f002 fb68 	bl	d8d9c <memcpy>
	buffer[len] = 0;
   d66cc:	6822      	ldr	r2, [r4, #0]
   d66ce:	68a3      	ldr	r3, [r4, #8]
   d66d0:	2100      	movs	r1, #0
   d66d2:	54d1      	strb	r1, [r2, r3]
	return *this;
   d66d4:	e7f2      	b.n	d66bc <_ZN6String4copyEPKcj+0x18>

000d66d6 <_ZN6StringC1EPKc>:
	buffer = NULL;
   d66d6:	2300      	movs	r3, #0
String::String(const char *cstr)
   d66d8:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d66da:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d66de:	4604      	mov	r4, r0
	len = 0;
   d66e0:	6083      	str	r3, [r0, #8]
	flags = 0;
   d66e2:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d66e4:	b141      	cbz	r1, d66f8 <_ZN6StringC1EPKc+0x22>
   d66e6:	4608      	mov	r0, r1
   d66e8:	9101      	str	r1, [sp, #4]
   d66ea:	f002 fbae 	bl	d8e4a <strlen>
   d66ee:	9901      	ldr	r1, [sp, #4]
   d66f0:	4602      	mov	r2, r0
   d66f2:	4620      	mov	r0, r4
   d66f4:	f7ff ffd6 	bl	d66a4 <_ZN6String4copyEPKcj>
}
   d66f8:	4620      	mov	r0, r4
   d66fa:	b002      	add	sp, #8
   d66fc:	bd10      	pop	{r4, pc}

000d66fe <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d66fe:	4288      	cmp	r0, r1
{
   d6700:	b510      	push	{r4, lr}
   d6702:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d6704:	d005      	beq.n	d6712 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d6706:	680b      	ldr	r3, [r1, #0]
   d6708:	b12b      	cbz	r3, d6716 <_ZN6StringaSERKS_+0x18>
   d670a:	688a      	ldr	r2, [r1, #8]
   d670c:	4619      	mov	r1, r3
   d670e:	f7ff ffc9 	bl	d66a4 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d6712:	4620      	mov	r0, r4
   d6714:	bd10      	pop	{r4, pc}
	else invalidate();
   d6716:	f7ff ff9a 	bl	d664e <_ZN6String10invalidateEv>
   d671a:	e7fa      	b.n	d6712 <_ZN6StringaSERKS_+0x14>

000d671c <_ZN6StringC1ERKS_>:
String::String(const String &value)
   d671c:	b510      	push	{r4, lr}
	buffer = NULL;
   d671e:	2300      	movs	r3, #0
String::String(const String &value)
   d6720:	4604      	mov	r4, r0
	capacity = 0;
   d6722:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d6726:	6083      	str	r3, [r0, #8]
	flags = 0;
   d6728:	7303      	strb	r3, [r0, #12]
	*this = value;
   d672a:	f7ff ffe8 	bl	d66fe <_ZN6StringaSERKS_>
}
   d672e:	4620      	mov	r0, r4
   d6730:	bd10      	pop	{r4, pc}

000d6732 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d6732:	b513      	push	{r0, r1, r4, lr}
   d6734:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   d6736:	b159      	cbz	r1, d6750 <_ZN6StringaSEPKc+0x1e>
   d6738:	4608      	mov	r0, r1
   d673a:	9101      	str	r1, [sp, #4]
   d673c:	f002 fb85 	bl	d8e4a <strlen>
   d6740:	9901      	ldr	r1, [sp, #4]
   d6742:	4602      	mov	r2, r0
   d6744:	4620      	mov	r0, r4
   d6746:	f7ff ffad 	bl	d66a4 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d674a:	4620      	mov	r0, r4
   d674c:	b002      	add	sp, #8
   d674e:	bd10      	pop	{r4, pc}
	else invalidate();
   d6750:	f7ff ff7d 	bl	d664e <_ZN6String10invalidateEv>
   d6754:	e7f9      	b.n	d674a <_ZN6StringaSEPKc+0x18>

000d6756 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d6756:	b510      	push	{r4, lr}
   d6758:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d675a:	6800      	ldr	r0, [r0, #0]
   d675c:	b118      	cbz	r0, d6766 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d675e:	f7ff f801 	bl	d5764 <free>
            wakeupSource_ = nullptr;
   d6762:	2300      	movs	r3, #0
   d6764:	6023      	str	r3, [r4, #0]
        }
    }
   d6766:	bd10      	pop	{r4, pc}

000d6768 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d6768:	b510      	push	{r4, lr}
   d676a:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d676c:	f7ff fff3 	bl	d6756 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
   d6770:	4620      	mov	r0, r4
   d6772:	bd10      	pop	{r4, pc}

000d6774 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d6774:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d6776:	4b09      	ldr	r3, [pc, #36]	; (d679c <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   d6778:	4c09      	ldr	r4, [pc, #36]	; (d67a0 <_GLOBAL__sub_I_System+0x2c>)
   d677a:	2202      	movs	r2, #2
   d677c:	2000      	movs	r0, #0
   d677e:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d6780:	4b08      	ldr	r3, [pc, #32]	; (d67a4 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d6782:	6020      	str	r0, [r4, #0]
   d6784:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d6786:	71a0      	strb	r0, [r4, #6]
   d6788:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d678a:	f7fe ffa7 	bl	d56dc <set_system_mode>
SystemClass System;
   d678e:	4620      	mov	r0, r4
   d6790:	4a05      	ldr	r2, [pc, #20]	; (d67a8 <_GLOBAL__sub_I_System+0x34>)
   d6792:	4906      	ldr	r1, [pc, #24]	; (d67ac <_GLOBAL__sub_I_System+0x38>)
   d6794:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d6798:	f000 b9ca 	b.w	d6b30 <__aeabi_atexit>
   d679c:	2003e7c8 	.word	0x2003e7c8
   d67a0:	2003e7bc 	.word	0x2003e7bc
   d67a4:	ffff0000 	.word	0xffff0000
   d67a8:	2003e4a4 	.word	0x2003e4a4
   d67ac:	000d6769 	.word	0x000d6769

000d67b0 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return hal_spi_acquire(_spi, nullptr);
   d67b0:	2100      	movs	r1, #0
   d67b2:	f7fe be6b 	b.w	d548c <hal_spi_acquire>

000d67b6 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   d67b6:	2100      	movs	r1, #0
   d67b8:	f7fe be70 	b.w	d549c <hal_spi_release>

000d67bc <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d67bc:	b510      	push	{r4, lr}
   d67be:	4604      	mov	r4, r0
   d67c0:	4608      	mov	r0, r1
{
    _spi = spi;
   d67c2:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d67c4:	f7fe fe42 	bl	d544c <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d67c8:	2300      	movs	r3, #0
   d67ca:	6063      	str	r3, [r4, #4]
}
   d67cc:	4620      	mov	r0, r4
   d67ce:	bd10      	pop	{r4, pc}

000d67d0 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d67d0:	b510      	push	{r4, lr}
   d67d2:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d67d4:	7800      	ldrb	r0, [r0, #0]
   d67d6:	f7ff ffeb 	bl	d67b0 <_ZN8SPIClass4lockEv.isra.0>
   d67da:	b948      	cbnz	r0, d67f0 <_ZN8SPIClass5beginEv+0x20>
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   d67dc:	7820      	ldrb	r0, [r4, #0]
   d67de:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d67e2:	f7fe fe23 	bl	d542c <hal_spi_begin>
        unlock();
   d67e6:	7820      	ldrb	r0, [r4, #0]
    }
}
   d67e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d67ec:	f7ff bfe3 	b.w	d67b6 <_ZN8SPIClass6unlockEv.isra.0>
}
   d67f0:	bd10      	pop	{r4, pc}

000d67f2 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d67f2:	7800      	ldrb	r0, [r0, #0]
   d67f4:	f7ff bfdf 	b.w	d67b6 <_ZN8SPIClass6unlockEv.isra.0>

000d67f8 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d67f8:	0840      	lsrs	r0, r0, #1
{
   d67fa:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   d67fc:	6018      	str	r0, [r3, #0]
   d67fe:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d6800:	6818      	ldr	r0, [r3, #0]
   d6802:	4288      	cmp	r0, r1
   d6804:	b2e5      	uxtb	r5, r4
   d6806:	d906      	bls.n	d6816 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d6808:	3401      	adds	r4, #1
   d680a:	2c08      	cmp	r4, #8
   d680c:	d002      	beq.n	d6814 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d680e:	0840      	lsrs	r0, r0, #1
   d6810:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   d6812:	e7f5      	b.n	d6800 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d6814:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   d6816:	4b02      	ldr	r3, [pc, #8]	; (d6820 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d6818:	5d5b      	ldrb	r3, [r3, r5]
   d681a:	7013      	strb	r3, [r2, #0]
}
   d681c:	bd30      	pop	{r4, r5, pc}
   d681e:	bf00      	nop
   d6820:	000d94d0 	.word	0x000d94d0

000d6824 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   d6824:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6828:	4606      	mov	r6, r0
   d682a:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   d682c:	7800      	ldrb	r0, [r0, #0]
{
   d682e:	460d      	mov	r5, r1
    CHECK(lock());
   d6830:	f7ff ffbe 	bl	d67b0 <_ZN8SPIClass4lockEv.isra.0>
   d6834:	2800      	cmp	r0, #0
   d6836:	db1b      	blt.n	d6870 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   d6838:	7834      	ldrb	r4, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   d683a:	2214      	movs	r2, #20
   d683c:	2100      	movs	r1, #0
   d683e:	a809      	add	r0, sp, #36	; 0x24
   d6840:	f002 faba 	bl	d8db8 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d6844:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   d6846:	2200      	movs	r2, #0
   d6848:	a909      	add	r1, sp, #36	; 0x24
   d684a:	4620      	mov	r0, r4
    info->version = HAL_SPI_INFO_VERSION_1;
   d684c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   d6850:	f7fe fe0c 	bl	d546c <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   d6854:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   d6858:	b113      	cbz	r3, d6860 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   d685a:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
   d685e:	b154      	cbz	r4, d6876 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   d6860:	2700      	movs	r7, #0
   d6862:	46b9      	mov	r9, r7
   d6864:	46b8      	mov	r8, r7
   d6866:	2401      	movs	r4, #1
    if (default_ && other.default_)
   d6868:	792b      	ldrb	r3, [r5, #4]
   d686a:	b15c      	cbz	r4, d6884 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   d686c:	b1c3      	cbz	r3, d68a0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   d686e:	2000      	movs	r0, #0
}
   d6870:	b00f      	add	sp, #60	; 0x3c
   d6872:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   d6876:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d687a:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d687e:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   d6882:	e7f1      	b.n	d6868 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   d6884:	2b00      	cmp	r3, #0
   d6886:	d135      	bne.n	d68f4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   d6888:	68ab      	ldr	r3, [r5, #8]
   d688a:	4543      	cmp	r3, r8
   d688c:	d108      	bne.n	d68a0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   d688e:	f88d 9020 	strb.w	r9, [sp, #32]
   d6892:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d6896:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d689a:	89ab      	ldrh	r3, [r5, #12]
   d689c:	429a      	cmp	r2, r3
   d689e:	d0e6      	beq.n	d686e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   d68a0:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d68a2:	68a9      	ldr	r1, [r5, #8]
            uint8_t divisor = 0;
   d68a4:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d68a8:	980a      	ldr	r0, [sp, #40]	; 0x28
   d68aa:	ab04      	add	r3, sp, #16
   d68ac:	f10d 020f 	add.w	r2, sp, #15
   d68b0:	f7ff ffa2 	bl	d67f8 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   d68b4:	7929      	ldrb	r1, [r5, #4]
   d68b6:	b984      	cbnz	r4, d68da <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   d68b8:	b989      	cbnz	r1, d68de <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d68ba:	68ab      	ldr	r3, [r5, #8]
   d68bc:	4543      	cmp	r3, r8
   d68be:	d30e      	bcc.n	d68de <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   d68c0:	f88d 9020 	strb.w	r9, [sp, #32]
   d68c4:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d68c8:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d68cc:	89ab      	ldrh	r3, [r5, #12]
   d68ce:	429a      	cmp	r2, r3
   d68d0:	d105      	bne.n	d68de <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d68d2:	9b04      	ldr	r3, [sp, #16]
   d68d4:	4543      	cmp	r3, r8
   d68d6:	d102      	bne.n	d68de <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d68d8:	e7c9      	b.n	d686e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   d68da:	2900      	cmp	r1, #0
   d68dc:	d1f9      	bne.n	d68d2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   d68de:	2300      	movs	r3, #0
   d68e0:	9301      	str	r3, [sp, #4]
   d68e2:	7b6b      	ldrb	r3, [r5, #13]
   d68e4:	9300      	str	r3, [sp, #0]
   d68e6:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d68ea:	7b2b      	ldrb	r3, [r5, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d68ec:	7830      	ldrb	r0, [r6, #0]
   d68ee:	f7fe fdc5 	bl	d547c <hal_spi_set_settings>
   d68f2:	e7bc      	b.n	d686e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   d68f4:	e9cd 4400 	strd	r4, r4, [sp]
   d68f8:	4623      	mov	r3, r4
   d68fa:	4622      	mov	r2, r4
   d68fc:	2101      	movs	r1, #1
   d68fe:	e7f5      	b.n	d68ec <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000d6900 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d6900:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   d6902:	7800      	ldrb	r0, [r0, #0]
   d6904:	f7fe fd9a 	bl	d543c <hal_spi_transfer>
}
   d6908:	b2c0      	uxtb	r0, r0
   d690a:	bd08      	pop	{r3, pc}

000d690c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d690c:	2200      	movs	r2, #0
   d690e:	6840      	ldr	r0, [r0, #4]
   d6910:	4611      	mov	r1, r2
   d6912:	f7fe becb 	b.w	d56ac <network_listening>

000d6916 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d6916:	2200      	movs	r2, #0
   d6918:	6840      	ldr	r0, [r0, #4]
   d691a:	4611      	mov	r1, r2
   d691c:	f7fe bed6 	b.w	d56cc <network_get_listen_timeout>

000d6920 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d6920:	6840      	ldr	r0, [r0, #4]
   d6922:	2200      	movs	r2, #0
   d6924:	f7fe beca 	b.w	d56bc <network_set_listen_timeout>

000d6928 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d6928:	6840      	ldr	r0, [r0, #4]
   d692a:	2200      	movs	r2, #0
   d692c:	f081 0101 	eor.w	r1, r1, #1
   d6930:	f7fe beb4 	b.w	d569c <network_listen>

000d6934 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d6934:	2300      	movs	r3, #0
   d6936:	6840      	ldr	r0, [r0, #4]
   d6938:	461a      	mov	r2, r3
   d693a:	4619      	mov	r1, r3
   d693c:	f7fe bea6 	b.w	d568c <network_off>

000d6940 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d6940:	2300      	movs	r3, #0
   d6942:	6840      	ldr	r0, [r0, #4]
   d6944:	461a      	mov	r2, r3
   d6946:	4619      	mov	r1, r3
   d6948:	f7fe be98 	b.w	d567c <network_on>

000d694c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d694c:	2200      	movs	r2, #0
   d694e:	6840      	ldr	r0, [r0, #4]
   d6950:	4611      	mov	r1, r2
   d6952:	f7fe be8b 	b.w	d566c <network_ready>

000d6956 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d6956:	2200      	movs	r2, #0
   d6958:	6840      	ldr	r0, [r0, #4]
   d695a:	4611      	mov	r1, r2
   d695c:	f7fe be76 	b.w	d564c <network_connecting>

000d6960 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6960:	6840      	ldr	r0, [r0, #4]
   d6962:	2200      	movs	r2, #0
   d6964:	2102      	movs	r1, #2
   d6966:	f7fe be79 	b.w	d565c <network_disconnect>

000d696a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d696a:	2300      	movs	r3, #0
   d696c:	6840      	ldr	r0, [r0, #4]
   d696e:	461a      	mov	r2, r3
   d6970:	f7fe be64 	b.w	d563c <network_connect>

000d6974 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d6974:	4b02      	ldr	r3, [pc, #8]	; (d6980 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d6976:	2203      	movs	r2, #3
   d6978:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d697a:	4a02      	ldr	r2, [pc, #8]	; (d6984 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d697c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d697e:	4770      	bx	lr
   d6980:	2003e7cc 	.word	0x2003e7cc
   d6984:	000d94e0 	.word	0x000d94e0

000d6988 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d6988:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d698a:	2300      	movs	r3, #0
   d698c:	2520      	movs	r5, #32
   d698e:	8043      	strh	r3, [r0, #2]
   d6990:	2314      	movs	r3, #20
{
   d6992:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d6994:	8003      	strh	r3, [r0, #0]
   d6996:	6085      	str	r5, [r0, #8]
   d6998:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d699a:	4906      	ldr	r1, [pc, #24]	; (d69b4 <_Z17acquireWireBufferv+0x2c>)
   d699c:	4628      	mov	r0, r5
   d699e:	f000 f8ce 	bl	d6b3e <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d69a2:	4904      	ldr	r1, [pc, #16]	; (d69b4 <_Z17acquireWireBufferv+0x2c>)
	};
   d69a4:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d69a6:	4628      	mov	r0, r5
   d69a8:	f000 f8c9 	bl	d6b3e <_ZnajRKSt9nothrow_t>
	};
   d69ac:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d69ae:	4620      	mov	r0, r4
   d69b0:	bd38      	pop	{r3, r4, r5, pc}
   d69b2:	bf00      	nop
   d69b4:	000d950c 	.word	0x000d950c

000d69b8 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d69b8:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d69ba:	4d0f      	ldr	r5, [pc, #60]	; (d69f8 <_Z19__fetch_global_Wirev+0x40>)
   d69bc:	7829      	ldrb	r1, [r5, #0]
   d69be:	f3bf 8f5b 	dmb	ish
   d69c2:	f011 0401 	ands.w	r4, r1, #1
{
   d69c6:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d69c8:	d113      	bne.n	d69f2 <_Z19__fetch_global_Wirev+0x3a>
   d69ca:	4628      	mov	r0, r5
   d69cc:	f7fd fb69 	bl	d40a2 <__cxa_guard_acquire>
   d69d0:	b178      	cbz	r0, d69f2 <_Z19__fetch_global_Wirev+0x3a>
   d69d2:	a801      	add	r0, sp, #4
   d69d4:	f7ff ffd8 	bl	d6988 <_Z17acquireWireBufferv>
   d69d8:	aa01      	add	r2, sp, #4
   d69da:	4621      	mov	r1, r4
   d69dc:	4807      	ldr	r0, [pc, #28]	; (d69fc <_Z19__fetch_global_Wirev+0x44>)
   d69de:	f7ff f81b 	bl	d5a18 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d69e2:	4628      	mov	r0, r5
   d69e4:	f7fd fb62 	bl	d40ac <__cxa_guard_release>
   d69e8:	4a05      	ldr	r2, [pc, #20]	; (d6a00 <_Z19__fetch_global_Wirev+0x48>)
   d69ea:	4906      	ldr	r1, [pc, #24]	; (d6a04 <_Z19__fetch_global_Wirev+0x4c>)
   d69ec:	4803      	ldr	r0, [pc, #12]	; (d69fc <_Z19__fetch_global_Wirev+0x44>)
   d69ee:	f000 f89f 	bl	d6b30 <__aeabi_atexit>
	return wire;
}
   d69f2:	4802      	ldr	r0, [pc, #8]	; (d69fc <_Z19__fetch_global_Wirev+0x44>)
   d69f4:	b007      	add	sp, #28
   d69f6:	bd30      	pop	{r4, r5, pc}
   d69f8:	2003e7d4 	.word	0x2003e7d4
   d69fc:	2003e7d8 	.word	0x2003e7d8
   d6a00:	2003e4a4 	.word	0x2003e4a4
   d6a04:	000d59c1 	.word	0x000d59c1

000d6a08 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d6a08:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d6a0a:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d6a0c:	d902      	bls.n	d6a14 <pinAvailable+0xc>
    return false;
   d6a0e:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d6a10:	b002      	add	sp, #8
   d6a12:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d6a14:	f1a0 030b 	sub.w	r3, r0, #11
   d6a18:	2b02      	cmp	r3, #2
   d6a1a:	d81a      	bhi.n	d6a52 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d6a1c:	4c17      	ldr	r4, [pc, #92]	; (d6a7c <pinAvailable+0x74>)
   d6a1e:	7821      	ldrb	r1, [r4, #0]
   d6a20:	f3bf 8f5b 	dmb	ish
   d6a24:	f011 0101 	ands.w	r1, r1, #1
   d6a28:	d10b      	bne.n	d6a42 <pinAvailable+0x3a>
   d6a2a:	4620      	mov	r0, r4
   d6a2c:	9101      	str	r1, [sp, #4]
   d6a2e:	f7fd fb38 	bl	d40a2 <__cxa_guard_acquire>
   d6a32:	9901      	ldr	r1, [sp, #4]
   d6a34:	b128      	cbz	r0, d6a42 <pinAvailable+0x3a>
   d6a36:	4812      	ldr	r0, [pc, #72]	; (d6a80 <pinAvailable+0x78>)
   d6a38:	f7ff fec0 	bl	d67bc <_ZN8SPIClassC1E19hal_spi_interface_t>
   d6a3c:	4620      	mov	r0, r4
   d6a3e:	f7fd fb35 	bl	d40ac <__cxa_guard_release>
   d6a42:	4b0f      	ldr	r3, [pc, #60]	; (d6a80 <pinAvailable+0x78>)
   d6a44:	7818      	ldrb	r0, [r3, #0]
   d6a46:	f7fe fd09 	bl	d545c <hal_spi_is_enabled>
   d6a4a:	2800      	cmp	r0, #0
   d6a4c:	d1df      	bne.n	d6a0e <pinAvailable+0x6>
  return true; // 'pin' is available
   d6a4e:	2001      	movs	r0, #1
   d6a50:	e7de      	b.n	d6a10 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d6a52:	2801      	cmp	r0, #1
   d6a54:	d809      	bhi.n	d6a6a <pinAvailable+0x62>
   d6a56:	f7ff ffaf 	bl	d69b8 <_Z19__fetch_global_Wirev>
   d6a5a:	2100      	movs	r1, #0
   d6a5c:	7c00      	ldrb	r0, [r0, #16]
   d6a5e:	f7fe fccd 	bl	d53fc <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d6a62:	f080 0001 	eor.w	r0, r0, #1
   d6a66:	b2c0      	uxtb	r0, r0
   d6a68:	e7d2      	b.n	d6a10 <pinAvailable+0x8>
   d6a6a:	3809      	subs	r0, #9
   d6a6c:	2801      	cmp	r0, #1
   d6a6e:	d8ee      	bhi.n	d6a4e <pinAvailable+0x46>
   d6a70:	f7ff f88c 	bl	d5b8c <_Z22__fetch_global_Serial1v>
   d6a74:	7c00      	ldrb	r0, [r0, #16]
   d6a76:	f7fe fd49 	bl	d550c <hal_usart_is_enabled>
   d6a7a:	e7f2      	b.n	d6a62 <pinAvailable+0x5a>
   d6a7c:	2003e644 	.word	0x2003e644
   d6a80:	2003e648 	.word	0x2003e648

000d6a84 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6a84:	2823      	cmp	r0, #35	; 0x23
{
   d6a86:	b538      	push	{r3, r4, r5, lr}
   d6a88:	4604      	mov	r4, r0
   d6a8a:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6a8c:	d80a      	bhi.n	d6aa4 <pinMode+0x20>
   d6a8e:	29ff      	cmp	r1, #255	; 0xff
   d6a90:	d008      	beq.n	d6aa4 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d6a92:	f7ff ffb9 	bl	d6a08 <pinAvailable>
   d6a96:	b128      	cbz	r0, d6aa4 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d6a98:	4629      	mov	r1, r5
   d6a9a:	4620      	mov	r0, r4
}
   d6a9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d6aa0:	f7fe bd74 	b.w	d558c <HAL_Pin_Mode>
}
   d6aa4:	bd38      	pop	{r3, r4, r5, pc}

000d6aa6 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d6aa6:	b538      	push	{r3, r4, r5, lr}
   d6aa8:	4604      	mov	r4, r0
   d6aaa:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d6aac:	f7fe fd76 	bl	d559c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d6ab0:	28ff      	cmp	r0, #255	; 0xff
   d6ab2:	d010      	beq.n	d6ad6 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d6ab4:	2806      	cmp	r0, #6
   d6ab6:	d804      	bhi.n	d6ac2 <digitalWrite+0x1c>
   d6ab8:	234d      	movs	r3, #77	; 0x4d
   d6aba:	fa23 f000 	lsr.w	r0, r3, r0
   d6abe:	07c3      	lsls	r3, r0, #31
   d6ac0:	d409      	bmi.n	d6ad6 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d6ac2:	4620      	mov	r0, r4
   d6ac4:	f7ff ffa0 	bl	d6a08 <pinAvailable>
   d6ac8:	b128      	cbz	r0, d6ad6 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d6aca:	4629      	mov	r1, r5
   d6acc:	4620      	mov	r0, r4
}
   d6ace:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d6ad2:	f7fe bd6b 	b.w	d55ac <HAL_GPIO_Write>
}
   d6ad6:	bd38      	pop	{r3, r4, r5, pc}

000d6ad8 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d6ad8:	b510      	push	{r4, lr}
   d6ada:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d6adc:	f7fe fd5e 	bl	d559c <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   d6ae0:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   d6ae2:	b2db      	uxtb	r3, r3
   d6ae4:	2b01      	cmp	r3, #1
   d6ae6:	d908      	bls.n	d6afa <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d6ae8:	4620      	mov	r0, r4
   d6aea:	f7ff ff8d 	bl	d6a08 <pinAvailable>
   d6aee:	b120      	cbz	r0, d6afa <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d6af0:	4620      	mov	r0, r4
}
   d6af2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   d6af6:	f7fe bd61 	b.w	d55bc <HAL_GPIO_Read>
}
   d6afa:	2000      	movs	r0, #0
   d6afc:	bd10      	pop	{r4, pc}

000d6afe <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d6afe:	280d      	cmp	r0, #13
{
   d6b00:	b510      	push	{r4, lr}
   d6b02:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   d6b04:	bf9c      	itt	ls
   d6b06:	340e      	addls	r4, #14
   d6b08:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d6b0a:	4620      	mov	r0, r4
   d6b0c:	f7ff ff7c 	bl	d6a08 <pinAvailable>
   d6b10:	b150      	cbz	r0, d6b28 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d6b12:	2103      	movs	r1, #3
   d6b14:	4620      	mov	r0, r4
   d6b16:	f7fe fd31 	bl	d557c <HAL_Validate_Pin_Function>
   d6b1a:	2803      	cmp	r0, #3
   d6b1c:	d104      	bne.n	d6b28 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   d6b1e:	4620      	mov	r0, r4
}
   d6b20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   d6b24:	f7fe bd52 	b.w	d55cc <hal_adc_read>
}
   d6b28:	2000      	movs	r0, #0
   d6b2a:	bd10      	pop	{r4, pc}

000d6b2c <pulseIn>:
 */
uint32_t pulseIn(pin_t pin, uint16_t value) {

    // NO SAFETY CHECKS!!! WILD WILD WEST!!!

    return HAL_Pulse_In(pin, value);
   d6b2c:	f7fe bd56 	b.w	d55dc <HAL_Pulse_In>

000d6b30 <__aeabi_atexit>:
   d6b30:	460b      	mov	r3, r1
   d6b32:	4601      	mov	r1, r0
   d6b34:	4618      	mov	r0, r3
   d6b36:	f002 b923 	b.w	d8d80 <__cxa_atexit>

000d6b3a <_ZdlPvj>:
   d6b3a:	f7fd bab0 	b.w	d409e <_ZdlPv>

000d6b3e <_ZnajRKSt9nothrow_t>:
   d6b3e:	f7fd baac 	b.w	d409a <_Znaj>

000d6b42 <_ZSt25__throw_bad_function_callv>:
   d6b42:	b508      	push	{r3, lr}
   d6b44:	f7fe fe2e 	bl	d57a4 <abort>

000d6b48 <pow>:
   d6b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6b4c:	ed2d 8b02 	vpush	{d8}
   d6b50:	b08d      	sub	sp, #52	; 0x34
   d6b52:	ec57 6b10 	vmov	r6, r7, d0
   d6b56:	ec55 4b11 	vmov	r4, r5, d1
   d6b5a:	f000 f9ad 	bl	d6eb8 <__ieee754_pow>
   d6b5e:	4bae      	ldr	r3, [pc, #696]	; (d6e18 <pow+0x2d0>)
   d6b60:	eeb0 8a40 	vmov.f32	s16, s0
   d6b64:	eef0 8a60 	vmov.f32	s17, s1
   d6b68:	f993 9000 	ldrsb.w	r9, [r3]
   d6b6c:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
   d6b70:	d037      	beq.n	d6be2 <pow+0x9a>
   d6b72:	4622      	mov	r2, r4
   d6b74:	462b      	mov	r3, r5
   d6b76:	4620      	mov	r0, r4
   d6b78:	4629      	mov	r1, r5
   d6b7a:	f001 fdd9 	bl	d8730 <__aeabi_dcmpun>
   d6b7e:	4683      	mov	fp, r0
   d6b80:	bb78      	cbnz	r0, d6be2 <pow+0x9a>
   d6b82:	4632      	mov	r2, r6
   d6b84:	463b      	mov	r3, r7
   d6b86:	4630      	mov	r0, r6
   d6b88:	4639      	mov	r1, r7
   d6b8a:	f001 fdd1 	bl	d8730 <__aeabi_dcmpun>
   d6b8e:	4680      	mov	r8, r0
   d6b90:	2800      	cmp	r0, #0
   d6b92:	f040 8093 	bne.w	d6cbc <pow+0x174>
   d6b96:	f04f 0a00 	mov.w	sl, #0
   d6b9a:	f04f 0b00 	mov.w	fp, #0
   d6b9e:	4630      	mov	r0, r6
   d6ba0:	4639      	mov	r1, r7
   d6ba2:	4652      	mov	r2, sl
   d6ba4:	465b      	mov	r3, fp
   d6ba6:	f001 fd91 	bl	d86cc <__aeabi_dcmpeq>
   d6baa:	b318      	cbz	r0, d6bf4 <pow+0xac>
   d6bac:	4652      	mov	r2, sl
   d6bae:	465b      	mov	r3, fp
   d6bb0:	4620      	mov	r0, r4
   d6bb2:	4629      	mov	r1, r5
   d6bb4:	f001 fd8a 	bl	d86cc <__aeabi_dcmpeq>
   d6bb8:	9000      	str	r0, [sp, #0]
   d6bba:	2800      	cmp	r0, #0
   d6bbc:	d057      	beq.n	d6c6e <pow+0x126>
   d6bbe:	4b97      	ldr	r3, [pc, #604]	; (d6e1c <pow+0x2d4>)
   d6bc0:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   d6bc4:	2201      	movs	r2, #1
   d6bc6:	e9cd 6704 	strd	r6, r7, [sp, #16]
   d6bca:	e9cd 4506 	strd	r4, r5, [sp, #24]
   d6bce:	e9cd ab08 	strd	sl, fp, [sp, #32]
   d6bd2:	9202      	str	r2, [sp, #8]
   d6bd4:	9303      	str	r3, [sp, #12]
   d6bd6:	f1b9 0f00 	cmp.w	r9, #0
   d6bda:	f000 8089 	beq.w	d6cf0 <pow+0x1a8>
   d6bde:	ed9f 8b8a 	vldr	d8, [pc, #552]	; d6e08 <pow+0x2c0>
   d6be2:	eeb0 0a48 	vmov.f32	s0, s16
   d6be6:	eef0 0a68 	vmov.f32	s1, s17
   d6bea:	b00d      	add	sp, #52	; 0x34
   d6bec:	ecbd 8b02 	vpop	{d8}
   d6bf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6bf4:	eeb0 0a48 	vmov.f32	s0, s16
   d6bf8:	eef0 0a68 	vmov.f32	s1, s17
   d6bfc:	f001 f804 	bl	d7c08 <finite>
   d6c00:	4680      	mov	r8, r0
   d6c02:	2800      	cmp	r0, #0
   d6c04:	f000 8082 	beq.w	d6d0c <pow+0x1c4>
   d6c08:	f04f 0800 	mov.w	r8, #0
   d6c0c:	f04f 0900 	mov.w	r9, #0
   d6c10:	ec51 0b18 	vmov	r0, r1, d8
   d6c14:	4642      	mov	r2, r8
   d6c16:	464b      	mov	r3, r9
   d6c18:	f001 fd58 	bl	d86cc <__aeabi_dcmpeq>
   d6c1c:	2800      	cmp	r0, #0
   d6c1e:	d0e0      	beq.n	d6be2 <pow+0x9a>
   d6c20:	ec47 6b10 	vmov	d0, r6, r7
   d6c24:	f000 fff0 	bl	d7c08 <finite>
   d6c28:	2800      	cmp	r0, #0
   d6c2a:	d0da      	beq.n	d6be2 <pow+0x9a>
   d6c2c:	ec45 4b10 	vmov	d0, r4, r5
   d6c30:	f000 ffea 	bl	d7c08 <finite>
   d6c34:	2800      	cmp	r0, #0
   d6c36:	d0d4      	beq.n	d6be2 <pow+0x9a>
   d6c38:	4b77      	ldr	r3, [pc, #476]	; (d6e18 <pow+0x2d0>)
   d6c3a:	4a78      	ldr	r2, [pc, #480]	; (d6e1c <pow+0x2d4>)
   d6c3c:	f993 3000 	ldrsb.w	r3, [r3]
   d6c40:	9203      	str	r2, [sp, #12]
   d6c42:	2104      	movs	r1, #4
   d6c44:	2200      	movs	r2, #0
   d6c46:	2b02      	cmp	r3, #2
   d6c48:	e9cd 6704 	strd	r6, r7, [sp, #16]
   d6c4c:	e9cd 4506 	strd	r4, r5, [sp, #24]
   d6c50:	e9cd 8908 	strd	r8, r9, [sp, #32]
   d6c54:	9102      	str	r1, [sp, #8]
   d6c56:	920a      	str	r2, [sp, #40]	; 0x28
   d6c58:	d004      	beq.n	d6c64 <pow+0x11c>
   d6c5a:	a802      	add	r0, sp, #8
   d6c5c:	f000 ffe0 	bl	d7c20 <matherr>
   d6c60:	2800      	cmp	r0, #0
   d6c62:	d14a      	bne.n	d6cfa <pow+0x1b2>
   d6c64:	f7fe fdae 	bl	d57c4 <__errno>
   d6c68:	2322      	movs	r3, #34	; 0x22
   d6c6a:	6003      	str	r3, [r0, #0]
   d6c6c:	e045      	b.n	d6cfa <pow+0x1b2>
   d6c6e:	ec45 4b10 	vmov	d0, r4, r5
   d6c72:	f000 ffc9 	bl	d7c08 <finite>
   d6c76:	2800      	cmp	r0, #0
   d6c78:	d0b3      	beq.n	d6be2 <pow+0x9a>
   d6c7a:	4652      	mov	r2, sl
   d6c7c:	465b      	mov	r3, fp
   d6c7e:	4620      	mov	r0, r4
   d6c80:	4629      	mov	r1, r5
   d6c82:	f001 fd2d 	bl	d86e0 <__aeabi_dcmplt>
   d6c86:	2800      	cmp	r0, #0
   d6c88:	d0ab      	beq.n	d6be2 <pow+0x9a>
   d6c8a:	4b63      	ldr	r3, [pc, #396]	; (d6e18 <pow+0x2d0>)
   d6c8c:	9900      	ldr	r1, [sp, #0]
   d6c8e:	4a63      	ldr	r2, [pc, #396]	; (d6e1c <pow+0x2d4>)
   d6c90:	f993 3000 	ldrsb.w	r3, [r3]
   d6c94:	910a      	str	r1, [sp, #40]	; 0x28
   d6c96:	2101      	movs	r1, #1
   d6c98:	e9cd 6704 	strd	r6, r7, [sp, #16]
   d6c9c:	e9cd 4506 	strd	r4, r5, [sp, #24]
   d6ca0:	e9cd 1202 	strd	r1, r2, [sp, #8]
   d6ca4:	2b00      	cmp	r3, #0
   d6ca6:	d16f      	bne.n	d6d88 <pow+0x240>
   d6ca8:	e9cd ab08 	strd	sl, fp, [sp, #32]
   d6cac:	a802      	add	r0, sp, #8
   d6cae:	f000 ffb7 	bl	d7c20 <matherr>
   d6cb2:	2800      	cmp	r0, #0
   d6cb4:	d06e      	beq.n	d6d94 <pow+0x24c>
   d6cb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d6cb8:	b32b      	cbz	r3, d6d06 <pow+0x1be>
   d6cba:	e020      	b.n	d6cfe <pow+0x1b6>
   d6cbc:	2200      	movs	r2, #0
   d6cbe:	2300      	movs	r3, #0
   d6cc0:	4620      	mov	r0, r4
   d6cc2:	4629      	mov	r1, r5
   d6cc4:	f001 fd02 	bl	d86cc <__aeabi_dcmpeq>
   d6cc8:	2800      	cmp	r0, #0
   d6cca:	d08a      	beq.n	d6be2 <pow+0x9a>
   d6ccc:	ed9f 8b4e 	vldr	d8, [pc, #312]	; d6e08 <pow+0x2c0>
   d6cd0:	4b52      	ldr	r3, [pc, #328]	; (d6e1c <pow+0x2d4>)
   d6cd2:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
   d6cd6:	2201      	movs	r2, #1
   d6cd8:	f1b9 0f02 	cmp.w	r9, #2
   d6cdc:	e9cd 6704 	strd	r6, r7, [sp, #16]
   d6ce0:	e9cd 4506 	strd	r4, r5, [sp, #24]
   d6ce4:	ed8d 8b08 	vstr	d8, [sp, #32]
   d6ce8:	9202      	str	r2, [sp, #8]
   d6cea:	9303      	str	r3, [sp, #12]
   d6cec:	f43f af79 	beq.w	d6be2 <pow+0x9a>
   d6cf0:	a802      	add	r0, sp, #8
   d6cf2:	f000 ff95 	bl	d7c20 <matherr>
   d6cf6:	2800      	cmp	r0, #0
   d6cf8:	d051      	beq.n	d6d9e <pow+0x256>
   d6cfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d6cfc:	b11b      	cbz	r3, d6d06 <pow+0x1be>
   d6cfe:	f7fe fd61 	bl	d57c4 <__errno>
   d6d02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d6d04:	6003      	str	r3, [r0, #0]
   d6d06:	ed9d 8b08 	vldr	d8, [sp, #32]
   d6d0a:	e76a      	b.n	d6be2 <pow+0x9a>
   d6d0c:	ec47 6b10 	vmov	d0, r6, r7
   d6d10:	f000 ff7a 	bl	d7c08 <finite>
   d6d14:	2800      	cmp	r0, #0
   d6d16:	f43f af77 	beq.w	d6c08 <pow+0xc0>
   d6d1a:	ec45 4b10 	vmov	d0, r4, r5
   d6d1e:	f000 ff73 	bl	d7c08 <finite>
   d6d22:	2800      	cmp	r0, #0
   d6d24:	f43f af70 	beq.w	d6c08 <pow+0xc0>
   d6d28:	ec53 2b18 	vmov	r2, r3, d8
   d6d2c:	ee18 0a10 	vmov	r0, s16
   d6d30:	4619      	mov	r1, r3
   d6d32:	f001 fcfd 	bl	d8730 <__aeabi_dcmpun>
   d6d36:	4b38      	ldr	r3, [pc, #224]	; (d6e18 <pow+0x2d0>)
   d6d38:	2800      	cmp	r0, #0
   d6d3a:	f040 8096 	bne.w	d6e6a <pow+0x322>
   d6d3e:	f993 8000 	ldrsb.w	r8, [r3]
   d6d42:	900a      	str	r0, [sp, #40]	; 0x28
   d6d44:	2303      	movs	r3, #3
   d6d46:	9302      	str	r3, [sp, #8]
   d6d48:	4b34      	ldr	r3, [pc, #208]	; (d6e1c <pow+0x2d4>)
   d6d4a:	9303      	str	r3, [sp, #12]
   d6d4c:	e9cd 6704 	strd	r6, r7, [sp, #16]
   d6d50:	e9cd 4506 	strd	r4, r5, [sp, #24]
   d6d54:	f1b8 0f00 	cmp.w	r8, #0
   d6d58:	d126      	bne.n	d6da8 <pow+0x260>
   d6d5a:	f8df 90d0 	ldr.w	r9, [pc, #208]	; d6e2c <pow+0x2e4>
   d6d5e:	f04f 4860 	mov.w	r8, #3758096384	; 0xe0000000
   d6d62:	4652      	mov	r2, sl
   d6d64:	465b      	mov	r3, fp
   d6d66:	4630      	mov	r0, r6
   d6d68:	4639      	mov	r1, r7
   d6d6a:	e9cd 8908 	strd	r8, r9, [sp, #32]
   d6d6e:	f001 fcb7 	bl	d86e0 <__aeabi_dcmplt>
   d6d72:	bb48      	cbnz	r0, d6dc8 <pow+0x280>
   d6d74:	a802      	add	r0, sp, #8
   d6d76:	f000 ff53 	bl	d7c20 <matherr>
   d6d7a:	2800      	cmp	r0, #0
   d6d7c:	d19b      	bne.n	d6cb6 <pow+0x16e>
   d6d7e:	f7fe fd21 	bl	d57c4 <__errno>
   d6d82:	2322      	movs	r3, #34	; 0x22
   d6d84:	6003      	str	r3, [r0, #0]
   d6d86:	e796      	b.n	d6cb6 <pow+0x16e>
   d6d88:	4925      	ldr	r1, [pc, #148]	; (d6e20 <pow+0x2d8>)
   d6d8a:	2000      	movs	r0, #0
   d6d8c:	2b02      	cmp	r3, #2
   d6d8e:	e9cd 0108 	strd	r0, r1, [sp, #32]
   d6d92:	d18b      	bne.n	d6cac <pow+0x164>
   d6d94:	f7fe fd16 	bl	d57c4 <__errno>
   d6d98:	2321      	movs	r3, #33	; 0x21
   d6d9a:	6003      	str	r3, [r0, #0]
   d6d9c:	e78b      	b.n	d6cb6 <pow+0x16e>
   d6d9e:	f7fe fd11 	bl	d57c4 <__errno>
   d6da2:	2321      	movs	r3, #33	; 0x21
   d6da4:	6003      	str	r3, [r0, #0]
   d6da6:	e7a8      	b.n	d6cfa <pow+0x1b2>
   d6da8:	ed9f 7b19 	vldr	d7, [pc, #100]	; d6e10 <pow+0x2c8>
   d6dac:	4652      	mov	r2, sl
   d6dae:	465b      	mov	r3, fp
   d6db0:	4630      	mov	r0, r6
   d6db2:	4639      	mov	r1, r7
   d6db4:	ed8d 7b08 	vstr	d7, [sp, #32]
   d6db8:	f001 fc92 	bl	d86e0 <__aeabi_dcmplt>
   d6dbc:	2800      	cmp	r0, #0
   d6dbe:	d137      	bne.n	d6e30 <pow+0x2e8>
   d6dc0:	f1b8 0f02 	cmp.w	r8, #2
   d6dc4:	d0db      	beq.n	d6d7e <pow+0x236>
   d6dc6:	e7d5      	b.n	d6d74 <pow+0x22c>
   d6dc8:	4b16      	ldr	r3, [pc, #88]	; (d6e24 <pow+0x2dc>)
   d6dca:	2200      	movs	r2, #0
   d6dcc:	4620      	mov	r0, r4
   d6dce:	4629      	mov	r1, r5
   d6dd0:	f001 fa14 	bl	d81fc <__aeabi_dmul>
   d6dd4:	4602      	mov	r2, r0
   d6dd6:	460b      	mov	r3, r1
   d6dd8:	ec43 2b10 	vmov	d0, r2, r3
   d6ddc:	e9cd 2300 	strd	r2, r3, [sp]
   d6de0:	f000 ff2a 	bl	d7c38 <rint>
   d6de4:	e9dd 2300 	ldrd	r2, r3, [sp]
   d6de8:	ec51 0b10 	vmov	r0, r1, d0
   d6dec:	f001 fc6e 	bl	d86cc <__aeabi_dcmpeq>
   d6df0:	2800      	cmp	r0, #0
   d6df2:	d136      	bne.n	d6e62 <pow+0x31a>
   d6df4:	4b0c      	ldr	r3, [pc, #48]	; (d6e28 <pow+0x2e0>)
   d6df6:	4908      	ldr	r1, [pc, #32]	; (d6e18 <pow+0x2d0>)
   d6df8:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d6dfc:	e9cd 2308 	strd	r2, r3, [sp, #32]
   d6e00:	f991 8000 	ldrsb.w	r8, [r1]
   d6e04:	e7dc      	b.n	d6dc0 <pow+0x278>
   d6e06:	bf00      	nop
   d6e08:	00000000 	.word	0x00000000
   d6e0c:	3ff00000 	.word	0x3ff00000
   d6e10:	00000000 	.word	0x00000000
   d6e14:	7ff00000 	.word	0x7ff00000
   d6e18:	2003e43c 	.word	0x2003e43c
   d6e1c:	000d9510 	.word	0x000d9510
   d6e20:	fff00000 	.word	0xfff00000
   d6e24:	3fe00000 	.word	0x3fe00000
   d6e28:	c7efffff 	.word	0xc7efffff
   d6e2c:	47efffff 	.word	0x47efffff
   d6e30:	4b1c      	ldr	r3, [pc, #112]	; (d6ea4 <pow+0x35c>)
   d6e32:	2200      	movs	r2, #0
   d6e34:	4620      	mov	r0, r4
   d6e36:	4629      	mov	r1, r5
   d6e38:	f001 f9e0 	bl	d81fc <__aeabi_dmul>
   d6e3c:	4602      	mov	r2, r0
   d6e3e:	460b      	mov	r3, r1
   d6e40:	ec43 2b10 	vmov	d0, r2, r3
   d6e44:	e9cd 2300 	strd	r2, r3, [sp]
   d6e48:	f000 fef6 	bl	d7c38 <rint>
   d6e4c:	e9dd 2300 	ldrd	r2, r3, [sp]
   d6e50:	ec51 0b10 	vmov	r0, r1, d0
   d6e54:	f001 fc3a 	bl	d86cc <__aeabi_dcmpeq>
   d6e58:	b918      	cbnz	r0, d6e62 <pow+0x31a>
   d6e5a:	4b13      	ldr	r3, [pc, #76]	; (d6ea8 <pow+0x360>)
   d6e5c:	2200      	movs	r2, #0
   d6e5e:	e9cd 2308 	strd	r2, r3, [sp, #32]
   d6e62:	4b12      	ldr	r3, [pc, #72]	; (d6eac <pow+0x364>)
   d6e64:	f993 8000 	ldrsb.w	r8, [r3]
   d6e68:	e7aa      	b.n	d6dc0 <pow+0x278>
   d6e6a:	f993 9000 	ldrsb.w	r9, [r3]
   d6e6e:	4b10      	ldr	r3, [pc, #64]	; (d6eb0 <pow+0x368>)
   d6e70:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   d6e74:	2201      	movs	r2, #1
   d6e76:	e9cd 6704 	strd	r6, r7, [sp, #16]
   d6e7a:	e9cd 4506 	strd	r4, r5, [sp, #24]
   d6e7e:	e9cd 2302 	strd	r2, r3, [sp, #8]
   d6e82:	f1b9 0f00 	cmp.w	r9, #0
   d6e86:	f43f af0f 	beq.w	d6ca8 <pow+0x160>
   d6e8a:	4652      	mov	r2, sl
   d6e8c:	465b      	mov	r3, fp
   d6e8e:	4650      	mov	r0, sl
   d6e90:	4659      	mov	r1, fp
   d6e92:	f001 fadd 	bl	d8450 <__aeabi_ddiv>
   d6e96:	f1b9 0f02 	cmp.w	r9, #2
   d6e9a:	e9cd 0108 	strd	r0, r1, [sp, #32]
   d6e9e:	f43f af79 	beq.w	d6d94 <pow+0x24c>
   d6ea2:	e703      	b.n	d6cac <pow+0x164>
   d6ea4:	3fe00000 	.word	0x3fe00000
   d6ea8:	fff00000 	.word	0xfff00000
   d6eac:	2003e43c 	.word	0x2003e43c
   d6eb0:	000d9510 	.word	0x000d9510
   d6eb4:	00000000 	.word	0x00000000

000d6eb8 <__ieee754_pow>:
   d6eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6ebc:	ec57 6b11 	vmov	r6, r7, d1
   d6ec0:	ed2d 8b0a 	vpush	{d8-d12}
   d6ec4:	f027 4a00 	bic.w	sl, r7, #2147483648	; 0x80000000
   d6ec8:	ea5a 0206 	orrs.w	r2, sl, r6
   d6ecc:	b089      	sub	sp, #36	; 0x24
   d6ece:	d03d      	beq.n	d6f4c <__ieee754_pow+0x94>
   d6ed0:	ec55 4b10 	vmov	r4, r5, d0
   d6ed4:	4976      	ldr	r1, [pc, #472]	; (d70b0 <__ieee754_pow+0x1f8>)
   d6ed6:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
   d6eda:	4588      	cmp	r8, r1
   d6edc:	ee10 2a10 	vmov	r2, s0
   d6ee0:	46a9      	mov	r9, r5
   d6ee2:	dc2c      	bgt.n	d6f3e <__ieee754_pow+0x86>
   d6ee4:	ee11 3a10 	vmov	r3, s2
   d6ee8:	46bb      	mov	fp, r7
   d6eea:	d03a      	beq.n	d6f62 <__ieee754_pow+0xaa>
   d6eec:	458a      	cmp	sl, r1
   d6eee:	dc26      	bgt.n	d6f3e <__ieee754_pow+0x86>
   d6ef0:	496f      	ldr	r1, [pc, #444]	; (d70b0 <__ieee754_pow+0x1f8>)
   d6ef2:	458a      	cmp	sl, r1
   d6ef4:	d021      	beq.n	d6f3a <__ieee754_pow+0x82>
   d6ef6:	f1b9 0f00 	cmp.w	r9, #0
   d6efa:	db3d      	blt.n	d6f78 <__ieee754_pow+0xc0>
   d6efc:	2100      	movs	r1, #0
   d6efe:	9103      	str	r1, [sp, #12]
   d6f00:	2b00      	cmp	r3, #0
   d6f02:	d155      	bne.n	d6fb0 <__ieee754_pow+0xf8>
   d6f04:	4b6a      	ldr	r3, [pc, #424]	; (d70b0 <__ieee754_pow+0x1f8>)
   d6f06:	459a      	cmp	sl, r3
   d6f08:	f000 80a8 	beq.w	d705c <__ieee754_pow+0x1a4>
   d6f0c:	4b69      	ldr	r3, [pc, #420]	; (d70b4 <__ieee754_pow+0x1fc>)
   d6f0e:	459a      	cmp	sl, r3
   d6f10:	f000 80b6 	beq.w	d7080 <__ieee754_pow+0x1c8>
   d6f14:	f1bb 4f80 	cmp.w	fp, #1073741824	; 0x40000000
   d6f18:	f000 8501 	beq.w	d791e <__ieee754_pow+0xa66>
   d6f1c:	4b66      	ldr	r3, [pc, #408]	; (d70b8 <__ieee754_pow+0x200>)
   d6f1e:	459b      	cmp	fp, r3
   d6f20:	d146      	bne.n	d6fb0 <__ieee754_pow+0xf8>
   d6f22:	f1b9 0f00 	cmp.w	r9, #0
   d6f26:	db43      	blt.n	d6fb0 <__ieee754_pow+0xf8>
   d6f28:	ec45 4b10 	vmov	d0, r4, r5
   d6f2c:	b009      	add	sp, #36	; 0x24
   d6f2e:	ecbd 8b0a 	vpop	{d8-d12}
   d6f32:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6f36:	f000 bd99 	b.w	d7a6c <__ieee754_sqrt>
   d6f3a:	2b00      	cmp	r3, #0
   d6f3c:	d0db      	beq.n	d6ef6 <__ieee754_pow+0x3e>
   d6f3e:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   d6f42:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   d6f46:	ea58 0302 	orrs.w	r3, r8, r2
   d6f4a:	d10d      	bne.n	d6f68 <__ieee754_pow+0xb0>
   d6f4c:	ed9f 7b54 	vldr	d7, [pc, #336]	; d70a0 <__ieee754_pow+0x1e8>
   d6f50:	ed8d 7b00 	vstr	d7, [sp]
   d6f54:	ed9d 0b00 	vldr	d0, [sp]
   d6f58:	b009      	add	sp, #36	; 0x24
   d6f5a:	ecbd 8b0a 	vpop	{d8-d12}
   d6f5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6f62:	b90c      	cbnz	r4, d6f68 <__ieee754_pow+0xb0>
   d6f64:	45c2      	cmp	sl, r8
   d6f66:	ddc3      	ble.n	d6ef0 <__ieee754_pow+0x38>
   d6f68:	4854      	ldr	r0, [pc, #336]	; (d70bc <__ieee754_pow+0x204>)
   d6f6a:	b009      	add	sp, #36	; 0x24
   d6f6c:	ecbd 8b0a 	vpop	{d8-d12}
   d6f70:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6f74:	f000 be58 	b.w	d7c28 <nan>
   d6f78:	4951      	ldr	r1, [pc, #324]	; (d70c0 <__ieee754_pow+0x208>)
   d6f7a:	458a      	cmp	sl, r1
   d6f7c:	f300 8087 	bgt.w	d708e <__ieee754_pow+0x1d6>
   d6f80:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
   d6f84:	458a      	cmp	sl, r1
   d6f86:	dd0f      	ble.n	d6fa8 <__ieee754_pow+0xf0>
   d6f88:	ea4f 512a 	mov.w	r1, sl, asr #20
   d6f8c:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
   d6f90:	2914      	cmp	r1, #20
   d6f92:	f340 84ce 	ble.w	d7932 <__ieee754_pow+0xa7a>
   d6f96:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
   d6f9a:	fa23 f001 	lsr.w	r0, r3, r1
   d6f9e:	fa00 f101 	lsl.w	r1, r0, r1
   d6fa2:	4299      	cmp	r1, r3
   d6fa4:	f000 8520 	beq.w	d79e8 <__ieee754_pow+0xb30>
   d6fa8:	2100      	movs	r1, #0
   d6faa:	9103      	str	r1, [sp, #12]
   d6fac:	2b00      	cmp	r3, #0
   d6fae:	d0ad      	beq.n	d6f0c <__ieee754_pow+0x54>
   d6fb0:	ec45 4b10 	vmov	d0, r4, r5
   d6fb4:	9206      	str	r2, [sp, #24]
   d6fb6:	f000 fe1d 	bl	d7bf4 <fabs>
   d6fba:	9a06      	ldr	r2, [sp, #24]
   d6fbc:	ed8d 0b00 	vstr	d0, [sp]
   d6fc0:	bb5a      	cbnz	r2, d701a <__ieee754_pow+0x162>
   d6fc2:	f1b8 0f00 	cmp.w	r8, #0
   d6fc6:	d004      	beq.n	d6fd2 <__ieee754_pow+0x11a>
   d6fc8:	4b3a      	ldr	r3, [pc, #232]	; (d70b4 <__ieee754_pow+0x1fc>)
   d6fca:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
   d6fce:	429a      	cmp	r2, r3
   d6fd0:	d123      	bne.n	d701a <__ieee754_pow+0x162>
   d6fd2:	f1bb 0f00 	cmp.w	fp, #0
   d6fd6:	da07      	bge.n	d6fe8 <__ieee754_pow+0x130>
   d6fd8:	e9dd 2300 	ldrd	r2, r3, [sp]
   d6fdc:	4935      	ldr	r1, [pc, #212]	; (d70b4 <__ieee754_pow+0x1fc>)
   d6fde:	2000      	movs	r0, #0
   d6fe0:	f001 fa36 	bl	d8450 <__aeabi_ddiv>
   d6fe4:	e9cd 0100 	strd	r0, r1, [sp]
   d6fe8:	f1b9 0f00 	cmp.w	r9, #0
   d6fec:	dab2      	bge.n	d6f54 <__ieee754_pow+0x9c>
   d6fee:	9b03      	ldr	r3, [sp, #12]
   d6ff0:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   d6ff4:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   d6ff8:	ea58 0303 	orrs.w	r3, r8, r3
   d6ffc:	f040 84be 	bne.w	d797c <__ieee754_pow+0xac4>
   d7000:	e9dd 2300 	ldrd	r2, r3, [sp]
   d7004:	4610      	mov	r0, r2
   d7006:	4619      	mov	r1, r3
   d7008:	f000 ff40 	bl	d7e8c <__aeabi_dsub>
   d700c:	4602      	mov	r2, r0
   d700e:	460b      	mov	r3, r1
   d7010:	f001 fa1e 	bl	d8450 <__aeabi_ddiv>
   d7014:	e9cd 0100 	strd	r0, r1, [sp]
   d7018:	e79c      	b.n	d6f54 <__ieee754_pow+0x9c>
   d701a:	9a03      	ldr	r2, [sp, #12]
   d701c:	ea4f 73d9 	mov.w	r3, r9, lsr #31
   d7020:	3b01      	subs	r3, #1
   d7022:	9306      	str	r3, [sp, #24]
   d7024:	4313      	orrs	r3, r2
   d7026:	d035      	beq.n	d7094 <__ieee754_pow+0x1dc>
   d7028:	4b26      	ldr	r3, [pc, #152]	; (d70c4 <__ieee754_pow+0x20c>)
   d702a:	459a      	cmp	sl, r3
   d702c:	dd4e      	ble.n	d70cc <__ieee754_pow+0x214>
   d702e:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
   d7032:	459a      	cmp	sl, r3
   d7034:	4b24      	ldr	r3, [pc, #144]	; (d70c8 <__ieee754_pow+0x210>)
   d7036:	f340 83ed 	ble.w	d7814 <__ieee754_pow+0x95c>
   d703a:	4598      	cmp	r8, r3
   d703c:	f340 836b 	ble.w	d7716 <__ieee754_pow+0x85e>
   d7040:	f1bb 0f00 	cmp.w	fp, #0
   d7044:	f340 836b 	ble.w	d771e <__ieee754_pow+0x866>
   d7048:	a317      	add	r3, pc, #92	; (adr r3, d70a8 <__ieee754_pow+0x1f0>)
   d704a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d704e:	4610      	mov	r0, r2
   d7050:	4619      	mov	r1, r3
   d7052:	f001 f8d3 	bl	d81fc <__aeabi_dmul>
   d7056:	e9cd 0100 	strd	r0, r1, [sp]
   d705a:	e77b      	b.n	d6f54 <__ieee754_pow+0x9c>
   d705c:	f108 4340 	add.w	r3, r8, #3221225472	; 0xc0000000
   d7060:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   d7064:	4313      	orrs	r3, r2
   d7066:	f43f af71 	beq.w	d6f4c <__ieee754_pow+0x94>
   d706a:	4b17      	ldr	r3, [pc, #92]	; (d70c8 <__ieee754_pow+0x210>)
   d706c:	4598      	cmp	r8, r3
   d706e:	f340 8388 	ble.w	d7782 <__ieee754_pow+0x8ca>
   d7072:	f1bb 0f00 	cmp.w	fp, #0
   d7076:	f2c0 8352 	blt.w	d771e <__ieee754_pow+0x866>
   d707a:	e9cd 6700 	strd	r6, r7, [sp]
   d707e:	e769      	b.n	d6f54 <__ieee754_pow+0x9c>
   d7080:	f1bb 0f00 	cmp.w	fp, #0
   d7084:	f2c0 8441 	blt.w	d790a <__ieee754_pow+0xa52>
   d7088:	e9cd 4500 	strd	r4, r5, [sp]
   d708c:	e762      	b.n	d6f54 <__ieee754_pow+0x9c>
   d708e:	2102      	movs	r1, #2
   d7090:	9103      	str	r1, [sp, #12]
   d7092:	e735      	b.n	d6f00 <__ieee754_pow+0x48>
   d7094:	4622      	mov	r2, r4
   d7096:	462b      	mov	r3, r5
   d7098:	e7b4      	b.n	d7004 <__ieee754_pow+0x14c>
   d709a:	bf00      	nop
   d709c:	f3af 8000 	nop.w
   d70a0:	00000000 	.word	0x00000000
   d70a4:	3ff00000 	.word	0x3ff00000
   d70a8:	8800759c 	.word	0x8800759c
   d70ac:	7e37e43c 	.word	0x7e37e43c
   d70b0:	7ff00000 	.word	0x7ff00000
   d70b4:	3ff00000 	.word	0x3ff00000
   d70b8:	3fe00000 	.word	0x3fe00000
   d70bc:	000d9514 	.word	0x000d9514
   d70c0:	433fffff 	.word	0x433fffff
   d70c4:	41e00000 	.word	0x41e00000
   d70c8:	3fefffff 	.word	0x3fefffff
   d70cc:	4be4      	ldr	r3, [pc, #912]	; (d7460 <__ieee754_pow+0x5a8>)
   d70ce:	ea09 0303 	and.w	r3, r9, r3
   d70d2:	2b00      	cmp	r3, #0
   d70d4:	f040 8416 	bne.w	d7904 <__ieee754_pow+0xa4c>
   d70d8:	e9dd 0100 	ldrd	r0, r1, [sp]
   d70dc:	4be1      	ldr	r3, [pc, #900]	; (d7464 <__ieee754_pow+0x5ac>)
   d70de:	2200      	movs	r2, #0
   d70e0:	f001 f88c 	bl	d81fc <__aeabi_dmul>
   d70e4:	e9cd 0100 	strd	r0, r1, [sp]
   d70e8:	f8dd 8004 	ldr.w	r8, [sp, #4]
   d70ec:	f06f 0034 	mvn.w	r0, #52	; 0x34
   d70f0:	ea4f 5328 	mov.w	r3, r8, asr #20
   d70f4:	49dc      	ldr	r1, [pc, #880]	; (d7468 <__ieee754_pow+0x5b0>)
   d70f6:	f3c8 0213 	ubfx	r2, r8, #0, #20
   d70fa:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   d70fe:	f042 587f 	orr.w	r8, r2, #1069547520	; 0x3fc00000
   d7102:	1818      	adds	r0, r3, r0
   d7104:	428a      	cmp	r2, r1
   d7106:	9007      	str	r0, [sp, #28]
   d7108:	f448 1840 	orr.w	r8, r8, #3145728	; 0x300000
   d710c:	f340 83e9 	ble.w	d78e2 <__ieee754_pow+0xa2a>
   d7110:	4bd6      	ldr	r3, [pc, #856]	; (d746c <__ieee754_pow+0x5b4>)
   d7112:	429a      	cmp	r2, r3
   d7114:	f340 843e 	ble.w	d7994 <__ieee754_pow+0xadc>
   d7118:	ed9f 7bbb 	vldr	d7, [pc, #748]	; d7408 <__ieee754_pow+0x550>
   d711c:	eeb0 ba47 	vmov.f32	s22, s14
   d7120:	eef0 ba67 	vmov.f32	s23, s15
   d7124:	eeb0 ca47 	vmov.f32	s24, s14
   d7128:	eef0 ca67 	vmov.f32	s25, s15
   d712c:	ed9f 7bb8 	vldr	d7, [pc, #736]	; d7410 <__ieee754_pow+0x558>
   d7130:	3001      	adds	r0, #1
   d7132:	ec54 3b17 	vmov	r3, r4, d7
   d7136:	9007      	str	r0, [sp, #28]
   d7138:	f5a8 1880 	sub.w	r8, r8, #1048576	; 0x100000
   d713c:	f04f 0900 	mov.w	r9, #0
   d7140:	e9dd ab00 	ldrd	sl, fp, [sp]
   d7144:	ec44 3b18 	vmov	d8, r3, r4
   d7148:	461a      	mov	r2, r3
   d714a:	4650      	mov	r0, sl
   d714c:	4623      	mov	r3, r4
   d714e:	4641      	mov	r1, r8
   d7150:	f000 fe9c 	bl	d7e8c <__aeabi_dsub>
   d7154:	ec53 2b18 	vmov	r2, r3, d8
   d7158:	4604      	mov	r4, r0
   d715a:	460d      	mov	r5, r1
   d715c:	4650      	mov	r0, sl
   d715e:	4641      	mov	r1, r8
   d7160:	f000 fe96 	bl	d7e90 <__adddf3>
   d7164:	4602      	mov	r2, r0
   d7166:	460b      	mov	r3, r1
   d7168:	2000      	movs	r0, #0
   d716a:	49c1      	ldr	r1, [pc, #772]	; (d7470 <__ieee754_pow+0x5b8>)
   d716c:	f001 f970 	bl	d8450 <__aeabi_ddiv>
   d7170:	ec45 4b1a 	vmov	d10, r4, r5
   d7174:	ec41 0b19 	vmov	d9, r0, r1
   d7178:	ec51 0b1a 	vmov	r0, r1, d10
   d717c:	ec53 2b19 	vmov	r2, r3, d9
   d7180:	f001 f83c 	bl	d81fc <__aeabi_dmul>
   d7184:	46c3      	mov	fp, r8
   d7186:	ea4f 0868 	mov.w	r8, r8, asr #1
   d718a:	f048 5800 	orr.w	r8, r8, #536870912	; 0x20000000
   d718e:	f508 2300 	add.w	r3, r8, #524288	; 0x80000
   d7192:	eb03 0509 	add.w	r5, r3, r9
   d7196:	460a      	mov	r2, r1
   d7198:	2300      	movs	r3, #0
   d719a:	4601      	mov	r1, r0
   d719c:	e9cd 1200 	strd	r1, r2, [sp]
   d71a0:	9300      	str	r3, [sp, #0]
   d71a2:	e9dd 8900 	ldrd	r8, r9, [sp]
   d71a6:	2400      	movs	r4, #0
   d71a8:	e9cd 1204 	strd	r1, r2, [sp, #16]
   d71ac:	462b      	mov	r3, r5
   d71ae:	4622      	mov	r2, r4
   d71b0:	4640      	mov	r0, r8
   d71b2:	4649      	mov	r1, r9
   d71b4:	f001 f822 	bl	d81fc <__aeabi_dmul>
   d71b8:	4602      	mov	r2, r0
   d71ba:	460b      	mov	r3, r1
   d71bc:	ec51 0b1a 	vmov	r0, r1, d10
   d71c0:	f000 fe64 	bl	d7e8c <__aeabi_dsub>
   d71c4:	ec41 0b17 	vmov	d7, r0, r1
   d71c8:	ec53 2b18 	vmov	r2, r3, d8
   d71cc:	4620      	mov	r0, r4
   d71ce:	4629      	mov	r1, r5
   d71d0:	ec55 4b17 	vmov	r4, r5, d7
   d71d4:	f000 fe5a 	bl	d7e8c <__aeabi_dsub>
   d71d8:	4602      	mov	r2, r0
   d71da:	460b      	mov	r3, r1
   d71dc:	4650      	mov	r0, sl
   d71de:	4659      	mov	r1, fp
   d71e0:	f000 fe54 	bl	d7e8c <__aeabi_dsub>
   d71e4:	4642      	mov	r2, r8
   d71e6:	464b      	mov	r3, r9
   d71e8:	f001 f808 	bl	d81fc <__aeabi_dmul>
   d71ec:	4602      	mov	r2, r0
   d71ee:	460b      	mov	r3, r1
   d71f0:	4620      	mov	r0, r4
   d71f2:	4629      	mov	r1, r5
   d71f4:	f000 fe4a 	bl	d7e8c <__aeabi_dsub>
   d71f8:	ec53 2b19 	vmov	r2, r3, d9
   d71fc:	f000 fffe 	bl	d81fc <__aeabi_dmul>
   d7200:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
   d7204:	4604      	mov	r4, r0
   d7206:	460d      	mov	r5, r1
   d7208:	4652      	mov	r2, sl
   d720a:	465b      	mov	r3, fp
   d720c:	4650      	mov	r0, sl
   d720e:	4659      	mov	r1, fp
   d7210:	f000 fff4 	bl	d81fc <__aeabi_dmul>
   d7214:	a380      	add	r3, pc, #512	; (adr r3, d7418 <__ieee754_pow+0x560>)
   d7216:	e9d3 2300 	ldrd	r2, r3, [r3]
   d721a:	ec45 4b1a 	vmov	d10, r4, r5
   d721e:	4604      	mov	r4, r0
   d7220:	460d      	mov	r5, r1
   d7222:	f000 ffeb 	bl	d81fc <__aeabi_dmul>
   d7226:	a37e      	add	r3, pc, #504	; (adr r3, d7420 <__ieee754_pow+0x568>)
   d7228:	e9d3 2300 	ldrd	r2, r3, [r3]
   d722c:	f000 fe30 	bl	d7e90 <__adddf3>
   d7230:	4622      	mov	r2, r4
   d7232:	462b      	mov	r3, r5
   d7234:	f000 ffe2 	bl	d81fc <__aeabi_dmul>
   d7238:	a37b      	add	r3, pc, #492	; (adr r3, d7428 <__ieee754_pow+0x570>)
   d723a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d723e:	f000 fe27 	bl	d7e90 <__adddf3>
   d7242:	4622      	mov	r2, r4
   d7244:	462b      	mov	r3, r5
   d7246:	f000 ffd9 	bl	d81fc <__aeabi_dmul>
   d724a:	a379      	add	r3, pc, #484	; (adr r3, d7430 <__ieee754_pow+0x578>)
   d724c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7250:	f000 fe1e 	bl	d7e90 <__adddf3>
   d7254:	4622      	mov	r2, r4
   d7256:	462b      	mov	r3, r5
   d7258:	f000 ffd0 	bl	d81fc <__aeabi_dmul>
   d725c:	a376      	add	r3, pc, #472	; (adr r3, d7438 <__ieee754_pow+0x580>)
   d725e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7262:	f000 fe15 	bl	d7e90 <__adddf3>
   d7266:	4622      	mov	r2, r4
   d7268:	462b      	mov	r3, r5
   d726a:	f000 ffc7 	bl	d81fc <__aeabi_dmul>
   d726e:	a374      	add	r3, pc, #464	; (adr r3, d7440 <__ieee754_pow+0x588>)
   d7270:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7274:	f000 fe0c 	bl	d7e90 <__adddf3>
   d7278:	4622      	mov	r2, r4
   d727a:	462b      	mov	r3, r5
   d727c:	4604      	mov	r4, r0
   d727e:	460d      	mov	r5, r1
   d7280:	4610      	mov	r0, r2
   d7282:	4619      	mov	r1, r3
   d7284:	f000 ffba 	bl	d81fc <__aeabi_dmul>
   d7288:	4602      	mov	r2, r0
   d728a:	460b      	mov	r3, r1
   d728c:	4620      	mov	r0, r4
   d728e:	4629      	mov	r1, r5
   d7290:	f000 ffb4 	bl	d81fc <__aeabi_dmul>
   d7294:	4642      	mov	r2, r8
   d7296:	4604      	mov	r4, r0
   d7298:	460d      	mov	r5, r1
   d729a:	464b      	mov	r3, r9
   d729c:	4650      	mov	r0, sl
   d729e:	4659      	mov	r1, fp
   d72a0:	e9cd ab04 	strd	sl, fp, [sp, #16]
   d72a4:	f000 fdf4 	bl	d7e90 <__adddf3>
   d72a8:	ec53 2b1a 	vmov	r2, r3, d10
   d72ac:	f000 ffa6 	bl	d81fc <__aeabi_dmul>
   d72b0:	4622      	mov	r2, r4
   d72b2:	462b      	mov	r3, r5
   d72b4:	f000 fdec 	bl	d7e90 <__adddf3>
   d72b8:	4642      	mov	r2, r8
   d72ba:	4604      	mov	r4, r0
   d72bc:	460d      	mov	r5, r1
   d72be:	464b      	mov	r3, r9
   d72c0:	4640      	mov	r0, r8
   d72c2:	4649      	mov	r1, r9
   d72c4:	f000 ff9a 	bl	d81fc <__aeabi_dmul>
   d72c8:	ec45 4b19 	vmov	d9, r4, r5
   d72cc:	4b69      	ldr	r3, [pc, #420]	; (d7474 <__ieee754_pow+0x5bc>)
   d72ce:	2200      	movs	r2, #0
   d72d0:	4682      	mov	sl, r0
   d72d2:	468b      	mov	fp, r1
   d72d4:	f000 fddc 	bl	d7e90 <__adddf3>
   d72d8:	ec53 2b19 	vmov	r2, r3, d9
   d72dc:	f000 fdd8 	bl	d7e90 <__adddf3>
   d72e0:	9c00      	ldr	r4, [sp, #0]
   d72e2:	460d      	mov	r5, r1
   d72e4:	4622      	mov	r2, r4
   d72e6:	462b      	mov	r3, r5
   d72e8:	4640      	mov	r0, r8
   d72ea:	4649      	mov	r1, r9
   d72ec:	f000 ff86 	bl	d81fc <__aeabi_dmul>
   d72f0:	4b60      	ldr	r3, [pc, #384]	; (d7474 <__ieee754_pow+0x5bc>)
   d72f2:	4680      	mov	r8, r0
   d72f4:	4689      	mov	r9, r1
   d72f6:	2200      	movs	r2, #0
   d72f8:	4620      	mov	r0, r4
   d72fa:	4629      	mov	r1, r5
   d72fc:	f000 fdc6 	bl	d7e8c <__aeabi_dsub>
   d7300:	4652      	mov	r2, sl
   d7302:	465b      	mov	r3, fp
   d7304:	f000 fdc2 	bl	d7e8c <__aeabi_dsub>
   d7308:	4602      	mov	r2, r0
   d730a:	460b      	mov	r3, r1
   d730c:	ec51 0b19 	vmov	r0, r1, d9
   d7310:	f000 fdbc 	bl	d7e8c <__aeabi_dsub>
   d7314:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   d7318:	f000 ff70 	bl	d81fc <__aeabi_dmul>
   d731c:	ec49 8b18 	vmov	d8, r8, r9
   d7320:	4622      	mov	r2, r4
   d7322:	4680      	mov	r8, r0
   d7324:	4689      	mov	r9, r1
   d7326:	462b      	mov	r3, r5
   d7328:	ec51 0b1a 	vmov	r0, r1, d10
   d732c:	f000 ff66 	bl	d81fc <__aeabi_dmul>
   d7330:	4602      	mov	r2, r0
   d7332:	460b      	mov	r3, r1
   d7334:	4640      	mov	r0, r8
   d7336:	4649      	mov	r1, r9
   d7338:	f000 fdaa 	bl	d7e90 <__adddf3>
   d733c:	4682      	mov	sl, r0
   d733e:	468b      	mov	fp, r1
   d7340:	4652      	mov	r2, sl
   d7342:	465b      	mov	r3, fp
   d7344:	ec51 0b18 	vmov	r0, r1, d8
   d7348:	f000 fda2 	bl	d7e90 <__adddf3>
   d734c:	9c00      	ldr	r4, [sp, #0]
   d734e:	a33e      	add	r3, pc, #248	; (adr r3, d7448 <__ieee754_pow+0x590>)
   d7350:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7354:	4620      	mov	r0, r4
   d7356:	460d      	mov	r5, r1
   d7358:	f000 ff50 	bl	d81fc <__aeabi_dmul>
   d735c:	ec53 2b18 	vmov	r2, r3, d8
   d7360:	4680      	mov	r8, r0
   d7362:	4689      	mov	r9, r1
   d7364:	4620      	mov	r0, r4
   d7366:	4629      	mov	r1, r5
   d7368:	f000 fd90 	bl	d7e8c <__aeabi_dsub>
   d736c:	4602      	mov	r2, r0
   d736e:	460b      	mov	r3, r1
   d7370:	4650      	mov	r0, sl
   d7372:	4659      	mov	r1, fp
   d7374:	f000 fd8a 	bl	d7e8c <__aeabi_dsub>
   d7378:	a335      	add	r3, pc, #212	; (adr r3, d7450 <__ieee754_pow+0x598>)
   d737a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d737e:	f000 ff3d 	bl	d81fc <__aeabi_dmul>
   d7382:	ec49 8b19 	vmov	d9, r8, r9
   d7386:	a334      	add	r3, pc, #208	; (adr r3, d7458 <__ieee754_pow+0x5a0>)
   d7388:	e9d3 2300 	ldrd	r2, r3, [r3]
   d738c:	4680      	mov	r8, r0
   d738e:	4689      	mov	r9, r1
   d7390:	4620      	mov	r0, r4
   d7392:	4629      	mov	r1, r5
   d7394:	f000 ff32 	bl	d81fc <__aeabi_dmul>
   d7398:	4602      	mov	r2, r0
   d739a:	460b      	mov	r3, r1
   d739c:	4640      	mov	r0, r8
   d739e:	4649      	mov	r1, r9
   d73a0:	f000 fd76 	bl	d7e90 <__adddf3>
   d73a4:	ec53 2b1c 	vmov	r2, r3, d12
   d73a8:	f000 fd72 	bl	d7e90 <__adddf3>
   d73ac:	4682      	mov	sl, r0
   d73ae:	9807      	ldr	r0, [sp, #28]
   d73b0:	468b      	mov	fp, r1
   d73b2:	f000 feb9 	bl	d8128 <__aeabi_i2d>
   d73b6:	4652      	mov	r2, sl
   d73b8:	4680      	mov	r8, r0
   d73ba:	4689      	mov	r9, r1
   d73bc:	465b      	mov	r3, fp
   d73be:	ec51 0b19 	vmov	r0, r1, d9
   d73c2:	f000 fd65 	bl	d7e90 <__adddf3>
   d73c6:	ec53 2b1b 	vmov	r2, r3, d11
   d73ca:	f000 fd61 	bl	d7e90 <__adddf3>
   d73ce:	4642      	mov	r2, r8
   d73d0:	464b      	mov	r3, r9
   d73d2:	f000 fd5d 	bl	d7e90 <__adddf3>
   d73d6:	9c00      	ldr	r4, [sp, #0]
   d73d8:	4642      	mov	r2, r8
   d73da:	464b      	mov	r3, r9
   d73dc:	4620      	mov	r0, r4
   d73de:	460d      	mov	r5, r1
   d73e0:	f000 fd54 	bl	d7e8c <__aeabi_dsub>
   d73e4:	ec53 2b1b 	vmov	r2, r3, d11
   d73e8:	f000 fd50 	bl	d7e8c <__aeabi_dsub>
   d73ec:	ec53 2b19 	vmov	r2, r3, d9
   d73f0:	f000 fd4c 	bl	d7e8c <__aeabi_dsub>
   d73f4:	4602      	mov	r2, r0
   d73f6:	460b      	mov	r3, r1
   d73f8:	4650      	mov	r0, sl
   d73fa:	4659      	mov	r1, fp
   d73fc:	f000 fd46 	bl	d7e8c <__aeabi_dsub>
   d7400:	4682      	mov	sl, r0
   d7402:	468b      	mov	fp, r1
   d7404:	e038      	b.n	d7478 <__ieee754_pow+0x5c0>
   d7406:	bf00      	nop
	...
   d7414:	3ff00000 	.word	0x3ff00000
   d7418:	4a454eef 	.word	0x4a454eef
   d741c:	3fca7e28 	.word	0x3fca7e28
   d7420:	93c9db65 	.word	0x93c9db65
   d7424:	3fcd864a 	.word	0x3fcd864a
   d7428:	a91d4101 	.word	0xa91d4101
   d742c:	3fd17460 	.word	0x3fd17460
   d7430:	518f264d 	.word	0x518f264d
   d7434:	3fd55555 	.word	0x3fd55555
   d7438:	db6fabff 	.word	0xdb6fabff
   d743c:	3fdb6db6 	.word	0x3fdb6db6
   d7440:	33333303 	.word	0x33333303
   d7444:	3fe33333 	.word	0x3fe33333
   d7448:	e0000000 	.word	0xe0000000
   d744c:	3feec709 	.word	0x3feec709
   d7450:	dc3a03fd 	.word	0xdc3a03fd
   d7454:	3feec709 	.word	0x3feec709
   d7458:	145b01f5 	.word	0x145b01f5
   d745c:	be3e2fe0 	.word	0xbe3e2fe0
   d7460:	7ff00000 	.word	0x7ff00000
   d7464:	43400000 	.word	0x43400000
   d7468:	0003988e 	.word	0x0003988e
   d746c:	000bb679 	.word	0x000bb679
   d7470:	3ff00000 	.word	0x3ff00000
   d7474:	40080000 	.word	0x40080000
   d7478:	9b03      	ldr	r3, [sp, #12]
   d747a:	9a06      	ldr	r2, [sp, #24]
   d747c:	3b01      	subs	r3, #1
   d747e:	4313      	orrs	r3, r2
   d7480:	f040 8178 	bne.w	d7774 <__ieee754_pow+0x8bc>
   d7484:	ed9f 7bc4 	vldr	d7, [pc, #784]	; d7798 <__ieee754_pow+0x8e0>
   d7488:	eeb0 9a47 	vmov.f32	s18, s14
   d748c:	eef0 9a67 	vmov.f32	s19, s15
   d7490:	2300      	movs	r3, #0
   d7492:	e9cd 6700 	strd	r6, r7, [sp]
   d7496:	9300      	str	r3, [sp, #0]
   d7498:	e9dd 8900 	ldrd	r8, r9, [sp]
   d749c:	4630      	mov	r0, r6
   d749e:	4642      	mov	r2, r8
   d74a0:	4639      	mov	r1, r7
   d74a2:	464b      	mov	r3, r9
   d74a4:	f000 fcf2 	bl	d7e8c <__aeabi_dsub>
   d74a8:	4622      	mov	r2, r4
   d74aa:	462b      	mov	r3, r5
   d74ac:	f000 fea6 	bl	d81fc <__aeabi_dmul>
   d74b0:	4632      	mov	r2, r6
   d74b2:	463b      	mov	r3, r7
   d74b4:	4606      	mov	r6, r0
   d74b6:	460f      	mov	r7, r1
   d74b8:	4650      	mov	r0, sl
   d74ba:	4659      	mov	r1, fp
   d74bc:	f000 fe9e 	bl	d81fc <__aeabi_dmul>
   d74c0:	4602      	mov	r2, r0
   d74c2:	460b      	mov	r3, r1
   d74c4:	4630      	mov	r0, r6
   d74c6:	4639      	mov	r1, r7
   d74c8:	f000 fce2 	bl	d7e90 <__adddf3>
   d74cc:	4642      	mov	r2, r8
   d74ce:	4682      	mov	sl, r0
   d74d0:	468b      	mov	fp, r1
   d74d2:	464b      	mov	r3, r9
   d74d4:	4620      	mov	r0, r4
   d74d6:	4629      	mov	r1, r5
   d74d8:	f000 fe90 	bl	d81fc <__aeabi_dmul>
   d74dc:	4606      	mov	r6, r0
   d74de:	460f      	mov	r7, r1
   d74e0:	463b      	mov	r3, r7
   d74e2:	4650      	mov	r0, sl
   d74e4:	4659      	mov	r1, fp
   d74e6:	4632      	mov	r2, r6
   d74e8:	f000 fcd2 	bl	d7e90 <__adddf3>
   d74ec:	4bc4      	ldr	r3, [pc, #784]	; (d7800 <__ieee754_pow+0x948>)
   d74ee:	4299      	cmp	r1, r3
   d74f0:	4604      	mov	r4, r0
   d74f2:	460d      	mov	r5, r1
   d74f4:	4688      	mov	r8, r1
   d74f6:	f340 8117 	ble.w	d7728 <__ieee754_pow+0x870>
   d74fa:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
   d74fe:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
   d7502:	4303      	orrs	r3, r0
   d7504:	f040 822a 	bne.w	d795c <__ieee754_pow+0xaa4>
   d7508:	a3a5      	add	r3, pc, #660	; (adr r3, d77a0 <__ieee754_pow+0x8e8>)
   d750a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d750e:	4650      	mov	r0, sl
   d7510:	4659      	mov	r1, fp
   d7512:	f000 fcbd 	bl	d7e90 <__adddf3>
   d7516:	4632      	mov	r2, r6
   d7518:	ec41 0b18 	vmov	d8, r0, r1
   d751c:	463b      	mov	r3, r7
   d751e:	4620      	mov	r0, r4
   d7520:	4629      	mov	r1, r5
   d7522:	f000 fcb3 	bl	d7e8c <__aeabi_dsub>
   d7526:	4602      	mov	r2, r0
   d7528:	460b      	mov	r3, r1
   d752a:	ec51 0b18 	vmov	r0, r1, d8
   d752e:	f001 f8f5 	bl	d871c <__aeabi_dcmpgt>
   d7532:	2800      	cmp	r0, #0
   d7534:	f040 8212 	bne.w	d795c <__ieee754_pow+0xaa4>
   d7538:	f3c8 530a 	ubfx	r3, r8, #20, #11
   d753c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   d7540:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   d7544:	fa42 f303 	asr.w	r3, r2, r3
   d7548:	4443      	add	r3, r8
   d754a:	49ae      	ldr	r1, [pc, #696]	; (d7804 <__ieee754_pow+0x94c>)
   d754c:	f3c3 520a 	ubfx	r2, r3, #20, #11
   d7550:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
   d7554:	fa41 fc02 	asr.w	ip, r1, r2
   d7558:	f3c3 0513 	ubfx	r5, r3, #0, #20
   d755c:	ea23 010c 	bic.w	r1, r3, ip
   d7560:	f1c2 0414 	rsb	r4, r2, #20
   d7564:	f445 1580 	orr.w	r5, r5, #1048576	; 0x100000
   d7568:	f1b8 0f00 	cmp.w	r8, #0
   d756c:	460b      	mov	r3, r1
   d756e:	fa45 f104 	asr.w	r1, r5, r4
   d7572:	9103      	str	r1, [sp, #12]
   d7574:	f04f 0000 	mov.w	r0, #0
   d7578:	bfb8      	it	lt
   d757a:	4249      	neglt	r1, r1
   d757c:	4602      	mov	r2, r0
   d757e:	bfb8      	it	lt
   d7580:	9103      	strlt	r1, [sp, #12]
   d7582:	4630      	mov	r0, r6
   d7584:	4639      	mov	r1, r7
   d7586:	f000 fc81 	bl	d7e8c <__aeabi_dsub>
   d758a:	4606      	mov	r6, r0
   d758c:	460f      	mov	r7, r1
   d758e:	463b      	mov	r3, r7
   d7590:	4650      	mov	r0, sl
   d7592:	4659      	mov	r1, fp
   d7594:	4632      	mov	r2, r6
   d7596:	f000 fc7b 	bl	d7e90 <__adddf3>
   d759a:	9b03      	ldr	r3, [sp, #12]
   d759c:	051b      	lsls	r3, r3, #20
   d759e:	9300      	str	r3, [sp, #0]
   d75a0:	460d      	mov	r5, r1
   d75a2:	2400      	movs	r4, #0
   d75a4:	a380      	add	r3, pc, #512	; (adr r3, d77a8 <__ieee754_pow+0x8f0>)
   d75a6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d75aa:	4620      	mov	r0, r4
   d75ac:	4629      	mov	r1, r5
   d75ae:	f000 fe25 	bl	d81fc <__aeabi_dmul>
   d75b2:	4632      	mov	r2, r6
   d75b4:	4680      	mov	r8, r0
   d75b6:	4689      	mov	r9, r1
   d75b8:	463b      	mov	r3, r7
   d75ba:	4620      	mov	r0, r4
   d75bc:	4629      	mov	r1, r5
   d75be:	f000 fc65 	bl	d7e8c <__aeabi_dsub>
   d75c2:	4602      	mov	r2, r0
   d75c4:	460b      	mov	r3, r1
   d75c6:	4650      	mov	r0, sl
   d75c8:	4659      	mov	r1, fp
   d75ca:	f000 fc5f 	bl	d7e8c <__aeabi_dsub>
   d75ce:	a378      	add	r3, pc, #480	; (adr r3, d77b0 <__ieee754_pow+0x8f8>)
   d75d0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d75d4:	f000 fe12 	bl	d81fc <__aeabi_dmul>
   d75d8:	a377      	add	r3, pc, #476	; (adr r3, d77b8 <__ieee754_pow+0x900>)
   d75da:	e9d3 2300 	ldrd	r2, r3, [r3]
   d75de:	4606      	mov	r6, r0
   d75e0:	460f      	mov	r7, r1
   d75e2:	4620      	mov	r0, r4
   d75e4:	4629      	mov	r1, r5
   d75e6:	f000 fe09 	bl	d81fc <__aeabi_dmul>
   d75ea:	4602      	mov	r2, r0
   d75ec:	460b      	mov	r3, r1
   d75ee:	4630      	mov	r0, r6
   d75f0:	4639      	mov	r1, r7
   d75f2:	f000 fc4d 	bl	d7e90 <__adddf3>
   d75f6:	4606      	mov	r6, r0
   d75f8:	460f      	mov	r7, r1
   d75fa:	4632      	mov	r2, r6
   d75fc:	463b      	mov	r3, r7
   d75fe:	4640      	mov	r0, r8
   d7600:	4649      	mov	r1, r9
   d7602:	f000 fc45 	bl	d7e90 <__adddf3>
   d7606:	4642      	mov	r2, r8
   d7608:	464b      	mov	r3, r9
   d760a:	4604      	mov	r4, r0
   d760c:	460d      	mov	r5, r1
   d760e:	f000 fc3d 	bl	d7e8c <__aeabi_dsub>
   d7612:	4602      	mov	r2, r0
   d7614:	460b      	mov	r3, r1
   d7616:	4630      	mov	r0, r6
   d7618:	4639      	mov	r1, r7
   d761a:	f000 fc37 	bl	d7e8c <__aeabi_dsub>
   d761e:	4622      	mov	r2, r4
   d7620:	4682      	mov	sl, r0
   d7622:	468b      	mov	fp, r1
   d7624:	462b      	mov	r3, r5
   d7626:	4620      	mov	r0, r4
   d7628:	4629      	mov	r1, r5
   d762a:	f000 fde7 	bl	d81fc <__aeabi_dmul>
   d762e:	a364      	add	r3, pc, #400	; (adr r3, d77c0 <__ieee754_pow+0x908>)
   d7630:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7634:	4606      	mov	r6, r0
   d7636:	460f      	mov	r7, r1
   d7638:	f000 fde0 	bl	d81fc <__aeabi_dmul>
   d763c:	a362      	add	r3, pc, #392	; (adr r3, d77c8 <__ieee754_pow+0x910>)
   d763e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7642:	f000 fc23 	bl	d7e8c <__aeabi_dsub>
   d7646:	4632      	mov	r2, r6
   d7648:	463b      	mov	r3, r7
   d764a:	f000 fdd7 	bl	d81fc <__aeabi_dmul>
   d764e:	a360      	add	r3, pc, #384	; (adr r3, d77d0 <__ieee754_pow+0x918>)
   d7650:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7654:	f000 fc1c 	bl	d7e90 <__adddf3>
   d7658:	4632      	mov	r2, r6
   d765a:	463b      	mov	r3, r7
   d765c:	f000 fdce 	bl	d81fc <__aeabi_dmul>
   d7660:	a35d      	add	r3, pc, #372	; (adr r3, d77d8 <__ieee754_pow+0x920>)
   d7662:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7666:	f000 fc11 	bl	d7e8c <__aeabi_dsub>
   d766a:	4632      	mov	r2, r6
   d766c:	463b      	mov	r3, r7
   d766e:	f000 fdc5 	bl	d81fc <__aeabi_dmul>
   d7672:	a35b      	add	r3, pc, #364	; (adr r3, d77e0 <__ieee754_pow+0x928>)
   d7674:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7678:	f000 fc0a 	bl	d7e90 <__adddf3>
   d767c:	4632      	mov	r2, r6
   d767e:	463b      	mov	r3, r7
   d7680:	f000 fdbc 	bl	d81fc <__aeabi_dmul>
   d7684:	4602      	mov	r2, r0
   d7686:	460b      	mov	r3, r1
   d7688:	4620      	mov	r0, r4
   d768a:	4629      	mov	r1, r5
   d768c:	f000 fbfe 	bl	d7e8c <__aeabi_dsub>
   d7690:	4606      	mov	r6, r0
   d7692:	460f      	mov	r7, r1
   d7694:	4632      	mov	r2, r6
   d7696:	463b      	mov	r3, r7
   d7698:	4620      	mov	r0, r4
   d769a:	4629      	mov	r1, r5
   d769c:	f000 fdae 	bl	d81fc <__aeabi_dmul>
   d76a0:	2200      	movs	r2, #0
   d76a2:	4680      	mov	r8, r0
   d76a4:	4689      	mov	r9, r1
   d76a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d76aa:	4630      	mov	r0, r6
   d76ac:	4639      	mov	r1, r7
   d76ae:	f000 fbed 	bl	d7e8c <__aeabi_dsub>
   d76b2:	4602      	mov	r2, r0
   d76b4:	460b      	mov	r3, r1
   d76b6:	4640      	mov	r0, r8
   d76b8:	4649      	mov	r1, r9
   d76ba:	f000 fec9 	bl	d8450 <__aeabi_ddiv>
   d76be:	4652      	mov	r2, sl
   d76c0:	4606      	mov	r6, r0
   d76c2:	460f      	mov	r7, r1
   d76c4:	465b      	mov	r3, fp
   d76c6:	4620      	mov	r0, r4
   d76c8:	4629      	mov	r1, r5
   d76ca:	f000 fd97 	bl	d81fc <__aeabi_dmul>
   d76ce:	4652      	mov	r2, sl
   d76d0:	465b      	mov	r3, fp
   d76d2:	f000 fbdd 	bl	d7e90 <__adddf3>
   d76d6:	4602      	mov	r2, r0
   d76d8:	460b      	mov	r3, r1
   d76da:	4630      	mov	r0, r6
   d76dc:	4639      	mov	r1, r7
   d76de:	f000 fbd5 	bl	d7e8c <__aeabi_dsub>
   d76e2:	4622      	mov	r2, r4
   d76e4:	462b      	mov	r3, r5
   d76e6:	f000 fbd1 	bl	d7e8c <__aeabi_dsub>
   d76ea:	4602      	mov	r2, r0
   d76ec:	460b      	mov	r3, r1
   d76ee:	2000      	movs	r0, #0
   d76f0:	4945      	ldr	r1, [pc, #276]	; (d7808 <__ieee754_pow+0x950>)
   d76f2:	f000 fbcb 	bl	d7e8c <__aeabi_dsub>
   d76f6:	460b      	mov	r3, r1
   d76f8:	9900      	ldr	r1, [sp, #0]
   d76fa:	4419      	add	r1, r3
   d76fc:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d7700:	4602      	mov	r2, r0
   d7702:	f2c0 8169 	blt.w	d79d8 <__ieee754_pow+0xb20>
   d7706:	4610      	mov	r0, r2
   d7708:	ec53 2b19 	vmov	r2, r3, d9
   d770c:	f000 fd76 	bl	d81fc <__aeabi_dmul>
   d7710:	e9cd 0100 	strd	r0, r1, [sp]
   d7714:	e41e      	b.n	d6f54 <__ieee754_pow+0x9c>
   d7716:	f1bb 0f00 	cmp.w	fp, #0
   d771a:	f6ff ac95 	blt.w	d7048 <__ieee754_pow+0x190>
   d771e:	ed9f 7b32 	vldr	d7, [pc, #200]	; d77e8 <__ieee754_pow+0x930>
   d7722:	ed8d 7b00 	vstr	d7, [sp]
   d7726:	e415      	b.n	d6f54 <__ieee754_pow+0x9c>
   d7728:	f8df c0e4 	ldr.w	ip, [pc, #228]	; d7810 <__ieee754_pow+0x958>
   d772c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   d7730:	4563      	cmp	r3, ip
   d7732:	f340 810b 	ble.w	d794c <__ieee754_pow+0xa94>
   d7736:	4b35      	ldr	r3, [pc, #212]	; (d780c <__ieee754_pow+0x954>)
   d7738:	440b      	add	r3, r1
   d773a:	4303      	orrs	r3, r0
   d773c:	d10a      	bne.n	d7754 <__ieee754_pow+0x89c>
   d773e:	4632      	mov	r2, r6
   d7740:	463b      	mov	r3, r7
   d7742:	f000 fba3 	bl	d7e8c <__aeabi_dsub>
   d7746:	4652      	mov	r2, sl
   d7748:	465b      	mov	r3, fp
   d774a:	f000 ffdd 	bl	d8708 <__aeabi_dcmpge>
   d774e:	2800      	cmp	r0, #0
   d7750:	f43f aef2 	beq.w	d7538 <__ieee754_pow+0x680>
   d7754:	a326      	add	r3, pc, #152	; (adr r3, d77f0 <__ieee754_pow+0x938>)
   d7756:	e9d3 2300 	ldrd	r2, r3, [r3]
   d775a:	ec51 0b19 	vmov	r0, r1, d9
   d775e:	f000 fd4d 	bl	d81fc <__aeabi_dmul>
   d7762:	a323      	add	r3, pc, #140	; (adr r3, d77f0 <__ieee754_pow+0x938>)
   d7764:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7768:	f000 fd48 	bl	d81fc <__aeabi_dmul>
   d776c:	e9cd 0100 	strd	r0, r1, [sp]
   d7770:	f7ff bbf0 	b.w	d6f54 <__ieee754_pow+0x9c>
   d7774:	ed9f 7b20 	vldr	d7, [pc, #128]	; d77f8 <__ieee754_pow+0x940>
   d7778:	eeb0 9a47 	vmov.f32	s18, s14
   d777c:	eef0 9a67 	vmov.f32	s19, s15
   d7780:	e686      	b.n	d7490 <__ieee754_pow+0x5d8>
   d7782:	f1bb 0f00 	cmp.w	fp, #0
   d7786:	daca      	bge.n	d771e <__ieee754_pow+0x866>
   d7788:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   d778c:	9600      	str	r6, [sp, #0]
   d778e:	9301      	str	r3, [sp, #4]
   d7790:	f7ff bbe0 	b.w	d6f54 <__ieee754_pow+0x9c>
   d7794:	f3af 8000 	nop.w
   d7798:	00000000 	.word	0x00000000
   d779c:	bff00000 	.word	0xbff00000
   d77a0:	652b82fe 	.word	0x652b82fe
   d77a4:	3c971547 	.word	0x3c971547
   d77a8:	00000000 	.word	0x00000000
   d77ac:	3fe62e43 	.word	0x3fe62e43
   d77b0:	fefa39ef 	.word	0xfefa39ef
   d77b4:	3fe62e42 	.word	0x3fe62e42
   d77b8:	0ca86c39 	.word	0x0ca86c39
   d77bc:	be205c61 	.word	0xbe205c61
   d77c0:	72bea4d0 	.word	0x72bea4d0
   d77c4:	3e663769 	.word	0x3e663769
   d77c8:	c5d26bf1 	.word	0xc5d26bf1
   d77cc:	3ebbbd41 	.word	0x3ebbbd41
   d77d0:	af25de2c 	.word	0xaf25de2c
   d77d4:	3f11566a 	.word	0x3f11566a
   d77d8:	16bebd93 	.word	0x16bebd93
   d77dc:	3f66c16c 	.word	0x3f66c16c
   d77e0:	5555553e 	.word	0x5555553e
   d77e4:	3fc55555 	.word	0x3fc55555
	...
   d77f0:	c2f8f359 	.word	0xc2f8f359
   d77f4:	01a56e1f 	.word	0x01a56e1f
   d77f8:	00000000 	.word	0x00000000
   d77fc:	3ff00000 	.word	0x3ff00000
   d7800:	408fffff 	.word	0x408fffff
   d7804:	000fffff 	.word	0x000fffff
   d7808:	3ff00000 	.word	0x3ff00000
   d780c:	3f6f3400 	.word	0x3f6f3400
   d7810:	4090cbff 	.word	0x4090cbff
   d7814:	4598      	cmp	r8, r3
   d7816:	f6ff af7e 	blt.w	d7716 <__ieee754_pow+0x85e>
   d781a:	4b91      	ldr	r3, [pc, #580]	; (d7a60 <__ieee754_pow+0xba8>)
   d781c:	4598      	cmp	r8, r3
   d781e:	f73f ac0f 	bgt.w	d7040 <__ieee754_pow+0x188>
   d7822:	4b8f      	ldr	r3, [pc, #572]	; (d7a60 <__ieee754_pow+0xba8>)
   d7824:	2200      	movs	r2, #0
   d7826:	e9dd 0100 	ldrd	r0, r1, [sp]
   d782a:	f000 fb2f 	bl	d7e8c <__aeabi_dsub>
   d782e:	a378      	add	r3, pc, #480	; (adr r3, d7a10 <__ieee754_pow+0xb58>)
   d7830:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7834:	4604      	mov	r4, r0
   d7836:	460d      	mov	r5, r1
   d7838:	f000 fce0 	bl	d81fc <__aeabi_dmul>
   d783c:	a376      	add	r3, pc, #472	; (adr r3, d7a18 <__ieee754_pow+0xb60>)
   d783e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7842:	4682      	mov	sl, r0
   d7844:	468b      	mov	fp, r1
   d7846:	4620      	mov	r0, r4
   d7848:	4629      	mov	r1, r5
   d784a:	f000 fcd7 	bl	d81fc <__aeabi_dmul>
   d784e:	4b85      	ldr	r3, [pc, #532]	; (d7a64 <__ieee754_pow+0xbac>)
   d7850:	4680      	mov	r8, r0
   d7852:	4689      	mov	r9, r1
   d7854:	2200      	movs	r2, #0
   d7856:	4620      	mov	r0, r4
   d7858:	4629      	mov	r1, r5
   d785a:	f000 fccf 	bl	d81fc <__aeabi_dmul>
   d785e:	4602      	mov	r2, r0
   d7860:	460b      	mov	r3, r1
   d7862:	a16f      	add	r1, pc, #444	; (adr r1, d7a20 <__ieee754_pow+0xb68>)
   d7864:	e9d1 0100 	ldrd	r0, r1, [r1]
   d7868:	f000 fb10 	bl	d7e8c <__aeabi_dsub>
   d786c:	4622      	mov	r2, r4
   d786e:	462b      	mov	r3, r5
   d7870:	f000 fcc4 	bl	d81fc <__aeabi_dmul>
   d7874:	4602      	mov	r2, r0
   d7876:	460b      	mov	r3, r1
   d7878:	2000      	movs	r0, #0
   d787a:	497b      	ldr	r1, [pc, #492]	; (d7a68 <__ieee754_pow+0xbb0>)
   d787c:	f000 fb06 	bl	d7e8c <__aeabi_dsub>
   d7880:	4622      	mov	r2, r4
   d7882:	462b      	mov	r3, r5
   d7884:	4604      	mov	r4, r0
   d7886:	460d      	mov	r5, r1
   d7888:	4610      	mov	r0, r2
   d788a:	4619      	mov	r1, r3
   d788c:	f000 fcb6 	bl	d81fc <__aeabi_dmul>
   d7890:	4602      	mov	r2, r0
   d7892:	460b      	mov	r3, r1
   d7894:	4620      	mov	r0, r4
   d7896:	4629      	mov	r1, r5
   d7898:	f000 fcb0 	bl	d81fc <__aeabi_dmul>
   d789c:	a362      	add	r3, pc, #392	; (adr r3, d7a28 <__ieee754_pow+0xb70>)
   d789e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d78a2:	f000 fcab 	bl	d81fc <__aeabi_dmul>
   d78a6:	4602      	mov	r2, r0
   d78a8:	460b      	mov	r3, r1
   d78aa:	4640      	mov	r0, r8
   d78ac:	4649      	mov	r1, r9
   d78ae:	f000 faed 	bl	d7e8c <__aeabi_dsub>
   d78b2:	4680      	mov	r8, r0
   d78b4:	4689      	mov	r9, r1
   d78b6:	4650      	mov	r0, sl
   d78b8:	4659      	mov	r1, fp
   d78ba:	4642      	mov	r2, r8
   d78bc:	464b      	mov	r3, r9
   d78be:	f000 fae7 	bl	d7e90 <__adddf3>
   d78c2:	2400      	movs	r4, #0
   d78c4:	4652      	mov	r2, sl
   d78c6:	465b      	mov	r3, fp
   d78c8:	4620      	mov	r0, r4
   d78ca:	460d      	mov	r5, r1
   d78cc:	f000 fade 	bl	d7e8c <__aeabi_dsub>
   d78d0:	4602      	mov	r2, r0
   d78d2:	460b      	mov	r3, r1
   d78d4:	4640      	mov	r0, r8
   d78d6:	4649      	mov	r1, r9
   d78d8:	f000 fad8 	bl	d7e8c <__aeabi_dsub>
   d78dc:	4682      	mov	sl, r0
   d78de:	468b      	mov	fp, r1
   d78e0:	e5ca      	b.n	d7478 <__ieee754_pow+0x5c0>
   d78e2:	ed9f 7b53 	vldr	d7, [pc, #332]	; d7a30 <__ieee754_pow+0xb78>
   d78e6:	eeb0 ba47 	vmov.f32	s22, s14
   d78ea:	eef0 ba67 	vmov.f32	s23, s15
   d78ee:	eeb0 ca47 	vmov.f32	s24, s14
   d78f2:	eef0 ca67 	vmov.f32	s25, s15
   d78f6:	ed9f 7b50 	vldr	d7, [pc, #320]	; d7a38 <__ieee754_pow+0xb80>
   d78fa:	f04f 0900 	mov.w	r9, #0
   d78fe:	ec54 3b17 	vmov	r3, r4, d7
   d7902:	e41d      	b.n	d7140 <__ieee754_pow+0x288>
   d7904:	2000      	movs	r0, #0
   d7906:	f7ff bbf3 	b.w	d70f0 <__ieee754_pow+0x238>
   d790a:	4955      	ldr	r1, [pc, #340]	; (d7a60 <__ieee754_pow+0xba8>)
   d790c:	4622      	mov	r2, r4
   d790e:	462b      	mov	r3, r5
   d7910:	2000      	movs	r0, #0
   d7912:	f000 fd9d 	bl	d8450 <__aeabi_ddiv>
   d7916:	e9cd 0100 	strd	r0, r1, [sp]
   d791a:	f7ff bb1b 	b.w	d6f54 <__ieee754_pow+0x9c>
   d791e:	4622      	mov	r2, r4
   d7920:	462b      	mov	r3, r5
   d7922:	4620      	mov	r0, r4
   d7924:	4629      	mov	r1, r5
   d7926:	f000 fc69 	bl	d81fc <__aeabi_dmul>
   d792a:	e9cd 0100 	strd	r0, r1, [sp]
   d792e:	f7ff bb11 	b.w	d6f54 <__ieee754_pow+0x9c>
   d7932:	2b00      	cmp	r3, #0
   d7934:	d142      	bne.n	d79bc <__ieee754_pow+0xb04>
   d7936:	f1c1 0114 	rsb	r1, r1, #20
   d793a:	fa4a f001 	asr.w	r0, sl, r1
   d793e:	fa00 f101 	lsl.w	r1, r0, r1
   d7942:	4551      	cmp	r1, sl
   d7944:	d05a      	beq.n	d79fc <__ieee754_pow+0xb44>
   d7946:	9303      	str	r3, [sp, #12]
   d7948:	f7ff bae0 	b.w	d6f0c <__ieee754_pow+0x54>
   d794c:	4a46      	ldr	r2, [pc, #280]	; (d7a68 <__ieee754_pow+0xbb0>)
   d794e:	4293      	cmp	r3, r2
   d7950:	dc5b      	bgt.n	d7a0a <__ieee754_pow+0xb52>
   d7952:	e9dd 1200 	ldrd	r1, r2, [sp]
   d7956:	9100      	str	r1, [sp, #0]
   d7958:	9103      	str	r1, [sp, #12]
   d795a:	e622      	b.n	d75a2 <__ieee754_pow+0x6ea>
   d795c:	a338      	add	r3, pc, #224	; (adr r3, d7a40 <__ieee754_pow+0xb88>)
   d795e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7962:	ec51 0b19 	vmov	r0, r1, d9
   d7966:	f000 fc49 	bl	d81fc <__aeabi_dmul>
   d796a:	a335      	add	r3, pc, #212	; (adr r3, d7a40 <__ieee754_pow+0xb88>)
   d796c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7970:	f000 fc44 	bl	d81fc <__aeabi_dmul>
   d7974:	e9cd 0100 	strd	r0, r1, [sp]
   d7978:	f7ff baec 	b.w	d6f54 <__ieee754_pow+0x9c>
   d797c:	9b03      	ldr	r3, [sp, #12]
   d797e:	2b01      	cmp	r3, #1
   d7980:	f47f aae8 	bne.w	d6f54 <__ieee754_pow+0x9c>
   d7984:	e9dd 2100 	ldrd	r2, r1, [sp]
   d7988:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d798c:	e9cd 2300 	strd	r2, r3, [sp]
   d7990:	f7ff bae0 	b.w	d6f54 <__ieee754_pow+0x9c>
   d7994:	ed9f 7b2c 	vldr	d7, [pc, #176]	; d7a48 <__ieee754_pow+0xb90>
   d7998:	eeb0 ba47 	vmov.f32	s22, s14
   d799c:	eef0 ba67 	vmov.f32	s23, s15
   d79a0:	ed9f 7b2b 	vldr	d7, [pc, #172]	; d7a50 <__ieee754_pow+0xb98>
   d79a4:	eeb0 ca47 	vmov.f32	s24, s14
   d79a8:	eef0 ca67 	vmov.f32	s25, s15
   d79ac:	ed9f 7b2a 	vldr	d7, [pc, #168]	; d7a58 <__ieee754_pow+0xba0>
   d79b0:	f44f 2980 	mov.w	r9, #262144	; 0x40000
   d79b4:	ec54 3b17 	vmov	r3, r4, d7
   d79b8:	f7ff bbc2 	b.w	d7140 <__ieee754_pow+0x288>
   d79bc:	ec45 4b10 	vmov	d0, r4, r5
   d79c0:	9203      	str	r2, [sp, #12]
   d79c2:	f000 f917 	bl	d7bf4 <fabs>
   d79c6:	9a03      	ldr	r2, [sp, #12]
   d79c8:	ed8d 0b00 	vstr	d0, [sp]
   d79cc:	2a00      	cmp	r2, #0
   d79ce:	f47f ab61 	bne.w	d7094 <__ieee754_pow+0x1dc>
   d79d2:	9203      	str	r2, [sp, #12]
   d79d4:	f7ff baf5 	b.w	d6fc2 <__ieee754_pow+0x10a>
   d79d8:	9803      	ldr	r0, [sp, #12]
   d79da:	ec43 2b10 	vmov	d0, r2, r3
   d79de:	f000 f9bf 	bl	d7d60 <scalbn>
   d79e2:	ec51 0b10 	vmov	r0, r1, d0
   d79e6:	e68f      	b.n	d7708 <__ieee754_pow+0x850>
   d79e8:	f000 0001 	and.w	r0, r0, #1
   d79ec:	f1c0 0102 	rsb	r1, r0, #2
   d79f0:	9103      	str	r1, [sp, #12]
   d79f2:	2b00      	cmp	r3, #0
   d79f4:	f43f aa8a 	beq.w	d6f0c <__ieee754_pow+0x54>
   d79f8:	f7ff bada 	b.w	d6fb0 <__ieee754_pow+0xf8>
   d79fc:	f000 0001 	and.w	r0, r0, #1
   d7a00:	f1c0 0302 	rsb	r3, r0, #2
   d7a04:	9303      	str	r3, [sp, #12]
   d7a06:	f7ff ba81 	b.w	d6f0c <__ieee754_pow+0x54>
   d7a0a:	151b      	asrs	r3, r3, #20
   d7a0c:	e596      	b.n	d753c <__ieee754_pow+0x684>
   d7a0e:	bf00      	nop
   d7a10:	60000000 	.word	0x60000000
   d7a14:	3ff71547 	.word	0x3ff71547
   d7a18:	f85ddf44 	.word	0xf85ddf44
   d7a1c:	3e54ae0b 	.word	0x3e54ae0b
   d7a20:	55555555 	.word	0x55555555
   d7a24:	3fd55555 	.word	0x3fd55555
   d7a28:	652b82fe 	.word	0x652b82fe
   d7a2c:	3ff71547 	.word	0x3ff71547
	...
   d7a3c:	3ff00000 	.word	0x3ff00000
   d7a40:	8800759c 	.word	0x8800759c
   d7a44:	7e37e43c 	.word	0x7e37e43c
   d7a48:	40000000 	.word	0x40000000
   d7a4c:	3fe2b803 	.word	0x3fe2b803
   d7a50:	43cfd006 	.word	0x43cfd006
   d7a54:	3e4cfdeb 	.word	0x3e4cfdeb
   d7a58:	00000000 	.word	0x00000000
   d7a5c:	3ff80000 	.word	0x3ff80000
   d7a60:	3ff00000 	.word	0x3ff00000
   d7a64:	3fd00000 	.word	0x3fd00000
   d7a68:	3fe00000 	.word	0x3fe00000

000d7a6c <__ieee754_sqrt>:
   d7a6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7a70:	4a5f      	ldr	r2, [pc, #380]	; (d7bf0 <__ieee754_sqrt+0x184>)
   d7a72:	ec57 6b10 	vmov	r6, r7, d0
   d7a76:	43ba      	bics	r2, r7
   d7a78:	f000 8098 	beq.w	d7bac <__ieee754_sqrt+0x140>
   d7a7c:	2f00      	cmp	r7, #0
   d7a7e:	ee10 4a10 	vmov	r4, s0
   d7a82:	463b      	mov	r3, r7
   d7a84:	dd4e      	ble.n	d7b24 <__ieee754_sqrt+0xb8>
   d7a86:	1539      	asrs	r1, r7, #20
   d7a88:	d05b      	beq.n	d7b42 <__ieee754_sqrt+0xd6>
   d7a8a:	f3c3 0313 	ubfx	r3, r3, #0, #20
   d7a8e:	07ca      	lsls	r2, r1, #31
   d7a90:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d7a94:	f2a1 3eff 	subw	lr, r1, #1023	; 0x3ff
   d7a98:	d403      	bmi.n	d7aa2 <__ieee754_sqrt+0x36>
   d7a9a:	005b      	lsls	r3, r3, #1
   d7a9c:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
   d7aa0:	0064      	lsls	r4, r4, #1
   d7aa2:	0fe2      	lsrs	r2, r4, #31
   d7aa4:	f04f 0c00 	mov.w	ip, #0
   d7aa8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   d7aac:	ea4f 0e6e 	mov.w	lr, lr, asr #1
   d7ab0:	0064      	lsls	r4, r4, #1
   d7ab2:	4666      	mov	r6, ip
   d7ab4:	2516      	movs	r5, #22
   d7ab6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   d7aba:	18b1      	adds	r1, r6, r2
   d7abc:	4299      	cmp	r1, r3
   d7abe:	dc02      	bgt.n	d7ac6 <__ieee754_sqrt+0x5a>
   d7ac0:	1a5b      	subs	r3, r3, r1
   d7ac2:	188e      	adds	r6, r1, r2
   d7ac4:	4494      	add	ip, r2
   d7ac6:	005b      	lsls	r3, r3, #1
   d7ac8:	3d01      	subs	r5, #1
   d7aca:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
   d7ace:	ea4f 0252 	mov.w	r2, r2, lsr #1
   d7ad2:	ea4f 0444 	mov.w	r4, r4, lsl #1
   d7ad6:	d1f0      	bne.n	d7aba <__ieee754_sqrt+0x4e>
   d7ad8:	462f      	mov	r7, r5
   d7ada:	2020      	movs	r0, #32
   d7adc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   d7ae0:	e009      	b.n	d7af6 <__ieee754_sqrt+0x8a>
   d7ae2:	d03e      	beq.n	d7b62 <__ieee754_sqrt+0xf6>
   d7ae4:	0fe1      	lsrs	r1, r4, #31
   d7ae6:	3801      	subs	r0, #1
   d7ae8:	ea4f 0252 	mov.w	r2, r2, lsr #1
   d7aec:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   d7af0:	ea4f 0444 	mov.w	r4, r4, lsl #1
   d7af4:	d03e      	beq.n	d7b74 <__ieee754_sqrt+0x108>
   d7af6:	42b3      	cmp	r3, r6
   d7af8:	eb02 0105 	add.w	r1, r2, r5
   d7afc:	ddf1      	ble.n	d7ae2 <__ieee754_sqrt+0x76>
   d7afe:	2900      	cmp	r1, #0
   d7b00:	eb01 0502 	add.w	r5, r1, r2
   d7b04:	db09      	blt.n	d7b1a <__ieee754_sqrt+0xae>
   d7b06:	46b0      	mov	r8, r6
   d7b08:	1b9b      	subs	r3, r3, r6
   d7b0a:	42a1      	cmp	r1, r4
   d7b0c:	bf88      	it	hi
   d7b0e:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
   d7b12:	1a64      	subs	r4, r4, r1
   d7b14:	4417      	add	r7, r2
   d7b16:	4646      	mov	r6, r8
   d7b18:	e7e4      	b.n	d7ae4 <__ieee754_sqrt+0x78>
   d7b1a:	2d00      	cmp	r5, #0
   d7b1c:	dbf3      	blt.n	d7b06 <__ieee754_sqrt+0x9a>
   d7b1e:	f106 0801 	add.w	r8, r6, #1
   d7b22:	e7f1      	b.n	d7b08 <__ieee754_sqrt+0x9c>
   d7b24:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
   d7b28:	4332      	orrs	r2, r6
   d7b2a:	d036      	beq.n	d7b9a <__ieee754_sqrt+0x12e>
   d7b2c:	2f00      	cmp	r7, #0
   d7b2e:	d14d      	bne.n	d7bcc <__ieee754_sqrt+0x160>
   d7b30:	4639      	mov	r1, r7
   d7b32:	0ae2      	lsrs	r2, r4, #11
   d7b34:	3915      	subs	r1, #21
   d7b36:	0564      	lsls	r4, r4, #21
   d7b38:	4613      	mov	r3, r2
   d7b3a:	2a00      	cmp	r2, #0
   d7b3c:	d0f9      	beq.n	d7b32 <__ieee754_sqrt+0xc6>
   d7b3e:	02d7      	lsls	r7, r2, #11
   d7b40:	d451      	bmi.n	d7be6 <__ieee754_sqrt+0x17a>
   d7b42:	2000      	movs	r0, #0
   d7b44:	005b      	lsls	r3, r3, #1
   d7b46:	02de      	lsls	r6, r3, #11
   d7b48:	4605      	mov	r5, r0
   d7b4a:	f100 0001 	add.w	r0, r0, #1
   d7b4e:	d5f9      	bpl.n	d7b44 <__ieee754_sqrt+0xd8>
   d7b50:	461a      	mov	r2, r3
   d7b52:	4623      	mov	r3, r4
   d7b54:	4084      	lsls	r4, r0
   d7b56:	f1c0 0020 	rsb	r0, r0, #32
   d7b5a:	40c3      	lsrs	r3, r0
   d7b5c:	4313      	orrs	r3, r2
   d7b5e:	1b49      	subs	r1, r1, r5
   d7b60:	e793      	b.n	d7a8a <__ieee754_sqrt+0x1e>
   d7b62:	42a1      	cmp	r1, r4
   d7b64:	d8be      	bhi.n	d7ae4 <__ieee754_sqrt+0x78>
   d7b66:	2900      	cmp	r1, #0
   d7b68:	eb01 0502 	add.w	r5, r1, r2
   d7b6c:	dbd5      	blt.n	d7b1a <__ieee754_sqrt+0xae>
   d7b6e:	4698      	mov	r8, r3
   d7b70:	2300      	movs	r3, #0
   d7b72:	e7ce      	b.n	d7b12 <__ieee754_sqrt+0xa6>
   d7b74:	4323      	orrs	r3, r4
   d7b76:	d112      	bne.n	d7b9e <__ieee754_sqrt+0x132>
   d7b78:	0878      	lsrs	r0, r7, #1
   d7b7a:	ea4f 016c 	mov.w	r1, ip, asr #1
   d7b7e:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   d7b82:	f01c 0f01 	tst.w	ip, #1
   d7b86:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   d7b8a:	bf18      	it	ne
   d7b8c:	f040 4000 	orrne.w	r0, r0, #2147483648	; 0x80000000
   d7b90:	eb01 530e 	add.w	r3, r1, lr, lsl #20
   d7b94:	4602      	mov	r2, r0
   d7b96:	ec43 2b10 	vmov	d0, r2, r3
   d7b9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d7b9e:	1c7b      	adds	r3, r7, #1
   d7ba0:	bf16      	itet	ne
   d7ba2:	1c78      	addne	r0, r7, #1
   d7ba4:	f10c 0c01 	addeq.w	ip, ip, #1
   d7ba8:	0840      	lsrne	r0, r0, #1
   d7baa:	e7e6      	b.n	d7b7a <__ieee754_sqrt+0x10e>
   d7bac:	ee10 2a10 	vmov	r2, s0
   d7bb0:	ee10 0a10 	vmov	r0, s0
   d7bb4:	463b      	mov	r3, r7
   d7bb6:	4639      	mov	r1, r7
   d7bb8:	f000 fb20 	bl	d81fc <__aeabi_dmul>
   d7bbc:	4632      	mov	r2, r6
   d7bbe:	463b      	mov	r3, r7
   d7bc0:	f000 f966 	bl	d7e90 <__adddf3>
   d7bc4:	ec41 0b10 	vmov	d0, r0, r1
   d7bc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d7bcc:	ee10 2a10 	vmov	r2, s0
   d7bd0:	4630      	mov	r0, r6
   d7bd2:	4639      	mov	r1, r7
   d7bd4:	f000 f95a 	bl	d7e8c <__aeabi_dsub>
   d7bd8:	4602      	mov	r2, r0
   d7bda:	460b      	mov	r3, r1
   d7bdc:	f000 fc38 	bl	d8450 <__aeabi_ddiv>
   d7be0:	ec41 0b10 	vmov	d0, r0, r1
   d7be4:	e7d9      	b.n	d7b9a <__ieee754_sqrt+0x12e>
   d7be6:	4623      	mov	r3, r4
   d7be8:	2020      	movs	r0, #32
   d7bea:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   d7bee:	e7b4      	b.n	d7b5a <__ieee754_sqrt+0xee>
   d7bf0:	7ff00000 	.word	0x7ff00000

000d7bf4 <fabs>:
   d7bf4:	ec51 0b10 	vmov	r0, r1, d0
   d7bf8:	ee10 2a10 	vmov	r2, s0
   d7bfc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   d7c00:	ec43 2b10 	vmov	d0, r2, r3
   d7c04:	4770      	bx	lr
   d7c06:	bf00      	nop

000d7c08 <finite>:
   d7c08:	b082      	sub	sp, #8
   d7c0a:	ed8d 0b00 	vstr	d0, [sp]
   d7c0e:	9801      	ldr	r0, [sp, #4]
   d7c10:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
   d7c14:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
   d7c18:	0fc0      	lsrs	r0, r0, #31
   d7c1a:	b002      	add	sp, #8
   d7c1c:	4770      	bx	lr
   d7c1e:	bf00      	nop

000d7c20 <matherr>:
   d7c20:	2000      	movs	r0, #0
   d7c22:	4770      	bx	lr
   d7c24:	0000      	movs	r0, r0
	...

000d7c28 <nan>:
   d7c28:	ed9f 0b01 	vldr	d0, [pc, #4]	; d7c30 <nan+0x8>
   d7c2c:	4770      	bx	lr
   d7c2e:	bf00      	nop
   d7c30:	00000000 	.word	0x00000000
   d7c34:	7ff80000 	.word	0x7ff80000

000d7c38 <rint>:
   d7c38:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7c3a:	ec53 2b10 	vmov	r2, r3, d0
   d7c3e:	f3c3 560a 	ubfx	r6, r3, #20, #11
   d7c42:	f2a6 30ff 	subw	r0, r6, #1023	; 0x3ff
   d7c46:	2813      	cmp	r0, #19
   d7c48:	ee10 5a10 	vmov	r5, s0
   d7c4c:	b083      	sub	sp, #12
   d7c4e:	4619      	mov	r1, r3
   d7c50:	ea4f 74d3 	mov.w	r4, r3, lsr #31
   d7c54:	dc31      	bgt.n	d7cba <rint+0x82>
   d7c56:	2800      	cmp	r0, #0
   d7c58:	db4c      	blt.n	d7cf4 <rint+0xbc>
   d7c5a:	4e3e      	ldr	r6, [pc, #248]	; (d7d54 <rint+0x11c>)
   d7c5c:	4106      	asrs	r6, r0
   d7c5e:	ea03 0706 	and.w	r7, r3, r6
   d7c62:	4317      	orrs	r7, r2
   d7c64:	d02e      	beq.n	d7cc4 <rint+0x8c>
   d7c66:	ea03 0356 	and.w	r3, r3, r6, lsr #1
   d7c6a:	431d      	orrs	r5, r3
   d7c6c:	ea4f 0656 	mov.w	r6, r6, lsr #1
   d7c70:	d00c      	beq.n	d7c8c <rint+0x54>
   d7c72:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   d7c76:	2813      	cmp	r0, #19
   d7c78:	ea21 0606 	bic.w	r6, r1, r6
   d7c7c:	fa43 f100 	asr.w	r1, r3, r0
   d7c80:	ea41 0106 	orr.w	r1, r1, r6
   d7c84:	bf0c      	ite	eq
   d7c86:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
   d7c8a:	2500      	movne	r5, #0
   d7c8c:	4832      	ldr	r0, [pc, #200]	; (d7d58 <rint+0x120>)
   d7c8e:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
   d7c92:	462a      	mov	r2, r5
   d7c94:	e9d4 4500 	ldrd	r4, r5, [r4]
   d7c98:	460b      	mov	r3, r1
   d7c9a:	4620      	mov	r0, r4
   d7c9c:	4629      	mov	r1, r5
   d7c9e:	f000 f8f7 	bl	d7e90 <__adddf3>
   d7ca2:	e9cd 0100 	strd	r0, r1, [sp]
   d7ca6:	e9dd 0100 	ldrd	r0, r1, [sp]
   d7caa:	4622      	mov	r2, r4
   d7cac:	462b      	mov	r3, r5
   d7cae:	f000 f8ed 	bl	d7e8c <__aeabi_dsub>
   d7cb2:	ec41 0b10 	vmov	d0, r0, r1
   d7cb6:	b003      	add	sp, #12
   d7cb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7cba:	2833      	cmp	r0, #51	; 0x33
   d7cbc:	dd06      	ble.n	d7ccc <rint+0x94>
   d7cbe:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   d7cc2:	d040      	beq.n	d7d46 <rint+0x10e>
   d7cc4:	ec43 2b10 	vmov	d0, r2, r3
   d7cc8:	b003      	add	sp, #12
   d7cca:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7ccc:	f2a6 4613 	subw	r6, r6, #1043	; 0x413
   d7cd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d7cd4:	40f0      	lsrs	r0, r6
   d7cd6:	4202      	tst	r2, r0
   d7cd8:	d0f4      	beq.n	d7cc4 <rint+0x8c>
   d7cda:	ea15 0250 	ands.w	r2, r5, r0, lsr #1
   d7cde:	ea4f 0350 	mov.w	r3, r0, lsr #1
   d7ce2:	d0d3      	beq.n	d7c8c <rint+0x54>
   d7ce4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   d7ce8:	ea25 0503 	bic.w	r5, r5, r3
   d7cec:	fa42 f606 	asr.w	r6, r2, r6
   d7cf0:	4335      	orrs	r5, r6
   d7cf2:	e7cb      	b.n	d7c8c <rint+0x54>
   d7cf4:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   d7cf8:	4310      	orrs	r0, r2
   d7cfa:	d0e3      	beq.n	d7cc4 <rint+0x8c>
   d7cfc:	f3c3 0013 	ubfx	r0, r3, #0, #20
   d7d00:	4310      	orrs	r0, r2
   d7d02:	4245      	negs	r5, r0
   d7d04:	4305      	orrs	r5, r0
   d7d06:	4814      	ldr	r0, [pc, #80]	; (d7d58 <rint+0x120>)
   d7d08:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   d7d0c:	e9d0 6700 	ldrd	r6, r7, [r0]
   d7d10:	0c59      	lsrs	r1, r3, #17
   d7d12:	0b2d      	lsrs	r5, r5, #12
   d7d14:	0449      	lsls	r1, r1, #17
   d7d16:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
   d7d1a:	ea45 0301 	orr.w	r3, r5, r1
   d7d1e:	4630      	mov	r0, r6
   d7d20:	4639      	mov	r1, r7
   d7d22:	f000 f8b5 	bl	d7e90 <__adddf3>
   d7d26:	e9cd 0100 	strd	r0, r1, [sp]
   d7d2a:	463b      	mov	r3, r7
   d7d2c:	e9dd 0100 	ldrd	r0, r1, [sp]
   d7d30:	4632      	mov	r2, r6
   d7d32:	f000 f8ab 	bl	d7e8c <__aeabi_dsub>
   d7d36:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   d7d3a:	ea43 71c4 	orr.w	r1, r3, r4, lsl #31
   d7d3e:	ec41 0b10 	vmov	d0, r0, r1
   d7d42:	b003      	add	sp, #12
   d7d44:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7d46:	ee10 0a10 	vmov	r0, s0
   d7d4a:	f000 f8a1 	bl	d7e90 <__adddf3>
   d7d4e:	ec41 0b10 	vmov	d0, r0, r1
   d7d52:	e7b9      	b.n	d7cc8 <rint+0x90>
   d7d54:	000fffff 	.word	0x000fffff
   d7d58:	000d9518 	.word	0x000d9518
   d7d5c:	00000000 	.word	0x00000000

000d7d60 <scalbn>:
   d7d60:	b538      	push	{r3, r4, r5, lr}
   d7d62:	ec53 2b10 	vmov	r2, r3, d0
   d7d66:	f3c3 510a 	ubfx	r1, r3, #20, #11
   d7d6a:	461c      	mov	r4, r3
   d7d6c:	4605      	mov	r5, r0
   d7d6e:	bb81      	cbnz	r1, d7dd2 <scalbn+0x72>
   d7d70:	ee10 1a10 	vmov	r1, s0
   d7d74:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   d7d78:	4321      	orrs	r1, r4
   d7d7a:	d029      	beq.n	d7dd0 <scalbn+0x70>
   d7d7c:	4619      	mov	r1, r3
   d7d7e:	2200      	movs	r2, #0
   d7d80:	4b3d      	ldr	r3, [pc, #244]	; (d7e78 <scalbn+0x118>)
   d7d82:	4c3e      	ldr	r4, [pc, #248]	; (d7e7c <scalbn+0x11c>)
   d7d84:	ee10 0a10 	vmov	r0, s0
   d7d88:	f000 fa38 	bl	d81fc <__aeabi_dmul>
   d7d8c:	42a5      	cmp	r5, r4
   d7d8e:	4602      	mov	r2, r0
   d7d90:	460b      	mov	r3, r1
   d7d92:	db16      	blt.n	d7dc2 <scalbn+0x62>
   d7d94:	460c      	mov	r4, r1
   d7d96:	f3c1 510a 	ubfx	r1, r1, #20, #11
   d7d9a:	3936      	subs	r1, #54	; 0x36
   d7d9c:	4429      	add	r1, r5
   d7d9e:	f240 70fe 	movw	r0, #2046	; 0x7fe
   d7da2:	4281      	cmp	r1, r0
   d7da4:	dc21      	bgt.n	d7dea <scalbn+0x8a>
   d7da6:	2900      	cmp	r1, #0
   d7da8:	dc47      	bgt.n	d7e3a <scalbn+0xda>
   d7daa:	f111 0f35 	cmn.w	r1, #53	; 0x35
   d7dae:	da34      	bge.n	d7e1a <scalbn+0xba>
   d7db0:	f24c 3150 	movw	r1, #50000	; 0xc350
   d7db4:	428d      	cmp	r5, r1
   d7db6:	dc18      	bgt.n	d7dea <scalbn+0x8a>
   d7db8:	2b00      	cmp	r3, #0
   d7dba:	a127      	add	r1, pc, #156	; (adr r1, d7e58 <scalbn+0xf8>)
   d7dbc:	e9d1 0100 	ldrd	r0, r1, [r1]
   d7dc0:	db44      	blt.n	d7e4c <scalbn+0xec>
   d7dc2:	a325      	add	r3, pc, #148	; (adr r3, d7e58 <scalbn+0xf8>)
   d7dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7dc8:	f000 fa18 	bl	d81fc <__aeabi_dmul>
   d7dcc:	ec41 0b10 	vmov	d0, r0, r1
   d7dd0:	bd38      	pop	{r3, r4, r5, pc}
   d7dd2:	f240 70ff 	movw	r0, #2047	; 0x7ff
   d7dd6:	4281      	cmp	r1, r0
   d7dd8:	d1e0      	bne.n	d7d9c <scalbn+0x3c>
   d7dda:	ee10 0a10 	vmov	r0, s0
   d7dde:	4619      	mov	r1, r3
   d7de0:	f000 f856 	bl	d7e90 <__adddf3>
   d7de4:	ec41 0b10 	vmov	d0, r0, r1
   d7de8:	bd38      	pop	{r3, r4, r5, pc}
   d7dea:	2b00      	cmp	r3, #0
   d7dec:	a11c      	add	r1, pc, #112	; (adr r1, d7e60 <scalbn+0x100>)
   d7dee:	e9d1 0100 	ldrd	r0, r1, [r1]
   d7df2:	db07      	blt.n	d7e04 <scalbn+0xa4>
   d7df4:	a31a      	add	r3, pc, #104	; (adr r3, d7e60 <scalbn+0x100>)
   d7df6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7dfa:	f000 f9ff 	bl	d81fc <__aeabi_dmul>
   d7dfe:	ec41 0b10 	vmov	d0, r0, r1
   d7e02:	bd38      	pop	{r3, r4, r5, pc}
   d7e04:	a118      	add	r1, pc, #96	; (adr r1, d7e68 <scalbn+0x108>)
   d7e06:	e9d1 0100 	ldrd	r0, r1, [r1]
   d7e0a:	a315      	add	r3, pc, #84	; (adr r3, d7e60 <scalbn+0x100>)
   d7e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7e10:	f000 f9f4 	bl	d81fc <__aeabi_dmul>
   d7e14:	ec41 0b10 	vmov	d0, r0, r1
   d7e18:	e7f3      	b.n	d7e02 <scalbn+0xa2>
   d7e1a:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
   d7e1e:	f424 04e0 	bic.w	r4, r4, #7340032	; 0x700000
   d7e22:	3136      	adds	r1, #54	; 0x36
   d7e24:	ea44 5301 	orr.w	r3, r4, r1, lsl #20
   d7e28:	4610      	mov	r0, r2
   d7e2a:	4619      	mov	r1, r3
   d7e2c:	2200      	movs	r2, #0
   d7e2e:	4b14      	ldr	r3, [pc, #80]	; (d7e80 <scalbn+0x120>)
   d7e30:	f000 f9e4 	bl	d81fc <__aeabi_dmul>
   d7e34:	ec41 0b10 	vmov	d0, r0, r1
   d7e38:	bd38      	pop	{r3, r4, r5, pc}
   d7e3a:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
   d7e3e:	f424 04e0 	bic.w	r4, r4, #7340032	; 0x700000
   d7e42:	ea44 5301 	orr.w	r3, r4, r1, lsl #20
   d7e46:	ec43 2b10 	vmov	d0, r2, r3
   d7e4a:	bd38      	pop	{r3, r4, r5, pc}
   d7e4c:	a108      	add	r1, pc, #32	; (adr r1, d7e70 <scalbn+0x110>)
   d7e4e:	e9d1 0100 	ldrd	r0, r1, [r1]
   d7e52:	e7b6      	b.n	d7dc2 <scalbn+0x62>
   d7e54:	f3af 8000 	nop.w
   d7e58:	c2f8f359 	.word	0xc2f8f359
   d7e5c:	01a56e1f 	.word	0x01a56e1f
   d7e60:	8800759c 	.word	0x8800759c
   d7e64:	7e37e43c 	.word	0x7e37e43c
   d7e68:	8800759c 	.word	0x8800759c
   d7e6c:	fe37e43c 	.word	0xfe37e43c
   d7e70:	c2f8f359 	.word	0xc2f8f359
   d7e74:	81a56e1f 	.word	0x81a56e1f
   d7e78:	43500000 	.word	0x43500000
   d7e7c:	ffff3cb0 	.word	0xffff3cb0
   d7e80:	3c900000 	.word	0x3c900000

000d7e84 <__aeabi_drsub>:
   d7e84:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d7e88:	e002      	b.n	d7e90 <__adddf3>
   d7e8a:	bf00      	nop

000d7e8c <__aeabi_dsub>:
   d7e8c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d7e90 <__adddf3>:
   d7e90:	b530      	push	{r4, r5, lr}
   d7e92:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d7e96:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d7e9a:	ea94 0f05 	teq	r4, r5
   d7e9e:	bf08      	it	eq
   d7ea0:	ea90 0f02 	teqeq	r0, r2
   d7ea4:	bf1f      	itttt	ne
   d7ea6:	ea54 0c00 	orrsne.w	ip, r4, r0
   d7eaa:	ea55 0c02 	orrsne.w	ip, r5, r2
   d7eae:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d7eb2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d7eb6:	f000 80e2 	beq.w	d807e <__adddf3+0x1ee>
   d7eba:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d7ebe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d7ec2:	bfb8      	it	lt
   d7ec4:	426d      	neglt	r5, r5
   d7ec6:	dd0c      	ble.n	d7ee2 <__adddf3+0x52>
   d7ec8:	442c      	add	r4, r5
   d7eca:	ea80 0202 	eor.w	r2, r0, r2
   d7ece:	ea81 0303 	eor.w	r3, r1, r3
   d7ed2:	ea82 0000 	eor.w	r0, r2, r0
   d7ed6:	ea83 0101 	eor.w	r1, r3, r1
   d7eda:	ea80 0202 	eor.w	r2, r0, r2
   d7ede:	ea81 0303 	eor.w	r3, r1, r3
   d7ee2:	2d36      	cmp	r5, #54	; 0x36
   d7ee4:	bf88      	it	hi
   d7ee6:	bd30      	pophi	{r4, r5, pc}
   d7ee8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d7eec:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d7ef0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d7ef4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d7ef8:	d002      	beq.n	d7f00 <__adddf3+0x70>
   d7efa:	4240      	negs	r0, r0
   d7efc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d7f00:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d7f04:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d7f08:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d7f0c:	d002      	beq.n	d7f14 <__adddf3+0x84>
   d7f0e:	4252      	negs	r2, r2
   d7f10:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d7f14:	ea94 0f05 	teq	r4, r5
   d7f18:	f000 80a7 	beq.w	d806a <__adddf3+0x1da>
   d7f1c:	f1a4 0401 	sub.w	r4, r4, #1
   d7f20:	f1d5 0e20 	rsbs	lr, r5, #32
   d7f24:	db0d      	blt.n	d7f42 <__adddf3+0xb2>
   d7f26:	fa02 fc0e 	lsl.w	ip, r2, lr
   d7f2a:	fa22 f205 	lsr.w	r2, r2, r5
   d7f2e:	1880      	adds	r0, r0, r2
   d7f30:	f141 0100 	adc.w	r1, r1, #0
   d7f34:	fa03 f20e 	lsl.w	r2, r3, lr
   d7f38:	1880      	adds	r0, r0, r2
   d7f3a:	fa43 f305 	asr.w	r3, r3, r5
   d7f3e:	4159      	adcs	r1, r3
   d7f40:	e00e      	b.n	d7f60 <__adddf3+0xd0>
   d7f42:	f1a5 0520 	sub.w	r5, r5, #32
   d7f46:	f10e 0e20 	add.w	lr, lr, #32
   d7f4a:	2a01      	cmp	r2, #1
   d7f4c:	fa03 fc0e 	lsl.w	ip, r3, lr
   d7f50:	bf28      	it	cs
   d7f52:	f04c 0c02 	orrcs.w	ip, ip, #2
   d7f56:	fa43 f305 	asr.w	r3, r3, r5
   d7f5a:	18c0      	adds	r0, r0, r3
   d7f5c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d7f60:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7f64:	d507      	bpl.n	d7f76 <__adddf3+0xe6>
   d7f66:	f04f 0e00 	mov.w	lr, #0
   d7f6a:	f1dc 0c00 	rsbs	ip, ip, #0
   d7f6e:	eb7e 0000 	sbcs.w	r0, lr, r0
   d7f72:	eb6e 0101 	sbc.w	r1, lr, r1
   d7f76:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d7f7a:	d31b      	bcc.n	d7fb4 <__adddf3+0x124>
   d7f7c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d7f80:	d30c      	bcc.n	d7f9c <__adddf3+0x10c>
   d7f82:	0849      	lsrs	r1, r1, #1
   d7f84:	ea5f 0030 	movs.w	r0, r0, rrx
   d7f88:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d7f8c:	f104 0401 	add.w	r4, r4, #1
   d7f90:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d7f94:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d7f98:	f080 809a 	bcs.w	d80d0 <__adddf3+0x240>
   d7f9c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d7fa0:	bf08      	it	eq
   d7fa2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d7fa6:	f150 0000 	adcs.w	r0, r0, #0
   d7faa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d7fae:	ea41 0105 	orr.w	r1, r1, r5
   d7fb2:	bd30      	pop	{r4, r5, pc}
   d7fb4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d7fb8:	4140      	adcs	r0, r0
   d7fba:	eb41 0101 	adc.w	r1, r1, r1
   d7fbe:	3c01      	subs	r4, #1
   d7fc0:	bf28      	it	cs
   d7fc2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d7fc6:	d2e9      	bcs.n	d7f9c <__adddf3+0x10c>
   d7fc8:	f091 0f00 	teq	r1, #0
   d7fcc:	bf04      	itt	eq
   d7fce:	4601      	moveq	r1, r0
   d7fd0:	2000      	moveq	r0, #0
   d7fd2:	fab1 f381 	clz	r3, r1
   d7fd6:	bf08      	it	eq
   d7fd8:	3320      	addeq	r3, #32
   d7fda:	f1a3 030b 	sub.w	r3, r3, #11
   d7fde:	f1b3 0220 	subs.w	r2, r3, #32
   d7fe2:	da0c      	bge.n	d7ffe <__adddf3+0x16e>
   d7fe4:	320c      	adds	r2, #12
   d7fe6:	dd08      	ble.n	d7ffa <__adddf3+0x16a>
   d7fe8:	f102 0c14 	add.w	ip, r2, #20
   d7fec:	f1c2 020c 	rsb	r2, r2, #12
   d7ff0:	fa01 f00c 	lsl.w	r0, r1, ip
   d7ff4:	fa21 f102 	lsr.w	r1, r1, r2
   d7ff8:	e00c      	b.n	d8014 <__adddf3+0x184>
   d7ffa:	f102 0214 	add.w	r2, r2, #20
   d7ffe:	bfd8      	it	le
   d8000:	f1c2 0c20 	rsble	ip, r2, #32
   d8004:	fa01 f102 	lsl.w	r1, r1, r2
   d8008:	fa20 fc0c 	lsr.w	ip, r0, ip
   d800c:	bfdc      	itt	le
   d800e:	ea41 010c 	orrle.w	r1, r1, ip
   d8012:	4090      	lslle	r0, r2
   d8014:	1ae4      	subs	r4, r4, r3
   d8016:	bfa2      	ittt	ge
   d8018:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d801c:	4329      	orrge	r1, r5
   d801e:	bd30      	popge	{r4, r5, pc}
   d8020:	ea6f 0404 	mvn.w	r4, r4
   d8024:	3c1f      	subs	r4, #31
   d8026:	da1c      	bge.n	d8062 <__adddf3+0x1d2>
   d8028:	340c      	adds	r4, #12
   d802a:	dc0e      	bgt.n	d804a <__adddf3+0x1ba>
   d802c:	f104 0414 	add.w	r4, r4, #20
   d8030:	f1c4 0220 	rsb	r2, r4, #32
   d8034:	fa20 f004 	lsr.w	r0, r0, r4
   d8038:	fa01 f302 	lsl.w	r3, r1, r2
   d803c:	ea40 0003 	orr.w	r0, r0, r3
   d8040:	fa21 f304 	lsr.w	r3, r1, r4
   d8044:	ea45 0103 	orr.w	r1, r5, r3
   d8048:	bd30      	pop	{r4, r5, pc}
   d804a:	f1c4 040c 	rsb	r4, r4, #12
   d804e:	f1c4 0220 	rsb	r2, r4, #32
   d8052:	fa20 f002 	lsr.w	r0, r0, r2
   d8056:	fa01 f304 	lsl.w	r3, r1, r4
   d805a:	ea40 0003 	orr.w	r0, r0, r3
   d805e:	4629      	mov	r1, r5
   d8060:	bd30      	pop	{r4, r5, pc}
   d8062:	fa21 f004 	lsr.w	r0, r1, r4
   d8066:	4629      	mov	r1, r5
   d8068:	bd30      	pop	{r4, r5, pc}
   d806a:	f094 0f00 	teq	r4, #0
   d806e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d8072:	bf06      	itte	eq
   d8074:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d8078:	3401      	addeq	r4, #1
   d807a:	3d01      	subne	r5, #1
   d807c:	e74e      	b.n	d7f1c <__adddf3+0x8c>
   d807e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d8082:	bf18      	it	ne
   d8084:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d8088:	d029      	beq.n	d80de <__adddf3+0x24e>
   d808a:	ea94 0f05 	teq	r4, r5
   d808e:	bf08      	it	eq
   d8090:	ea90 0f02 	teqeq	r0, r2
   d8094:	d005      	beq.n	d80a2 <__adddf3+0x212>
   d8096:	ea54 0c00 	orrs.w	ip, r4, r0
   d809a:	bf04      	itt	eq
   d809c:	4619      	moveq	r1, r3
   d809e:	4610      	moveq	r0, r2
   d80a0:	bd30      	pop	{r4, r5, pc}
   d80a2:	ea91 0f03 	teq	r1, r3
   d80a6:	bf1e      	ittt	ne
   d80a8:	2100      	movne	r1, #0
   d80aa:	2000      	movne	r0, #0
   d80ac:	bd30      	popne	{r4, r5, pc}
   d80ae:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d80b2:	d105      	bne.n	d80c0 <__adddf3+0x230>
   d80b4:	0040      	lsls	r0, r0, #1
   d80b6:	4149      	adcs	r1, r1
   d80b8:	bf28      	it	cs
   d80ba:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d80be:	bd30      	pop	{r4, r5, pc}
   d80c0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d80c4:	bf3c      	itt	cc
   d80c6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d80ca:	bd30      	popcc	{r4, r5, pc}
   d80cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d80d0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d80d4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d80d8:	f04f 0000 	mov.w	r0, #0
   d80dc:	bd30      	pop	{r4, r5, pc}
   d80de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d80e2:	bf1a      	itte	ne
   d80e4:	4619      	movne	r1, r3
   d80e6:	4610      	movne	r0, r2
   d80e8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d80ec:	bf1c      	itt	ne
   d80ee:	460b      	movne	r3, r1
   d80f0:	4602      	movne	r2, r0
   d80f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d80f6:	bf06      	itte	eq
   d80f8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d80fc:	ea91 0f03 	teqeq	r1, r3
   d8100:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d8104:	bd30      	pop	{r4, r5, pc}
   d8106:	bf00      	nop

000d8108 <__aeabi_ui2d>:
   d8108:	f090 0f00 	teq	r0, #0
   d810c:	bf04      	itt	eq
   d810e:	2100      	moveq	r1, #0
   d8110:	4770      	bxeq	lr
   d8112:	b530      	push	{r4, r5, lr}
   d8114:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8118:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d811c:	f04f 0500 	mov.w	r5, #0
   d8120:	f04f 0100 	mov.w	r1, #0
   d8124:	e750      	b.n	d7fc8 <__adddf3+0x138>
   d8126:	bf00      	nop

000d8128 <__aeabi_i2d>:
   d8128:	f090 0f00 	teq	r0, #0
   d812c:	bf04      	itt	eq
   d812e:	2100      	moveq	r1, #0
   d8130:	4770      	bxeq	lr
   d8132:	b530      	push	{r4, r5, lr}
   d8134:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8138:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d813c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d8140:	bf48      	it	mi
   d8142:	4240      	negmi	r0, r0
   d8144:	f04f 0100 	mov.w	r1, #0
   d8148:	e73e      	b.n	d7fc8 <__adddf3+0x138>
   d814a:	bf00      	nop

000d814c <__aeabi_f2d>:
   d814c:	0042      	lsls	r2, r0, #1
   d814e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d8152:	ea4f 0131 	mov.w	r1, r1, rrx
   d8156:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d815a:	bf1f      	itttt	ne
   d815c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d8160:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d8164:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d8168:	4770      	bxne	lr
   d816a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d816e:	bf08      	it	eq
   d8170:	4770      	bxeq	lr
   d8172:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d8176:	bf04      	itt	eq
   d8178:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d817c:	4770      	bxeq	lr
   d817e:	b530      	push	{r4, r5, lr}
   d8180:	f44f 7460 	mov.w	r4, #896	; 0x380
   d8184:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8188:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d818c:	e71c      	b.n	d7fc8 <__adddf3+0x138>
   d818e:	bf00      	nop

000d8190 <__aeabi_ul2d>:
   d8190:	ea50 0201 	orrs.w	r2, r0, r1
   d8194:	bf08      	it	eq
   d8196:	4770      	bxeq	lr
   d8198:	b530      	push	{r4, r5, lr}
   d819a:	f04f 0500 	mov.w	r5, #0
   d819e:	e00a      	b.n	d81b6 <__aeabi_l2d+0x16>

000d81a0 <__aeabi_l2d>:
   d81a0:	ea50 0201 	orrs.w	r2, r0, r1
   d81a4:	bf08      	it	eq
   d81a6:	4770      	bxeq	lr
   d81a8:	b530      	push	{r4, r5, lr}
   d81aa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d81ae:	d502      	bpl.n	d81b6 <__aeabi_l2d+0x16>
   d81b0:	4240      	negs	r0, r0
   d81b2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d81b6:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d81ba:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d81be:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d81c2:	f43f aed8 	beq.w	d7f76 <__adddf3+0xe6>
   d81c6:	f04f 0203 	mov.w	r2, #3
   d81ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d81ce:	bf18      	it	ne
   d81d0:	3203      	addne	r2, #3
   d81d2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d81d6:	bf18      	it	ne
   d81d8:	3203      	addne	r2, #3
   d81da:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d81de:	f1c2 0320 	rsb	r3, r2, #32
   d81e2:	fa00 fc03 	lsl.w	ip, r0, r3
   d81e6:	fa20 f002 	lsr.w	r0, r0, r2
   d81ea:	fa01 fe03 	lsl.w	lr, r1, r3
   d81ee:	ea40 000e 	orr.w	r0, r0, lr
   d81f2:	fa21 f102 	lsr.w	r1, r1, r2
   d81f6:	4414      	add	r4, r2
   d81f8:	e6bd      	b.n	d7f76 <__adddf3+0xe6>
   d81fa:	bf00      	nop

000d81fc <__aeabi_dmul>:
   d81fc:	b570      	push	{r4, r5, r6, lr}
   d81fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d8202:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d8206:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d820a:	bf1d      	ittte	ne
   d820c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d8210:	ea94 0f0c 	teqne	r4, ip
   d8214:	ea95 0f0c 	teqne	r5, ip
   d8218:	f000 f8de 	bleq	d83d8 <__aeabi_dmul+0x1dc>
   d821c:	442c      	add	r4, r5
   d821e:	ea81 0603 	eor.w	r6, r1, r3
   d8222:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d8226:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d822a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d822e:	bf18      	it	ne
   d8230:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d8234:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8238:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d823c:	d038      	beq.n	d82b0 <__aeabi_dmul+0xb4>
   d823e:	fba0 ce02 	umull	ip, lr, r0, r2
   d8242:	f04f 0500 	mov.w	r5, #0
   d8246:	fbe1 e502 	umlal	lr, r5, r1, r2
   d824a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d824e:	fbe0 e503 	umlal	lr, r5, r0, r3
   d8252:	f04f 0600 	mov.w	r6, #0
   d8256:	fbe1 5603 	umlal	r5, r6, r1, r3
   d825a:	f09c 0f00 	teq	ip, #0
   d825e:	bf18      	it	ne
   d8260:	f04e 0e01 	orrne.w	lr, lr, #1
   d8264:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d8268:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d826c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d8270:	d204      	bcs.n	d827c <__aeabi_dmul+0x80>
   d8272:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d8276:	416d      	adcs	r5, r5
   d8278:	eb46 0606 	adc.w	r6, r6, r6
   d827c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d8280:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d8284:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d8288:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d828c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d8290:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d8294:	bf88      	it	hi
   d8296:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d829a:	d81e      	bhi.n	d82da <__aeabi_dmul+0xde>
   d829c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d82a0:	bf08      	it	eq
   d82a2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d82a6:	f150 0000 	adcs.w	r0, r0, #0
   d82aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d82ae:	bd70      	pop	{r4, r5, r6, pc}
   d82b0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d82b4:	ea46 0101 	orr.w	r1, r6, r1
   d82b8:	ea40 0002 	orr.w	r0, r0, r2
   d82bc:	ea81 0103 	eor.w	r1, r1, r3
   d82c0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d82c4:	bfc2      	ittt	gt
   d82c6:	ebd4 050c 	rsbsgt	r5, r4, ip
   d82ca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d82ce:	bd70      	popgt	{r4, r5, r6, pc}
   d82d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d82d4:	f04f 0e00 	mov.w	lr, #0
   d82d8:	3c01      	subs	r4, #1
   d82da:	f300 80ab 	bgt.w	d8434 <__aeabi_dmul+0x238>
   d82de:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d82e2:	bfde      	ittt	le
   d82e4:	2000      	movle	r0, #0
   d82e6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d82ea:	bd70      	pople	{r4, r5, r6, pc}
   d82ec:	f1c4 0400 	rsb	r4, r4, #0
   d82f0:	3c20      	subs	r4, #32
   d82f2:	da35      	bge.n	d8360 <__aeabi_dmul+0x164>
   d82f4:	340c      	adds	r4, #12
   d82f6:	dc1b      	bgt.n	d8330 <__aeabi_dmul+0x134>
   d82f8:	f104 0414 	add.w	r4, r4, #20
   d82fc:	f1c4 0520 	rsb	r5, r4, #32
   d8300:	fa00 f305 	lsl.w	r3, r0, r5
   d8304:	fa20 f004 	lsr.w	r0, r0, r4
   d8308:	fa01 f205 	lsl.w	r2, r1, r5
   d830c:	ea40 0002 	orr.w	r0, r0, r2
   d8310:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d8314:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d8318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d831c:	fa21 f604 	lsr.w	r6, r1, r4
   d8320:	eb42 0106 	adc.w	r1, r2, r6
   d8324:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8328:	bf08      	it	eq
   d832a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d832e:	bd70      	pop	{r4, r5, r6, pc}
   d8330:	f1c4 040c 	rsb	r4, r4, #12
   d8334:	f1c4 0520 	rsb	r5, r4, #32
   d8338:	fa00 f304 	lsl.w	r3, r0, r4
   d833c:	fa20 f005 	lsr.w	r0, r0, r5
   d8340:	fa01 f204 	lsl.w	r2, r1, r4
   d8344:	ea40 0002 	orr.w	r0, r0, r2
   d8348:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d834c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d8350:	f141 0100 	adc.w	r1, r1, #0
   d8354:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8358:	bf08      	it	eq
   d835a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d835e:	bd70      	pop	{r4, r5, r6, pc}
   d8360:	f1c4 0520 	rsb	r5, r4, #32
   d8364:	fa00 f205 	lsl.w	r2, r0, r5
   d8368:	ea4e 0e02 	orr.w	lr, lr, r2
   d836c:	fa20 f304 	lsr.w	r3, r0, r4
   d8370:	fa01 f205 	lsl.w	r2, r1, r5
   d8374:	ea43 0302 	orr.w	r3, r3, r2
   d8378:	fa21 f004 	lsr.w	r0, r1, r4
   d837c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8380:	fa21 f204 	lsr.w	r2, r1, r4
   d8384:	ea20 0002 	bic.w	r0, r0, r2
   d8388:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d838c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8390:	bf08      	it	eq
   d8392:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8396:	bd70      	pop	{r4, r5, r6, pc}
   d8398:	f094 0f00 	teq	r4, #0
   d839c:	d10f      	bne.n	d83be <__aeabi_dmul+0x1c2>
   d839e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d83a2:	0040      	lsls	r0, r0, #1
   d83a4:	eb41 0101 	adc.w	r1, r1, r1
   d83a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d83ac:	bf08      	it	eq
   d83ae:	3c01      	subeq	r4, #1
   d83b0:	d0f7      	beq.n	d83a2 <__aeabi_dmul+0x1a6>
   d83b2:	ea41 0106 	orr.w	r1, r1, r6
   d83b6:	f095 0f00 	teq	r5, #0
   d83ba:	bf18      	it	ne
   d83bc:	4770      	bxne	lr
   d83be:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d83c2:	0052      	lsls	r2, r2, #1
   d83c4:	eb43 0303 	adc.w	r3, r3, r3
   d83c8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d83cc:	bf08      	it	eq
   d83ce:	3d01      	subeq	r5, #1
   d83d0:	d0f7      	beq.n	d83c2 <__aeabi_dmul+0x1c6>
   d83d2:	ea43 0306 	orr.w	r3, r3, r6
   d83d6:	4770      	bx	lr
   d83d8:	ea94 0f0c 	teq	r4, ip
   d83dc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d83e0:	bf18      	it	ne
   d83e2:	ea95 0f0c 	teqne	r5, ip
   d83e6:	d00c      	beq.n	d8402 <__aeabi_dmul+0x206>
   d83e8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d83ec:	bf18      	it	ne
   d83ee:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d83f2:	d1d1      	bne.n	d8398 <__aeabi_dmul+0x19c>
   d83f4:	ea81 0103 	eor.w	r1, r1, r3
   d83f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d83fc:	f04f 0000 	mov.w	r0, #0
   d8400:	bd70      	pop	{r4, r5, r6, pc}
   d8402:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8406:	bf06      	itte	eq
   d8408:	4610      	moveq	r0, r2
   d840a:	4619      	moveq	r1, r3
   d840c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8410:	d019      	beq.n	d8446 <__aeabi_dmul+0x24a>
   d8412:	ea94 0f0c 	teq	r4, ip
   d8416:	d102      	bne.n	d841e <__aeabi_dmul+0x222>
   d8418:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d841c:	d113      	bne.n	d8446 <__aeabi_dmul+0x24a>
   d841e:	ea95 0f0c 	teq	r5, ip
   d8422:	d105      	bne.n	d8430 <__aeabi_dmul+0x234>
   d8424:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d8428:	bf1c      	itt	ne
   d842a:	4610      	movne	r0, r2
   d842c:	4619      	movne	r1, r3
   d842e:	d10a      	bne.n	d8446 <__aeabi_dmul+0x24a>
   d8430:	ea81 0103 	eor.w	r1, r1, r3
   d8434:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8438:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d843c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d8440:	f04f 0000 	mov.w	r0, #0
   d8444:	bd70      	pop	{r4, r5, r6, pc}
   d8446:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d844a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d844e:	bd70      	pop	{r4, r5, r6, pc}

000d8450 <__aeabi_ddiv>:
   d8450:	b570      	push	{r4, r5, r6, lr}
   d8452:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d8456:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d845a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d845e:	bf1d      	ittte	ne
   d8460:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d8464:	ea94 0f0c 	teqne	r4, ip
   d8468:	ea95 0f0c 	teqne	r5, ip
   d846c:	f000 f8a7 	bleq	d85be <__aeabi_ddiv+0x16e>
   d8470:	eba4 0405 	sub.w	r4, r4, r5
   d8474:	ea81 0e03 	eor.w	lr, r1, r3
   d8478:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d847c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d8480:	f000 8088 	beq.w	d8594 <__aeabi_ddiv+0x144>
   d8484:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d8488:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d848c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d8490:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d8494:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d8498:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d849c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d84a0:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d84a4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d84a8:	429d      	cmp	r5, r3
   d84aa:	bf08      	it	eq
   d84ac:	4296      	cmpeq	r6, r2
   d84ae:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d84b2:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d84b6:	d202      	bcs.n	d84be <__aeabi_ddiv+0x6e>
   d84b8:	085b      	lsrs	r3, r3, #1
   d84ba:	ea4f 0232 	mov.w	r2, r2, rrx
   d84be:	1ab6      	subs	r6, r6, r2
   d84c0:	eb65 0503 	sbc.w	r5, r5, r3
   d84c4:	085b      	lsrs	r3, r3, #1
   d84c6:	ea4f 0232 	mov.w	r2, r2, rrx
   d84ca:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d84ce:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d84d2:	ebb6 0e02 	subs.w	lr, r6, r2
   d84d6:	eb75 0e03 	sbcs.w	lr, r5, r3
   d84da:	bf22      	ittt	cs
   d84dc:	1ab6      	subcs	r6, r6, r2
   d84de:	4675      	movcs	r5, lr
   d84e0:	ea40 000c 	orrcs.w	r0, r0, ip
   d84e4:	085b      	lsrs	r3, r3, #1
   d84e6:	ea4f 0232 	mov.w	r2, r2, rrx
   d84ea:	ebb6 0e02 	subs.w	lr, r6, r2
   d84ee:	eb75 0e03 	sbcs.w	lr, r5, r3
   d84f2:	bf22      	ittt	cs
   d84f4:	1ab6      	subcs	r6, r6, r2
   d84f6:	4675      	movcs	r5, lr
   d84f8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d84fc:	085b      	lsrs	r3, r3, #1
   d84fe:	ea4f 0232 	mov.w	r2, r2, rrx
   d8502:	ebb6 0e02 	subs.w	lr, r6, r2
   d8506:	eb75 0e03 	sbcs.w	lr, r5, r3
   d850a:	bf22      	ittt	cs
   d850c:	1ab6      	subcs	r6, r6, r2
   d850e:	4675      	movcs	r5, lr
   d8510:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d8514:	085b      	lsrs	r3, r3, #1
   d8516:	ea4f 0232 	mov.w	r2, r2, rrx
   d851a:	ebb6 0e02 	subs.w	lr, r6, r2
   d851e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8522:	bf22      	ittt	cs
   d8524:	1ab6      	subcs	r6, r6, r2
   d8526:	4675      	movcs	r5, lr
   d8528:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d852c:	ea55 0e06 	orrs.w	lr, r5, r6
   d8530:	d018      	beq.n	d8564 <__aeabi_ddiv+0x114>
   d8532:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d8536:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d853a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d853e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d8542:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d8546:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d854a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d854e:	d1c0      	bne.n	d84d2 <__aeabi_ddiv+0x82>
   d8550:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8554:	d10b      	bne.n	d856e <__aeabi_ddiv+0x11e>
   d8556:	ea41 0100 	orr.w	r1, r1, r0
   d855a:	f04f 0000 	mov.w	r0, #0
   d855e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d8562:	e7b6      	b.n	d84d2 <__aeabi_ddiv+0x82>
   d8564:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8568:	bf04      	itt	eq
   d856a:	4301      	orreq	r1, r0
   d856c:	2000      	moveq	r0, #0
   d856e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d8572:	bf88      	it	hi
   d8574:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d8578:	f63f aeaf 	bhi.w	d82da <__aeabi_dmul+0xde>
   d857c:	ebb5 0c03 	subs.w	ip, r5, r3
   d8580:	bf04      	itt	eq
   d8582:	ebb6 0c02 	subseq.w	ip, r6, r2
   d8586:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d858a:	f150 0000 	adcs.w	r0, r0, #0
   d858e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8592:	bd70      	pop	{r4, r5, r6, pc}
   d8594:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d8598:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d859c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d85a0:	bfc2      	ittt	gt
   d85a2:	ebd4 050c 	rsbsgt	r5, r4, ip
   d85a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d85aa:	bd70      	popgt	{r4, r5, r6, pc}
   d85ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d85b0:	f04f 0e00 	mov.w	lr, #0
   d85b4:	3c01      	subs	r4, #1
   d85b6:	e690      	b.n	d82da <__aeabi_dmul+0xde>
   d85b8:	ea45 0e06 	orr.w	lr, r5, r6
   d85bc:	e68d      	b.n	d82da <__aeabi_dmul+0xde>
   d85be:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d85c2:	ea94 0f0c 	teq	r4, ip
   d85c6:	bf08      	it	eq
   d85c8:	ea95 0f0c 	teqeq	r5, ip
   d85cc:	f43f af3b 	beq.w	d8446 <__aeabi_dmul+0x24a>
   d85d0:	ea94 0f0c 	teq	r4, ip
   d85d4:	d10a      	bne.n	d85ec <__aeabi_ddiv+0x19c>
   d85d6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d85da:	f47f af34 	bne.w	d8446 <__aeabi_dmul+0x24a>
   d85de:	ea95 0f0c 	teq	r5, ip
   d85e2:	f47f af25 	bne.w	d8430 <__aeabi_dmul+0x234>
   d85e6:	4610      	mov	r0, r2
   d85e8:	4619      	mov	r1, r3
   d85ea:	e72c      	b.n	d8446 <__aeabi_dmul+0x24a>
   d85ec:	ea95 0f0c 	teq	r5, ip
   d85f0:	d106      	bne.n	d8600 <__aeabi_ddiv+0x1b0>
   d85f2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d85f6:	f43f aefd 	beq.w	d83f4 <__aeabi_dmul+0x1f8>
   d85fa:	4610      	mov	r0, r2
   d85fc:	4619      	mov	r1, r3
   d85fe:	e722      	b.n	d8446 <__aeabi_dmul+0x24a>
   d8600:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8604:	bf18      	it	ne
   d8606:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d860a:	f47f aec5 	bne.w	d8398 <__aeabi_dmul+0x19c>
   d860e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d8612:	f47f af0d 	bne.w	d8430 <__aeabi_dmul+0x234>
   d8616:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d861a:	f47f aeeb 	bne.w	d83f4 <__aeabi_dmul+0x1f8>
   d861e:	e712      	b.n	d8446 <__aeabi_dmul+0x24a>

000d8620 <__gedf2>:
   d8620:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d8624:	e006      	b.n	d8634 <__cmpdf2+0x4>
   d8626:	bf00      	nop

000d8628 <__ledf2>:
   d8628:	f04f 0c01 	mov.w	ip, #1
   d862c:	e002      	b.n	d8634 <__cmpdf2+0x4>
   d862e:	bf00      	nop

000d8630 <__cmpdf2>:
   d8630:	f04f 0c01 	mov.w	ip, #1
   d8634:	f84d cd04 	str.w	ip, [sp, #-4]!
   d8638:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d863c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8640:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d8644:	bf18      	it	ne
   d8646:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d864a:	d01b      	beq.n	d8684 <__cmpdf2+0x54>
   d864c:	b001      	add	sp, #4
   d864e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d8652:	bf0c      	ite	eq
   d8654:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d8658:	ea91 0f03 	teqne	r1, r3
   d865c:	bf02      	ittt	eq
   d865e:	ea90 0f02 	teqeq	r0, r2
   d8662:	2000      	moveq	r0, #0
   d8664:	4770      	bxeq	lr
   d8666:	f110 0f00 	cmn.w	r0, #0
   d866a:	ea91 0f03 	teq	r1, r3
   d866e:	bf58      	it	pl
   d8670:	4299      	cmppl	r1, r3
   d8672:	bf08      	it	eq
   d8674:	4290      	cmpeq	r0, r2
   d8676:	bf2c      	ite	cs
   d8678:	17d8      	asrcs	r0, r3, #31
   d867a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d867e:	f040 0001 	orr.w	r0, r0, #1
   d8682:	4770      	bx	lr
   d8684:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d8688:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d868c:	d102      	bne.n	d8694 <__cmpdf2+0x64>
   d868e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d8692:	d107      	bne.n	d86a4 <__cmpdf2+0x74>
   d8694:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d8698:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d869c:	d1d6      	bne.n	d864c <__cmpdf2+0x1c>
   d869e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d86a2:	d0d3      	beq.n	d864c <__cmpdf2+0x1c>
   d86a4:	f85d 0b04 	ldr.w	r0, [sp], #4
   d86a8:	4770      	bx	lr
   d86aa:	bf00      	nop

000d86ac <__aeabi_cdrcmple>:
   d86ac:	4684      	mov	ip, r0
   d86ae:	4610      	mov	r0, r2
   d86b0:	4662      	mov	r2, ip
   d86b2:	468c      	mov	ip, r1
   d86b4:	4619      	mov	r1, r3
   d86b6:	4663      	mov	r3, ip
   d86b8:	e000      	b.n	d86bc <__aeabi_cdcmpeq>
   d86ba:	bf00      	nop

000d86bc <__aeabi_cdcmpeq>:
   d86bc:	b501      	push	{r0, lr}
   d86be:	f7ff ffb7 	bl	d8630 <__cmpdf2>
   d86c2:	2800      	cmp	r0, #0
   d86c4:	bf48      	it	mi
   d86c6:	f110 0f00 	cmnmi.w	r0, #0
   d86ca:	bd01      	pop	{r0, pc}

000d86cc <__aeabi_dcmpeq>:
   d86cc:	f84d ed08 	str.w	lr, [sp, #-8]!
   d86d0:	f7ff fff4 	bl	d86bc <__aeabi_cdcmpeq>
   d86d4:	bf0c      	ite	eq
   d86d6:	2001      	moveq	r0, #1
   d86d8:	2000      	movne	r0, #0
   d86da:	f85d fb08 	ldr.w	pc, [sp], #8
   d86de:	bf00      	nop

000d86e0 <__aeabi_dcmplt>:
   d86e0:	f84d ed08 	str.w	lr, [sp, #-8]!
   d86e4:	f7ff ffea 	bl	d86bc <__aeabi_cdcmpeq>
   d86e8:	bf34      	ite	cc
   d86ea:	2001      	movcc	r0, #1
   d86ec:	2000      	movcs	r0, #0
   d86ee:	f85d fb08 	ldr.w	pc, [sp], #8
   d86f2:	bf00      	nop

000d86f4 <__aeabi_dcmple>:
   d86f4:	f84d ed08 	str.w	lr, [sp, #-8]!
   d86f8:	f7ff ffe0 	bl	d86bc <__aeabi_cdcmpeq>
   d86fc:	bf94      	ite	ls
   d86fe:	2001      	movls	r0, #1
   d8700:	2000      	movhi	r0, #0
   d8702:	f85d fb08 	ldr.w	pc, [sp], #8
   d8706:	bf00      	nop

000d8708 <__aeabi_dcmpge>:
   d8708:	f84d ed08 	str.w	lr, [sp, #-8]!
   d870c:	f7ff ffce 	bl	d86ac <__aeabi_cdrcmple>
   d8710:	bf94      	ite	ls
   d8712:	2001      	movls	r0, #1
   d8714:	2000      	movhi	r0, #0
   d8716:	f85d fb08 	ldr.w	pc, [sp], #8
   d871a:	bf00      	nop

000d871c <__aeabi_dcmpgt>:
   d871c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8720:	f7ff ffc4 	bl	d86ac <__aeabi_cdrcmple>
   d8724:	bf34      	ite	cc
   d8726:	2001      	movcc	r0, #1
   d8728:	2000      	movcs	r0, #0
   d872a:	f85d fb08 	ldr.w	pc, [sp], #8
   d872e:	bf00      	nop

000d8730 <__aeabi_dcmpun>:
   d8730:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d8734:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8738:	d102      	bne.n	d8740 <__aeabi_dcmpun+0x10>
   d873a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d873e:	d10a      	bne.n	d8756 <__aeabi_dcmpun+0x26>
   d8740:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d8744:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8748:	d102      	bne.n	d8750 <__aeabi_dcmpun+0x20>
   d874a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d874e:	d102      	bne.n	d8756 <__aeabi_dcmpun+0x26>
   d8750:	f04f 0000 	mov.w	r0, #0
   d8754:	4770      	bx	lr
   d8756:	f04f 0001 	mov.w	r0, #1
   d875a:	4770      	bx	lr

000d875c <__aeabi_d2f>:
   d875c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d8760:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d8764:	bf24      	itt	cs
   d8766:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d876a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d876e:	d90d      	bls.n	d878c <__aeabi_d2f+0x30>
   d8770:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d8774:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d8778:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d877c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d8780:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d8784:	bf08      	it	eq
   d8786:	f020 0001 	biceq.w	r0, r0, #1
   d878a:	4770      	bx	lr
   d878c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d8790:	d121      	bne.n	d87d6 <__aeabi_d2f+0x7a>
   d8792:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d8796:	bfbc      	itt	lt
   d8798:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d879c:	4770      	bxlt	lr
   d879e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d87a2:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d87a6:	f1c2 0218 	rsb	r2, r2, #24
   d87aa:	f1c2 0c20 	rsb	ip, r2, #32
   d87ae:	fa10 f30c 	lsls.w	r3, r0, ip
   d87b2:	fa20 f002 	lsr.w	r0, r0, r2
   d87b6:	bf18      	it	ne
   d87b8:	f040 0001 	orrne.w	r0, r0, #1
   d87bc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d87c0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d87c4:	fa03 fc0c 	lsl.w	ip, r3, ip
   d87c8:	ea40 000c 	orr.w	r0, r0, ip
   d87cc:	fa23 f302 	lsr.w	r3, r3, r2
   d87d0:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d87d4:	e7cc      	b.n	d8770 <__aeabi_d2f+0x14>
   d87d6:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d87da:	d107      	bne.n	d87ec <__aeabi_d2f+0x90>
   d87dc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d87e0:	bf1e      	ittt	ne
   d87e2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d87e6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d87ea:	4770      	bxne	lr
   d87ec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d87f0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d87f4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d87f8:	4770      	bx	lr
   d87fa:	bf00      	nop

000d87fc <__aeabi_frsub>:
   d87fc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   d8800:	e002      	b.n	d8808 <__addsf3>
   d8802:	bf00      	nop

000d8804 <__aeabi_fsub>:
   d8804:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000d8808 <__addsf3>:
   d8808:	0042      	lsls	r2, r0, #1
   d880a:	bf1f      	itttt	ne
   d880c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   d8810:	ea92 0f03 	teqne	r2, r3
   d8814:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   d8818:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   d881c:	d06a      	beq.n	d88f4 <__addsf3+0xec>
   d881e:	ea4f 6212 	mov.w	r2, r2, lsr #24
   d8822:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   d8826:	bfc1      	itttt	gt
   d8828:	18d2      	addgt	r2, r2, r3
   d882a:	4041      	eorgt	r1, r0
   d882c:	4048      	eorgt	r0, r1
   d882e:	4041      	eorgt	r1, r0
   d8830:	bfb8      	it	lt
   d8832:	425b      	neglt	r3, r3
   d8834:	2b19      	cmp	r3, #25
   d8836:	bf88      	it	hi
   d8838:	4770      	bxhi	lr
   d883a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   d883e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d8842:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   d8846:	bf18      	it	ne
   d8848:	4240      	negne	r0, r0
   d884a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d884e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   d8852:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   d8856:	bf18      	it	ne
   d8858:	4249      	negne	r1, r1
   d885a:	ea92 0f03 	teq	r2, r3
   d885e:	d03f      	beq.n	d88e0 <__addsf3+0xd8>
   d8860:	f1a2 0201 	sub.w	r2, r2, #1
   d8864:	fa41 fc03 	asr.w	ip, r1, r3
   d8868:	eb10 000c 	adds.w	r0, r0, ip
   d886c:	f1c3 0320 	rsb	r3, r3, #32
   d8870:	fa01 f103 	lsl.w	r1, r1, r3
   d8874:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   d8878:	d502      	bpl.n	d8880 <__addsf3+0x78>
   d887a:	4249      	negs	r1, r1
   d887c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   d8880:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   d8884:	d313      	bcc.n	d88ae <__addsf3+0xa6>
   d8886:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   d888a:	d306      	bcc.n	d889a <__addsf3+0x92>
   d888c:	0840      	lsrs	r0, r0, #1
   d888e:	ea4f 0131 	mov.w	r1, r1, rrx
   d8892:	f102 0201 	add.w	r2, r2, #1
   d8896:	2afe      	cmp	r2, #254	; 0xfe
   d8898:	d251      	bcs.n	d893e <__addsf3+0x136>
   d889a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   d889e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   d88a2:	bf08      	it	eq
   d88a4:	f020 0001 	biceq.w	r0, r0, #1
   d88a8:	ea40 0003 	orr.w	r0, r0, r3
   d88ac:	4770      	bx	lr
   d88ae:	0049      	lsls	r1, r1, #1
   d88b0:	eb40 0000 	adc.w	r0, r0, r0
   d88b4:	3a01      	subs	r2, #1
   d88b6:	bf28      	it	cs
   d88b8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
   d88bc:	d2ed      	bcs.n	d889a <__addsf3+0x92>
   d88be:	fab0 fc80 	clz	ip, r0
   d88c2:	f1ac 0c08 	sub.w	ip, ip, #8
   d88c6:	ebb2 020c 	subs.w	r2, r2, ip
   d88ca:	fa00 f00c 	lsl.w	r0, r0, ip
   d88ce:	bfaa      	itet	ge
   d88d0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   d88d4:	4252      	neglt	r2, r2
   d88d6:	4318      	orrge	r0, r3
   d88d8:	bfbc      	itt	lt
   d88da:	40d0      	lsrlt	r0, r2
   d88dc:	4318      	orrlt	r0, r3
   d88de:	4770      	bx	lr
   d88e0:	f092 0f00 	teq	r2, #0
   d88e4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   d88e8:	bf06      	itte	eq
   d88ea:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   d88ee:	3201      	addeq	r2, #1
   d88f0:	3b01      	subne	r3, #1
   d88f2:	e7b5      	b.n	d8860 <__addsf3+0x58>
   d88f4:	ea4f 0341 	mov.w	r3, r1, lsl #1
   d88f8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   d88fc:	bf18      	it	ne
   d88fe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   d8902:	d021      	beq.n	d8948 <__addsf3+0x140>
   d8904:	ea92 0f03 	teq	r2, r3
   d8908:	d004      	beq.n	d8914 <__addsf3+0x10c>
   d890a:	f092 0f00 	teq	r2, #0
   d890e:	bf08      	it	eq
   d8910:	4608      	moveq	r0, r1
   d8912:	4770      	bx	lr
   d8914:	ea90 0f01 	teq	r0, r1
   d8918:	bf1c      	itt	ne
   d891a:	2000      	movne	r0, #0
   d891c:	4770      	bxne	lr
   d891e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   d8922:	d104      	bne.n	d892e <__addsf3+0x126>
   d8924:	0040      	lsls	r0, r0, #1
   d8926:	bf28      	it	cs
   d8928:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   d892c:	4770      	bx	lr
   d892e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   d8932:	bf3c      	itt	cc
   d8934:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   d8938:	4770      	bxcc	lr
   d893a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   d893e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   d8942:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d8946:	4770      	bx	lr
   d8948:	ea7f 6222 	mvns.w	r2, r2, asr #24
   d894c:	bf16      	itet	ne
   d894e:	4608      	movne	r0, r1
   d8950:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   d8954:	4601      	movne	r1, r0
   d8956:	0242      	lsls	r2, r0, #9
   d8958:	bf06      	itte	eq
   d895a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   d895e:	ea90 0f01 	teqeq	r0, r1
   d8962:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   d8966:	4770      	bx	lr

000d8968 <__aeabi_ui2f>:
   d8968:	f04f 0300 	mov.w	r3, #0
   d896c:	e004      	b.n	d8978 <__aeabi_i2f+0x8>
   d896e:	bf00      	nop

000d8970 <__aeabi_i2f>:
   d8970:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   d8974:	bf48      	it	mi
   d8976:	4240      	negmi	r0, r0
   d8978:	ea5f 0c00 	movs.w	ip, r0
   d897c:	bf08      	it	eq
   d897e:	4770      	bxeq	lr
   d8980:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   d8984:	4601      	mov	r1, r0
   d8986:	f04f 0000 	mov.w	r0, #0
   d898a:	e01c      	b.n	d89c6 <__aeabi_l2f+0x2a>

000d898c <__aeabi_ul2f>:
   d898c:	ea50 0201 	orrs.w	r2, r0, r1
   d8990:	bf08      	it	eq
   d8992:	4770      	bxeq	lr
   d8994:	f04f 0300 	mov.w	r3, #0
   d8998:	e00a      	b.n	d89b0 <__aeabi_l2f+0x14>
   d899a:	bf00      	nop

000d899c <__aeabi_l2f>:
   d899c:	ea50 0201 	orrs.w	r2, r0, r1
   d89a0:	bf08      	it	eq
   d89a2:	4770      	bxeq	lr
   d89a4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   d89a8:	d502      	bpl.n	d89b0 <__aeabi_l2f+0x14>
   d89aa:	4240      	negs	r0, r0
   d89ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d89b0:	ea5f 0c01 	movs.w	ip, r1
   d89b4:	bf02      	ittt	eq
   d89b6:	4684      	moveq	ip, r0
   d89b8:	4601      	moveq	r1, r0
   d89ba:	2000      	moveq	r0, #0
   d89bc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   d89c0:	bf08      	it	eq
   d89c2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   d89c6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   d89ca:	fabc f28c 	clz	r2, ip
   d89ce:	3a08      	subs	r2, #8
   d89d0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   d89d4:	db10      	blt.n	d89f8 <__aeabi_l2f+0x5c>
   d89d6:	fa01 fc02 	lsl.w	ip, r1, r2
   d89da:	4463      	add	r3, ip
   d89dc:	fa00 fc02 	lsl.w	ip, r0, r2
   d89e0:	f1c2 0220 	rsb	r2, r2, #32
   d89e4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d89e8:	fa20 f202 	lsr.w	r2, r0, r2
   d89ec:	eb43 0002 	adc.w	r0, r3, r2
   d89f0:	bf08      	it	eq
   d89f2:	f020 0001 	biceq.w	r0, r0, #1
   d89f6:	4770      	bx	lr
   d89f8:	f102 0220 	add.w	r2, r2, #32
   d89fc:	fa01 fc02 	lsl.w	ip, r1, r2
   d8a00:	f1c2 0220 	rsb	r2, r2, #32
   d8a04:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   d8a08:	fa21 f202 	lsr.w	r2, r1, r2
   d8a0c:	eb43 0002 	adc.w	r0, r3, r2
   d8a10:	bf08      	it	eq
   d8a12:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   d8a16:	4770      	bx	lr

000d8a18 <__aeabi_ldivmod>:
   d8a18:	b97b      	cbnz	r3, d8a3a <__aeabi_ldivmod+0x22>
   d8a1a:	b972      	cbnz	r2, d8a3a <__aeabi_ldivmod+0x22>
   d8a1c:	2900      	cmp	r1, #0
   d8a1e:	bfbe      	ittt	lt
   d8a20:	2000      	movlt	r0, #0
   d8a22:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   d8a26:	e006      	blt.n	d8a36 <__aeabi_ldivmod+0x1e>
   d8a28:	bf08      	it	eq
   d8a2a:	2800      	cmpeq	r0, #0
   d8a2c:	bf1c      	itt	ne
   d8a2e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   d8a32:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   d8a36:	f000 b9a1 	b.w	d8d7c <__aeabi_idiv0>
   d8a3a:	f1ad 0c08 	sub.w	ip, sp, #8
   d8a3e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   d8a42:	2900      	cmp	r1, #0
   d8a44:	db09      	blt.n	d8a5a <__aeabi_ldivmod+0x42>
   d8a46:	2b00      	cmp	r3, #0
   d8a48:	db1a      	blt.n	d8a80 <__aeabi_ldivmod+0x68>
   d8a4a:	f000 f835 	bl	d8ab8 <__udivmoddi4>
   d8a4e:	f8dd e004 	ldr.w	lr, [sp, #4]
   d8a52:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d8a56:	b004      	add	sp, #16
   d8a58:	4770      	bx	lr
   d8a5a:	4240      	negs	r0, r0
   d8a5c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d8a60:	2b00      	cmp	r3, #0
   d8a62:	db1b      	blt.n	d8a9c <__aeabi_ldivmod+0x84>
   d8a64:	f000 f828 	bl	d8ab8 <__udivmoddi4>
   d8a68:	f8dd e004 	ldr.w	lr, [sp, #4]
   d8a6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d8a70:	b004      	add	sp, #16
   d8a72:	4240      	negs	r0, r0
   d8a74:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d8a78:	4252      	negs	r2, r2
   d8a7a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d8a7e:	4770      	bx	lr
   d8a80:	4252      	negs	r2, r2
   d8a82:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d8a86:	f000 f817 	bl	d8ab8 <__udivmoddi4>
   d8a8a:	f8dd e004 	ldr.w	lr, [sp, #4]
   d8a8e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d8a92:	b004      	add	sp, #16
   d8a94:	4240      	negs	r0, r0
   d8a96:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d8a9a:	4770      	bx	lr
   d8a9c:	4252      	negs	r2, r2
   d8a9e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d8aa2:	f000 f809 	bl	d8ab8 <__udivmoddi4>
   d8aa6:	f8dd e004 	ldr.w	lr, [sp, #4]
   d8aaa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d8aae:	b004      	add	sp, #16
   d8ab0:	4252      	negs	r2, r2
   d8ab2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d8ab6:	4770      	bx	lr

000d8ab8 <__udivmoddi4>:
   d8ab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d8abc:	9d08      	ldr	r5, [sp, #32]
   d8abe:	4604      	mov	r4, r0
   d8ac0:	468c      	mov	ip, r1
   d8ac2:	2b00      	cmp	r3, #0
   d8ac4:	f040 8083 	bne.w	d8bce <__udivmoddi4+0x116>
   d8ac8:	428a      	cmp	r2, r1
   d8aca:	4617      	mov	r7, r2
   d8acc:	d947      	bls.n	d8b5e <__udivmoddi4+0xa6>
   d8ace:	fab2 f282 	clz	r2, r2
   d8ad2:	b142      	cbz	r2, d8ae6 <__udivmoddi4+0x2e>
   d8ad4:	f1c2 0020 	rsb	r0, r2, #32
   d8ad8:	fa24 f000 	lsr.w	r0, r4, r0
   d8adc:	4091      	lsls	r1, r2
   d8ade:	4097      	lsls	r7, r2
   d8ae0:	ea40 0c01 	orr.w	ip, r0, r1
   d8ae4:	4094      	lsls	r4, r2
   d8ae6:	ea4f 4817 	mov.w	r8, r7, lsr #16
   d8aea:	0c23      	lsrs	r3, r4, #16
   d8aec:	fbbc f6f8 	udiv	r6, ip, r8
   d8af0:	fa1f fe87 	uxth.w	lr, r7
   d8af4:	fb08 c116 	mls	r1, r8, r6, ip
   d8af8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   d8afc:	fb06 f10e 	mul.w	r1, r6, lr
   d8b00:	4299      	cmp	r1, r3
   d8b02:	d909      	bls.n	d8b18 <__udivmoddi4+0x60>
   d8b04:	18fb      	adds	r3, r7, r3
   d8b06:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
   d8b0a:	f080 8119 	bcs.w	d8d40 <__udivmoddi4+0x288>
   d8b0e:	4299      	cmp	r1, r3
   d8b10:	f240 8116 	bls.w	d8d40 <__udivmoddi4+0x288>
   d8b14:	3e02      	subs	r6, #2
   d8b16:	443b      	add	r3, r7
   d8b18:	1a5b      	subs	r3, r3, r1
   d8b1a:	b2a4      	uxth	r4, r4
   d8b1c:	fbb3 f0f8 	udiv	r0, r3, r8
   d8b20:	fb08 3310 	mls	r3, r8, r0, r3
   d8b24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   d8b28:	fb00 fe0e 	mul.w	lr, r0, lr
   d8b2c:	45a6      	cmp	lr, r4
   d8b2e:	d909      	bls.n	d8b44 <__udivmoddi4+0x8c>
   d8b30:	193c      	adds	r4, r7, r4
   d8b32:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   d8b36:	f080 8105 	bcs.w	d8d44 <__udivmoddi4+0x28c>
   d8b3a:	45a6      	cmp	lr, r4
   d8b3c:	f240 8102 	bls.w	d8d44 <__udivmoddi4+0x28c>
   d8b40:	3802      	subs	r0, #2
   d8b42:	443c      	add	r4, r7
   d8b44:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   d8b48:	eba4 040e 	sub.w	r4, r4, lr
   d8b4c:	2600      	movs	r6, #0
   d8b4e:	b11d      	cbz	r5, d8b58 <__udivmoddi4+0xa0>
   d8b50:	40d4      	lsrs	r4, r2
   d8b52:	2300      	movs	r3, #0
   d8b54:	e9c5 4300 	strd	r4, r3, [r5]
   d8b58:	4631      	mov	r1, r6
   d8b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8b5e:	b902      	cbnz	r2, d8b62 <__udivmoddi4+0xaa>
   d8b60:	deff      	udf	#255	; 0xff
   d8b62:	fab2 f282 	clz	r2, r2
   d8b66:	2a00      	cmp	r2, #0
   d8b68:	d150      	bne.n	d8c0c <__udivmoddi4+0x154>
   d8b6a:	1bcb      	subs	r3, r1, r7
   d8b6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   d8b70:	fa1f f887 	uxth.w	r8, r7
   d8b74:	2601      	movs	r6, #1
   d8b76:	fbb3 fcfe 	udiv	ip, r3, lr
   d8b7a:	0c21      	lsrs	r1, r4, #16
   d8b7c:	fb0e 331c 	mls	r3, lr, ip, r3
   d8b80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   d8b84:	fb08 f30c 	mul.w	r3, r8, ip
   d8b88:	428b      	cmp	r3, r1
   d8b8a:	d907      	bls.n	d8b9c <__udivmoddi4+0xe4>
   d8b8c:	1879      	adds	r1, r7, r1
   d8b8e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
   d8b92:	d202      	bcs.n	d8b9a <__udivmoddi4+0xe2>
   d8b94:	428b      	cmp	r3, r1
   d8b96:	f200 80e9 	bhi.w	d8d6c <__udivmoddi4+0x2b4>
   d8b9a:	4684      	mov	ip, r0
   d8b9c:	1ac9      	subs	r1, r1, r3
   d8b9e:	b2a3      	uxth	r3, r4
   d8ba0:	fbb1 f0fe 	udiv	r0, r1, lr
   d8ba4:	fb0e 1110 	mls	r1, lr, r0, r1
   d8ba8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
   d8bac:	fb08 f800 	mul.w	r8, r8, r0
   d8bb0:	45a0      	cmp	r8, r4
   d8bb2:	d907      	bls.n	d8bc4 <__udivmoddi4+0x10c>
   d8bb4:	193c      	adds	r4, r7, r4
   d8bb6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   d8bba:	d202      	bcs.n	d8bc2 <__udivmoddi4+0x10a>
   d8bbc:	45a0      	cmp	r8, r4
   d8bbe:	f200 80d9 	bhi.w	d8d74 <__udivmoddi4+0x2bc>
   d8bc2:	4618      	mov	r0, r3
   d8bc4:	eba4 0408 	sub.w	r4, r4, r8
   d8bc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   d8bcc:	e7bf      	b.n	d8b4e <__udivmoddi4+0x96>
   d8bce:	428b      	cmp	r3, r1
   d8bd0:	d909      	bls.n	d8be6 <__udivmoddi4+0x12e>
   d8bd2:	2d00      	cmp	r5, #0
   d8bd4:	f000 80b1 	beq.w	d8d3a <__udivmoddi4+0x282>
   d8bd8:	2600      	movs	r6, #0
   d8bda:	e9c5 0100 	strd	r0, r1, [r5]
   d8bde:	4630      	mov	r0, r6
   d8be0:	4631      	mov	r1, r6
   d8be2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8be6:	fab3 f683 	clz	r6, r3
   d8bea:	2e00      	cmp	r6, #0
   d8bec:	d14a      	bne.n	d8c84 <__udivmoddi4+0x1cc>
   d8bee:	428b      	cmp	r3, r1
   d8bf0:	d302      	bcc.n	d8bf8 <__udivmoddi4+0x140>
   d8bf2:	4282      	cmp	r2, r0
   d8bf4:	f200 80b8 	bhi.w	d8d68 <__udivmoddi4+0x2b0>
   d8bf8:	1a84      	subs	r4, r0, r2
   d8bfa:	eb61 0103 	sbc.w	r1, r1, r3
   d8bfe:	2001      	movs	r0, #1
   d8c00:	468c      	mov	ip, r1
   d8c02:	2d00      	cmp	r5, #0
   d8c04:	d0a8      	beq.n	d8b58 <__udivmoddi4+0xa0>
   d8c06:	e9c5 4c00 	strd	r4, ip, [r5]
   d8c0a:	e7a5      	b.n	d8b58 <__udivmoddi4+0xa0>
   d8c0c:	f1c2 0320 	rsb	r3, r2, #32
   d8c10:	fa20 f603 	lsr.w	r6, r0, r3
   d8c14:	4097      	lsls	r7, r2
   d8c16:	fa01 f002 	lsl.w	r0, r1, r2
   d8c1a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   d8c1e:	40d9      	lsrs	r1, r3
   d8c20:	4330      	orrs	r0, r6
   d8c22:	0c03      	lsrs	r3, r0, #16
   d8c24:	fbb1 f6fe 	udiv	r6, r1, lr
   d8c28:	fa1f f887 	uxth.w	r8, r7
   d8c2c:	fb0e 1116 	mls	r1, lr, r6, r1
   d8c30:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   d8c34:	fb06 f108 	mul.w	r1, r6, r8
   d8c38:	4299      	cmp	r1, r3
   d8c3a:	fa04 f402 	lsl.w	r4, r4, r2
   d8c3e:	d909      	bls.n	d8c54 <__udivmoddi4+0x19c>
   d8c40:	18fb      	adds	r3, r7, r3
   d8c42:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
   d8c46:	f080 808d 	bcs.w	d8d64 <__udivmoddi4+0x2ac>
   d8c4a:	4299      	cmp	r1, r3
   d8c4c:	f240 808a 	bls.w	d8d64 <__udivmoddi4+0x2ac>
   d8c50:	3e02      	subs	r6, #2
   d8c52:	443b      	add	r3, r7
   d8c54:	1a5b      	subs	r3, r3, r1
   d8c56:	b281      	uxth	r1, r0
   d8c58:	fbb3 f0fe 	udiv	r0, r3, lr
   d8c5c:	fb0e 3310 	mls	r3, lr, r0, r3
   d8c60:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   d8c64:	fb00 f308 	mul.w	r3, r0, r8
   d8c68:	428b      	cmp	r3, r1
   d8c6a:	d907      	bls.n	d8c7c <__udivmoddi4+0x1c4>
   d8c6c:	1879      	adds	r1, r7, r1
   d8c6e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
   d8c72:	d273      	bcs.n	d8d5c <__udivmoddi4+0x2a4>
   d8c74:	428b      	cmp	r3, r1
   d8c76:	d971      	bls.n	d8d5c <__udivmoddi4+0x2a4>
   d8c78:	3802      	subs	r0, #2
   d8c7a:	4439      	add	r1, r7
   d8c7c:	1acb      	subs	r3, r1, r3
   d8c7e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
   d8c82:	e778      	b.n	d8b76 <__udivmoddi4+0xbe>
   d8c84:	f1c6 0c20 	rsb	ip, r6, #32
   d8c88:	fa03 f406 	lsl.w	r4, r3, r6
   d8c8c:	fa22 f30c 	lsr.w	r3, r2, ip
   d8c90:	431c      	orrs	r4, r3
   d8c92:	fa20 f70c 	lsr.w	r7, r0, ip
   d8c96:	fa01 f306 	lsl.w	r3, r1, r6
   d8c9a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
   d8c9e:	fa21 f10c 	lsr.w	r1, r1, ip
   d8ca2:	431f      	orrs	r7, r3
   d8ca4:	0c3b      	lsrs	r3, r7, #16
   d8ca6:	fbb1 f9fe 	udiv	r9, r1, lr
   d8caa:	fa1f f884 	uxth.w	r8, r4
   d8cae:	fb0e 1119 	mls	r1, lr, r9, r1
   d8cb2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   d8cb6:	fb09 fa08 	mul.w	sl, r9, r8
   d8cba:	458a      	cmp	sl, r1
   d8cbc:	fa02 f206 	lsl.w	r2, r2, r6
   d8cc0:	fa00 f306 	lsl.w	r3, r0, r6
   d8cc4:	d908      	bls.n	d8cd8 <__udivmoddi4+0x220>
   d8cc6:	1861      	adds	r1, r4, r1
   d8cc8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
   d8ccc:	d248      	bcs.n	d8d60 <__udivmoddi4+0x2a8>
   d8cce:	458a      	cmp	sl, r1
   d8cd0:	d946      	bls.n	d8d60 <__udivmoddi4+0x2a8>
   d8cd2:	f1a9 0902 	sub.w	r9, r9, #2
   d8cd6:	4421      	add	r1, r4
   d8cd8:	eba1 010a 	sub.w	r1, r1, sl
   d8cdc:	b2bf      	uxth	r7, r7
   d8cde:	fbb1 f0fe 	udiv	r0, r1, lr
   d8ce2:	fb0e 1110 	mls	r1, lr, r0, r1
   d8ce6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
   d8cea:	fb00 f808 	mul.w	r8, r0, r8
   d8cee:	45b8      	cmp	r8, r7
   d8cf0:	d907      	bls.n	d8d02 <__udivmoddi4+0x24a>
   d8cf2:	19e7      	adds	r7, r4, r7
   d8cf4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
   d8cf8:	d22e      	bcs.n	d8d58 <__udivmoddi4+0x2a0>
   d8cfa:	45b8      	cmp	r8, r7
   d8cfc:	d92c      	bls.n	d8d58 <__udivmoddi4+0x2a0>
   d8cfe:	3802      	subs	r0, #2
   d8d00:	4427      	add	r7, r4
   d8d02:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   d8d06:	eba7 0708 	sub.w	r7, r7, r8
   d8d0a:	fba0 8902 	umull	r8, r9, r0, r2
   d8d0e:	454f      	cmp	r7, r9
   d8d10:	46c6      	mov	lr, r8
   d8d12:	4649      	mov	r1, r9
   d8d14:	d31a      	bcc.n	d8d4c <__udivmoddi4+0x294>
   d8d16:	d017      	beq.n	d8d48 <__udivmoddi4+0x290>
   d8d18:	b15d      	cbz	r5, d8d32 <__udivmoddi4+0x27a>
   d8d1a:	ebb3 020e 	subs.w	r2, r3, lr
   d8d1e:	eb67 0701 	sbc.w	r7, r7, r1
   d8d22:	fa07 fc0c 	lsl.w	ip, r7, ip
   d8d26:	40f2      	lsrs	r2, r6
   d8d28:	ea4c 0202 	orr.w	r2, ip, r2
   d8d2c:	40f7      	lsrs	r7, r6
   d8d2e:	e9c5 2700 	strd	r2, r7, [r5]
   d8d32:	2600      	movs	r6, #0
   d8d34:	4631      	mov	r1, r6
   d8d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8d3a:	462e      	mov	r6, r5
   d8d3c:	4628      	mov	r0, r5
   d8d3e:	e70b      	b.n	d8b58 <__udivmoddi4+0xa0>
   d8d40:	4606      	mov	r6, r0
   d8d42:	e6e9      	b.n	d8b18 <__udivmoddi4+0x60>
   d8d44:	4618      	mov	r0, r3
   d8d46:	e6fd      	b.n	d8b44 <__udivmoddi4+0x8c>
   d8d48:	4543      	cmp	r3, r8
   d8d4a:	d2e5      	bcs.n	d8d18 <__udivmoddi4+0x260>
   d8d4c:	ebb8 0e02 	subs.w	lr, r8, r2
   d8d50:	eb69 0104 	sbc.w	r1, r9, r4
   d8d54:	3801      	subs	r0, #1
   d8d56:	e7df      	b.n	d8d18 <__udivmoddi4+0x260>
   d8d58:	4608      	mov	r0, r1
   d8d5a:	e7d2      	b.n	d8d02 <__udivmoddi4+0x24a>
   d8d5c:	4660      	mov	r0, ip
   d8d5e:	e78d      	b.n	d8c7c <__udivmoddi4+0x1c4>
   d8d60:	4681      	mov	r9, r0
   d8d62:	e7b9      	b.n	d8cd8 <__udivmoddi4+0x220>
   d8d64:	4666      	mov	r6, ip
   d8d66:	e775      	b.n	d8c54 <__udivmoddi4+0x19c>
   d8d68:	4630      	mov	r0, r6
   d8d6a:	e74a      	b.n	d8c02 <__udivmoddi4+0x14a>
   d8d6c:	f1ac 0c02 	sub.w	ip, ip, #2
   d8d70:	4439      	add	r1, r7
   d8d72:	e713      	b.n	d8b9c <__udivmoddi4+0xe4>
   d8d74:	3802      	subs	r0, #2
   d8d76:	443c      	add	r4, r7
   d8d78:	e724      	b.n	d8bc4 <__udivmoddi4+0x10c>
   d8d7a:	bf00      	nop

000d8d7c <__aeabi_idiv0>:
   d8d7c:	4770      	bx	lr
   d8d7e:	bf00      	nop

000d8d80 <__cxa_atexit>:
   d8d80:	b510      	push	{r4, lr}
   d8d82:	4c05      	ldr	r4, [pc, #20]	; (d8d98 <__cxa_atexit+0x18>)
   d8d84:	4613      	mov	r3, r2
   d8d86:	b12c      	cbz	r4, d8d94 <__cxa_atexit+0x14>
   d8d88:	460a      	mov	r2, r1
   d8d8a:	4601      	mov	r1, r0
   d8d8c:	2002      	movs	r0, #2
   d8d8e:	f3af 8000 	nop.w
   d8d92:	bd10      	pop	{r4, pc}
   d8d94:	4620      	mov	r0, r4
   d8d96:	e7fc      	b.n	d8d92 <__cxa_atexit+0x12>
   d8d98:	00000000 	.word	0x00000000

000d8d9c <memcpy>:
   d8d9c:	440a      	add	r2, r1
   d8d9e:	4291      	cmp	r1, r2
   d8da0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   d8da4:	d100      	bne.n	d8da8 <memcpy+0xc>
   d8da6:	4770      	bx	lr
   d8da8:	b510      	push	{r4, lr}
   d8daa:	f811 4b01 	ldrb.w	r4, [r1], #1
   d8dae:	f803 4f01 	strb.w	r4, [r3, #1]!
   d8db2:	4291      	cmp	r1, r2
   d8db4:	d1f9      	bne.n	d8daa <memcpy+0xe>
   d8db6:	bd10      	pop	{r4, pc}

000d8db8 <memset>:
   d8db8:	4402      	add	r2, r0
   d8dba:	4603      	mov	r3, r0
   d8dbc:	4293      	cmp	r3, r2
   d8dbe:	d100      	bne.n	d8dc2 <memset+0xa>
   d8dc0:	4770      	bx	lr
   d8dc2:	f803 1b01 	strb.w	r1, [r3], #1
   d8dc6:	e7f9      	b.n	d8dbc <memset+0x4>

000d8dc8 <srand>:
   d8dc8:	b538      	push	{r3, r4, r5, lr}
   d8dca:	4b0d      	ldr	r3, [pc, #52]	; (d8e00 <srand+0x38>)
   d8dcc:	681d      	ldr	r5, [r3, #0]
   d8dce:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d8dd0:	4604      	mov	r4, r0
   d8dd2:	b97b      	cbnz	r3, d8df4 <srand+0x2c>
   d8dd4:	2018      	movs	r0, #24
   d8dd6:	f7fc fcbd 	bl	d5754 <malloc>
   d8dda:	4a0a      	ldr	r2, [pc, #40]	; (d8e04 <srand+0x3c>)
   d8ddc:	4b0a      	ldr	r3, [pc, #40]	; (d8e08 <srand+0x40>)
   d8dde:	63a8      	str	r0, [r5, #56]	; 0x38
   d8de0:	e9c0 2300 	strd	r2, r3, [r0]
   d8de4:	4b09      	ldr	r3, [pc, #36]	; (d8e0c <srand+0x44>)
   d8de6:	6083      	str	r3, [r0, #8]
   d8de8:	230b      	movs	r3, #11
   d8dea:	8183      	strh	r3, [r0, #12]
   d8dec:	2201      	movs	r2, #1
   d8dee:	2300      	movs	r3, #0
   d8df0:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d8df4:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d8df6:	2200      	movs	r2, #0
   d8df8:	611c      	str	r4, [r3, #16]
   d8dfa:	615a      	str	r2, [r3, #20]
   d8dfc:	bd38      	pop	{r3, r4, r5, pc}
   d8dfe:	bf00      	nop
   d8e00:	2003e440 	.word	0x2003e440
   d8e04:	abcd330e 	.word	0xabcd330e
   d8e08:	e66d1234 	.word	0xe66d1234
   d8e0c:	0005deec 	.word	0x0005deec

000d8e10 <strdup>:
   d8e10:	4b02      	ldr	r3, [pc, #8]	; (d8e1c <strdup+0xc>)
   d8e12:	4601      	mov	r1, r0
   d8e14:	6818      	ldr	r0, [r3, #0]
   d8e16:	f000 b803 	b.w	d8e20 <_strdup_r>
   d8e1a:	bf00      	nop
   d8e1c:	2003e440 	.word	0x2003e440

000d8e20 <_strdup_r>:
   d8e20:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d8e22:	4604      	mov	r4, r0
   d8e24:	4608      	mov	r0, r1
   d8e26:	460d      	mov	r5, r1
   d8e28:	f000 f80f 	bl	d8e4a <strlen>
   d8e2c:	1c42      	adds	r2, r0, #1
   d8e2e:	4611      	mov	r1, r2
   d8e30:	4620      	mov	r0, r4
   d8e32:	9201      	str	r2, [sp, #4]
   d8e34:	f7fc fcbe 	bl	d57b4 <_malloc_r>
   d8e38:	4604      	mov	r4, r0
   d8e3a:	b118      	cbz	r0, d8e44 <_strdup_r+0x24>
   d8e3c:	9a01      	ldr	r2, [sp, #4]
   d8e3e:	4629      	mov	r1, r5
   d8e40:	f7ff ffac 	bl	d8d9c <memcpy>
   d8e44:	4620      	mov	r0, r4
   d8e46:	b003      	add	sp, #12
   d8e48:	bd30      	pop	{r4, r5, pc}

000d8e4a <strlen>:
   d8e4a:	4603      	mov	r3, r0
   d8e4c:	f813 2b01 	ldrb.w	r2, [r3], #1
   d8e50:	2a00      	cmp	r2, #0
   d8e52:	d1fb      	bne.n	d8e4c <strlen+0x2>
   d8e54:	1a18      	subs	r0, r3, r0
   d8e56:	3801      	subs	r0, #1
   d8e58:	4770      	bx	lr

000d8e5a <link_code_end>:
	...

000d8e5c <dynalib_user>:
   d8e5c:	4021 000d 405d 000d 4085 000d 4089 000d     !@..]@...@...@..
   d8e6c:	0000 0000 6941 2072 7551 6c61 7469 2079     ....Air Quality 
   d8e7c:	6553 736e 726f 7220 6165 7964 002e 6941     Sensor ready..Ai
   d8e8c:	2072 7551 6c61 7469 2079 6553 736e 726f     r Quality Sensor
   d8e9c:	4520 5252 524f 0021 4e46 3452 3839 5300      ERROR!.FNR498.S
   d8eac:	6e65 6f73 0072 6e49 7469 6169 696c 697a     ensor.Initializi
   d8ebc:	676e 4200 454d 3832 2030 6553 736e 726f     ng.BME280 Sensor
   d8ecc:	7220 6165 7964 002e 4d42 3245 3038 5320      ready..BME280 S
   d8edc:	6e65 6f73 2072 5245 4f52 2152 4e00 6e6f     ensor ERROR!.Non
   d8eec:	0065 6144 676e 7265 4800 6769 2068 6f50     e.Danger.High Po
   d8efc:	6c6c 7475 6f69 006e 6f4c 2077 6f50 6c6c     llution.Low Poll
   d8f0c:	7475 6f69 006e 7246 7365 2068 6941 0072     ution.Fresh Air.
   d8f1c:	504c 3a4f 2520 0064 6152 6974 3a6f 2520     LPO: %d.Ratio: %
   d8f2c:	2566 0025 6f43 636e 6e65 7274 7461 6f69     f%%.Concentratio
   d8f3c:	3a6e 2520 2066 6370 2f73 004c 4f56 2043     n: %f pcs/L.VOC 
   d8f4c:	654c 6576 736c 203a 5400 6d65 3a70 0020     Levels: .Temp: .
   d8f5c:	0043 7548 696d 6964 7974 203a 5000 6572     C.Humidity: .Pre
   d8f6c:	7373 203a 2000 5068 0061 7544 7473 203a     ss: . hPa.Dust: 
   d8f7c:	4100 7269 5120 6175 696c 7974 203a 7325     .Air Quality: %s
   d8f8c:	5400 6d65 3a70 2520 0064 7250 7365 7573     .Temp: %d.Pressu
   d8f9c:	6572 203a 6425 4800 6d75 6469 7469 3a79     re: %d.Humidity:
   d8fac:	2520 0064 227b 2231 223a 2e25 6632 2c22      %d.{"1":"%.2f",
   d8fbc:	2220 2232 223a 2e25 6631 2c22 2220 2233      "2":"%.1f", "3"
   d8fcc:	223a 2e25 6632 2c22 2220 2234 223a 2e25     :"%.2f", "4":"%.
   d8fdc:	6632 2c22 2220 2235 223a 2e25 6633 2c22     2f", "5":"%.3f",
   d8fec:	2220 2236 223a 2e25 6632 2c22 2220 2237      "6":"%.2f", "7"
   d8ffc:	223a 2e25 6631 2c22 2220 226b 223a 7325     :"%.1f", "k":"%s
   d900c:	7d22 5700 6972 6867 2074 6543 746e 7265     "}.Wright Center
   d901c:	6500 766e 762d 6c61 0073 0000               .env-vals...

000d9028 <_ZN16AirQualitySensor12FORCE_SIGNALE>:
   d9028:	0000 0000                                   ....

000d902c <_ZN16AirQualitySensor13LOW_POLLUTIONE>:
   d902c:	0002 0000                                   ....

000d9030 <_ZN16AirQualitySensor14HIGH_POLLUTIONE>:
   d9030:	0001 0000                                   ....

000d9034 <_ZN16AirQualitySensor9FRESH_AIRE>:
   d9034:	0003 0000                                   ....

000d9038 <_ZL9BasicFont>:
	...
   d9040:	0000 005f 0000 0000 0000 0007 0007 0000     .._.............
   d9050:	1400 147f 147f 0000 2400 7f2a 122a 0000     .........$*.*...
   d9060:	2300 0813 6264 0000 3600 5549 5022 0000     .#..db...6IU"P..
   d9070:	0000 0305 0000 0000 1c00 4122 0000 0000     .........."A....
   d9080:	4100 1c22 0000 0000 0800 1c2a 082a 0000     .A".......*.*...
   d9090:	0800 3e08 0808 0000 a000 0060 0000 0000     ...>......`.....
   d90a0:	0800 0808 0808 0000 6000 0060 0000 0000     .........``.....
   d90b0:	2000 0810 0204 0000 3e00 4951 3e45 0000     . .......>QIE>..
   d90c0:	0000 7f42 0040 0000 6200 4951 4649 0000     ..B.@....bQIIF..
   d90d0:	2200 4941 3649 0000 1800 1214 107f 0000     ."AII6..........
   d90e0:	2700 4545 3945 0000 3c00 494a 3049 0000     .'EEE9...<JII0..
   d90f0:	0100 0971 0305 0000 3600 4949 3649 0000     ..q......6III6..
   d9100:	0600 4949 1e29 0000 0000 3636 0000 0000     ..II).....66....
   d9110:	0000 6cac 0000 0000 0800 2214 0041 0000     ...l......."A...
   d9120:	1400 1414 1414 0000 4100 1422 0008 0000     .........A".....
   d9130:	0200 5101 0609 0000 3200 7949 3e41 0000     ...Q.....2IyA>..
   d9140:	7e00 0909 7e09 0000 7f00 4949 3649 0000     .~...~....III6..
   d9150:	3e00 4141 2241 0000 7f00 4141 1c22 0000     .>AAA"....AA"...
   d9160:	7f00 4949 4149 0000 7f00 0909 0109 0000     ..IIIA..........
   d9170:	3e00 4141 7251 0000 7f00 0808 7f08 0000     .>AAQr..........
   d9180:	4100 417f 0000 0000 2000 4140 013f 0000     .A.A..... @A?...
   d9190:	7f00 1408 4122 0000 7f00 4040 4040 0000     ...."A....@@@@..
   d91a0:	7f00 0c02 7f02 0000 7f00 0804 7f10 0000     ................
   d91b0:	3e00 4141 3e41 0000 7f00 0909 0609 0000     .>AAA>..........
   d91c0:	3e00 5141 5e21 0000 7f00 1909 4629 0000     .>AQ!^......)F..
   d91d0:	2600 4949 3249 0000 0100 7f01 0101 0000     .&III2..........
   d91e0:	3f00 4040 3f40 0000 1f00 4020 1f20 0000     .?@@@?.... @ ...
   d91f0:	3f00 3840 3f40 0000 6300 0814 6314 0000     .?@8@?...c...c..
   d9200:	0300 7804 0304 0000 6100 4951 4345 0000     ...x.....aQIEC..
   d9210:	7f00 4141 0000 0000 0200 0804 2010 0000     ..AA......... ..
   d9220:	4100 7f41 0000 0000 0400 0102 0402 0000     .AA.............
   d9230:	8000 8080 8080 0000 0100 0402 0000 0000     ................
   d9240:	2000 5454 7854 0000 7f00 4448 3844 0000     . TTTx....HDD8..
   d9250:	3800 4444 0028 0000 3800 4444 7f48 0000     .8DD(....8DDH...
   d9260:	3800 5454 1854 0000 0800 097e 0002 0000     .8TTT.....~.....
   d9270:	1800 a4a4 7ca4 0000 7f00 0408 7804 0000     .....|.......x..
   d9280:	0000 007d 0000 0000 8000 7d84 0000 0000     ..}........}....
   d9290:	7f00 2810 0044 0000 4100 407f 0000 0000     ...(D....A.@....
   d92a0:	7c00 1804 7804 0000 7c00 0408 007c 0000     .|...x...|..|...
   d92b0:	3800 4444 0038 0000 fc00 2424 0018 0000     .8DD8.....$$....
   d92c0:	1800 2424 00fc 0000 0000 087c 0004 0000     ..$$......|.....
   d92d0:	4800 5454 0024 0000 0400 447f 0000 0000     .HTT$......D....
   d92e0:	3c00 4040 007c 0000 1c00 4020 1c20 0000     .<@@|..... @ ...
   d92f0:	3c00 3040 3c40 0000 4400 1028 4428 0000     .<@0@<...D(.(D..
   d9300:	1c00 a0a0 007c 0000 4400 5464 444c 0000     ....|....DdTLD..
   d9310:	0800 4136 0000 0000 0000 007f 0000 0000     ..6A............
   d9320:	4100 0836 0000 0000 0200 0101 0102 0000     .A6.............
   d9330:	0200 0505 0002 0000 6564 6166 6c75 2074     ........default 
   d9340:	4d00 4253 4c00 4253 3c00 5053 5349 7465     .MSB.LSB.<SPISet
   d9350:	6974 676e 2073 6564 6166 6c75 3e74 3c00     tings default>.<
   d9360:	5053 5349 7465 6974 676e 2073 7325 7525     SPISettings %s%u
   d9370:	2520 2073 4f4d 4544 7525 003e                %s MODE%u>.

000d937c <_ZTVN8particle11SPISettingsE>:
	...
   d9384:	4a05 000d 49d9 000d 49db 000d               .J...I...I..

000d9390 <_ZTVN5spark12NetworkClassE>:
	...
   d9398:	57f7 000d 5801 000d 580b 000d 5815 000d     .W...X...X...X..
   d93a8:	581f 000d 582b 000d 5837 000d 5843 000d     .X..+X..7X..CX..
   d93b8:	584b 000d 5855 000d 585f 000d               KX..UX.._X..

000d93c4 <_ZTVN5spark9WiFiClassE>:
	...
   d93cc:	59a3 000d 5999 000d 598f 000d 5945 000d     .Y...Y...Y..EY..
   d93dc:	5983 000d 5977 000d 596b 000d 5963 000d     .Y..wY..kY..cY..
   d93ec:	5959 000d 594f 000d 585f 000d               YY..OY.._X..

000d93f8 <_ZTV7TwoWire>:
	...
   d9400:	59c1 000d 5a0b 000d 59e3 000d 59c3 000d     .Y...Z...Y...Y..
   d9410:	59eb 000d 59f3 000d 59fb 000d 5a03 000d     .Y...Y...Y...Z..

000d9420 <_ZTV11USARTSerial>:
	...
   d9428:	5ae5 000d 5b51 000d 5b29 000d 64e1 000d     .Z..Q[..)[...d..
   d9438:	5af9 000d 5b15 000d 5b07 000d 5b23 000d     .Z...[...[..#[..
   d9448:	5ae7 000d 5aeb 000d                         .Z...Z..

000d9450 <_ZTV9USBSerial>:
	...
   d9458:	5c1f 000d 5c87 000d 5c5d 000d 64e1 000d     .\...\..]\...d..
   d9468:	5c4f 000d 5c21 000d 5c31 000d 5c81 000d     O\..!\..1\...\..
   d9478:	5c41 000d 5c1b 000d                         A\...\..

000d9480 <_ZTV9IPAddress>:
	...
   d9488:	5d39 000d 5d29 000d 5d2b 000d               9]..)]..+]..

000d9494 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d949c:	5e0b 000d 5e11 000d 5e4f 000d 5e1f 000d     .^...^..O^...^..
   d94ac:	5e0d 000d 5925 252d 2d6d 6425 2554 3a48     .^..%Y-%m-%dT%H:
   d94bc:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.
   d94cc:	7061 0070                                   app.

000d94d0 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   d94d0:	0800 1810 2820 3830                         .... (08

000d94d8 <_ZTVN5spark13EthernetClassE>:
	...
   d94e0:	696b 000d 6961 000d 6957 000d 694d 000d     ki..ai..Wi..Mi..
   d94f0:	6941 000d 6935 000d 6929 000d 6921 000d     Ai..5i..)i..!i..
   d9500:	6917 000d 690d 000d 585f 000d               .i...i.._X..

000d950c <_ZSt7nothrow>:
   d950c:	0000 0000 6f70 0077 0000 0000               ....pow.....

000d9518 <TWO52>:
   d9518:	0000 0000 0000 4330 0000 0000 0000 c330     ......0C......0.

000d9528 <link_const_variable_data_end>:
   d9528:	000d4711 	.word	0x000d4711
   d952c:	000d5931 	.word	0x000d5931
   d9530:	000d59ad 	.word	0x000d59ad
   d9534:	000d6499 	.word	0x000d6499
   d9538:	000d64bd 	.word	0x000d64bd
   d953c:	000d64d1 	.word	0x000d64d1
   d9540:	000d6619 	.word	0x000d6619
   d9544:	000d6775 	.word	0x000d6775
   d9548:	000d6975 	.word	0x000d6975

000d954c <link_constructors_end>:
   d954c:	00000000 	.word	0x00000000
